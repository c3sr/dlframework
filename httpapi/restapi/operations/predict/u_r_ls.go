// Code generated by go-swagger; DO NOT EDIT.

package predict

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// URLsHandlerFunc turns a function with the right signature into a u r ls handler
type URLsHandlerFunc func(URLsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn URLsHandlerFunc) Handle(params URLsParams) middleware.Responder {
	return fn(params)
}

// URLsHandler interface for that can handle valid u r ls params
type URLsHandler interface {
	Handle(URLsParams) middleware.Responder
}

// NewURLs creates a new http.Handler for the u r ls operation
func NewURLs(ctx *middleware.Context, handler URLsHandler) *URLs {
	return &URLs{Context: ctx, Handler: handler}
}

/*URLs swagger:route POST /predict/urls Predict uRLs

URLs method receives a list of urls and runs
the predictor on all the urls.
The result is a list of predicted features for all the urls.

*/
type URLs struct {
	Context *middleware.Context
	Handler URLsHandler
}

func (o *URLs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewURLsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
