// Code generated by go-swagger; DO NOT EDIT.

package predict

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TextsStreamHandlerFunc turns a function with the right signature into a texts stream handler
type TextsStreamHandlerFunc func(TextsStreamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TextsStreamHandlerFunc) Handle(params TextsStreamParams) middleware.Responder {
	return fn(params)
}

// TextsStreamHandler interface for that can handle valid texts stream params
type TextsStreamHandler interface {
	Handle(TextsStreamParams) middleware.Responder
}

// NewTextsStream creates a new http.Handler for the texts stream operation
func NewTextsStream(ctx *middleware.Context, handler TextsStreamHandler) *TextsStream {
	return &TextsStream{Context: ctx, Handler: handler}
}

/*TextsStream swagger:route POST /predict/stream/text Predict textsStream

Text method receives a list base64 encoded texts and runs
the predictor on all the texts.

The result is a prediction feature stream for each text.

*/
type TextsStream struct {
	Context *middleware.Context
	Handler TextsStreamHandler
}

func (o *TextsStream) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTextsStreamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
