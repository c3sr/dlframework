// Code generated by go-swagger; DO NOT EDIT.

package predict

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UrlsStreamHandlerFunc turns a function with the right signature into a urls stream handler
type UrlsStreamHandlerFunc func(UrlsStreamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UrlsStreamHandlerFunc) Handle(params UrlsStreamParams) middleware.Responder {
	return fn(params)
}

// UrlsStreamHandler interface for that can handle valid urls stream params
type UrlsStreamHandler interface {
	Handle(UrlsStreamParams) middleware.Responder
}

// NewUrlsStream creates a new http.Handler for the urls stream operation
func NewUrlsStream(ctx *middleware.Context, handler UrlsStreamHandler) *UrlsStream {
	return &UrlsStream{Context: ctx, Handler: handler}
}

/*UrlsStream swagger:route POST /predict/stream/urls Predict urlsStream

URLsStream method receives a stream of urls and runs
the predictor on all the urls.
The result is a prediction feature stream for each url.

*/
type UrlsStream struct {
	Context *middleware.Context
	Handler UrlsStreamHandler
}

func (o *UrlsStream) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUrlsStreamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
