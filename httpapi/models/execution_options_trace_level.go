// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExecutionOptionsTraceLevel execution options trace level
// swagger:model ExecutionOptionsTraceLevel
type ExecutionOptionsTraceLevel string

const (

	// ExecutionOptionsTraceLevelNOTRACE captures enum value "NO_TRACE"
	ExecutionOptionsTraceLevelNOTRACE ExecutionOptionsTraceLevel = "NO_TRACE"

	// ExecutionOptionsTraceLevelSTEPTRACE captures enum value "STEP_TRACE"
	ExecutionOptionsTraceLevelSTEPTRACE ExecutionOptionsTraceLevel = "STEP_TRACE"

	// ExecutionOptionsTraceLevelFRAMEWORKTRACE captures enum value "FRAMEWORK_TRACE"
	ExecutionOptionsTraceLevelFRAMEWORKTRACE ExecutionOptionsTraceLevel = "FRAMEWORK_TRACE"

	// ExecutionOptionsTraceLevelCPUONLYTRACE captures enum value "CPU_ONLY_TRACE"
	ExecutionOptionsTraceLevelCPUONLYTRACE ExecutionOptionsTraceLevel = "CPU_ONLY_TRACE"

	// ExecutionOptionsTraceLevelHARDWARETRACE captures enum value "HARDWARE_TRACE"
	ExecutionOptionsTraceLevelHARDWARETRACE ExecutionOptionsTraceLevel = "HARDWARE_TRACE"

	// ExecutionOptionsTraceLevelFULLTRACE captures enum value "FULL_TRACE"
	ExecutionOptionsTraceLevelFULLTRACE ExecutionOptionsTraceLevel = "FULL_TRACE"
)

// for schema
var executionOptionsTraceLevelEnum []interface{}

func init() {
	var res []ExecutionOptionsTraceLevel
	if err := json.Unmarshal([]byte(`["NO_TRACE","STEP_TRACE","FRAMEWORK_TRACE","CPU_ONLY_TRACE","HARDWARE_TRACE","FULL_TRACE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		executionOptionsTraceLevelEnum = append(executionOptionsTraceLevelEnum, v)
	}
}

func (m ExecutionOptionsTraceLevel) validateExecutionOptionsTraceLevelEnum(path, location string, value ExecutionOptionsTraceLevel) error {
	if err := validate.Enum(path, location, value, executionOptionsTraceLevelEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this execution options trace level
func (m ExecutionOptionsTraceLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExecutionOptionsTraceLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
