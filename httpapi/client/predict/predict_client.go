// Code generated by go-swagger; DO NOT EDIT.

package predict

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new predict API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for predict API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Close closes a predictor clear it s memory
*/
func (a *Client) Close(params *CloseParams) (*CloseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Close",
		Method:             "POST",
		PathPattern:        "/predict/close",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Close: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Dataset datasets method receives a single dataset and runs the predictor on all elements of the dataset the result is a prediction feature list
*/
func (a *Client) Dataset(params *DatasetParams) (*DatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatasetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Dataset",
		Method:             "POST",
		PathPattern:        "/predict/dataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Dataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Images images method receives a list of base64 encoded images and runs the predictor on all the images the result is a prediction feature list for each image
*/
func (a *Client) Images(params *ImagesParams) (*ImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Images",
		Method:             "POST",
		PathPattern:        "/predict/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Images: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Open opens a predictor and returns an id where the predictor is accessible the id can be used to perform inference requests
*/
func (a *Client) Open(params *OpenParams) (*OpenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Open",
		Method:             "POST",
		PathPattern:        "/predict/open",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OpenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Open: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Reset resets method clears the internal cache of the predictors
*/
func (a *Client) Reset(params *ResetParams) (*ResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Reset",
		Method:             "POST",
		PathPattern:        "/predict/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
URLs us r ls method receives a list of urls and runs the predictor on all the urls the result is a list of predicted features for all the urls
*/
func (a *Client) URLs(params *URLsParams) (*URLsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewURLsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "URLs",
		Method:             "POST",
		PathPattern:        "/predict/urls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &URLsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*URLsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for URLs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
