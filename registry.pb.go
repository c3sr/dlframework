// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry.proto

package dlframework

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrorStatus struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty" yaml:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" yaml:"message,omitempty"`
}

func (m *ErrorStatus) Reset()      { *m = ErrorStatus{} }
func (*ErrorStatus) ProtoMessage() {}
func (*ErrorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}
func (m *ErrorStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorStatus.Merge(m, src)
}
func (m *ErrorStatus) XXX_Size() int {
	return m.Size()
}
func (m *ErrorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorStatus proto.InternalMessageInfo

func (m *ErrorStatus) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ContainerHardware struct {
	Gpu string `protobuf:"bytes,1,opt,name=gpu,proto3" json:"gpu,omitempty" yaml:"gpu,omitempty"`
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty" yaml:"cpu,omitempty"`
}

func (m *ContainerHardware) Reset()      { *m = ContainerHardware{} }
func (*ContainerHardware) ProtoMessage() {}
func (*ContainerHardware) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1}
}
func (m *ContainerHardware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerHardware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerHardware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerHardware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerHardware.Merge(m, src)
}
func (m *ContainerHardware) XXX_Size() int {
	return m.Size()
}
func (m *ContainerHardware) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerHardware.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerHardware proto.InternalMessageInfo

func (m *ContainerHardware) GetGpu() string {
	if m != nil {
		return m.Gpu
	}
	return ""
}

func (m *ContainerHardware) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

type FrameworkManifest struct {
	Name      string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Version   string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Container map[string]*ContainerHardware `protobuf:"bytes,3,rep,name=container,proto3" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FrameworkManifest) Reset()      { *m = FrameworkManifest{} }
func (*FrameworkManifest) ProtoMessage() {}
func (*FrameworkManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{2}
}
func (m *FrameworkManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameworkManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameworkManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameworkManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameworkManifest.Merge(m, src)
}
func (m *FrameworkManifest) XXX_Size() int {
	return m.Size()
}
func (m *FrameworkManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameworkManifest.DiscardUnknown(m)
}

var xxx_messageInfo_FrameworkManifest proto.InternalMessageInfo

func (m *FrameworkManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FrameworkManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FrameworkManifest) GetContainer() map[string]*ContainerHardware {
	if m != nil {
		return m.Container
	}
	return nil
}

type ModelManifest struct {
	Name              string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Version           string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Framework         *FrameworkManifest            `protobuf:"bytes,3,opt,name=framework,proto3" json:"framework,omitempty" yaml:"framework,omitempty"`
	Container         map[string]*ContainerHardware `protobuf:"bytes,4,rep,name=container,proto3" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description       string                        `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Reference         []string                      `protobuf:"bytes,6,rep,name=reference,proto3" json:"reference,omitempty" yaml:"references,omitempty"`
	License           string                        `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty" yaml:"license,omitempty"`
	Inputs            []*ModelManifest_Type         `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty" yaml:"inputs,omitempty"`
	Output            *ModelManifest_Type           `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty" yaml:"output,omitempty"`
	BeforePreprocess  string                        `protobuf:"bytes,10,opt,name=before_preprocess,json=beforePreprocess,proto3" json:"before_preprocess,omitempty" yaml:"before_preprocess,omitempty"`
	Preprocess        string                        `protobuf:"bytes,11,opt,name=preprocess,proto3" json:"preprocess,omitempty" yaml:"preprocess,omitempty"`
	AfterPreprocess   string                        `protobuf:"bytes,12,opt,name=after_preprocess,json=afterPreprocess,proto3" json:"after_preprocess,omitempty" yaml:"after_preprocess,omitempty"`
	BeforePostprocess string                        `protobuf:"bytes,13,opt,name=before_postprocess,json=beforePostprocess,proto3" json:"before_postprocess,omitempty" yaml:"before_postprocess,omitempty"`
	Postprocess       string                        `protobuf:"bytes,14,opt,name=postprocess,proto3" json:"postprocess,omitempty" yaml:"postprocess,omitempty"`
	AfterPostprocess  string                        `protobuf:"bytes,15,opt,name=after_postprocess,json=afterPostprocess,proto3" json:"after_postprocess,omitempty" yaml:"after_postprocess,omitempty"`
	Model             *ModelManifest_Model          `protobuf:"bytes,16,opt,name=model,proto3" json:"model,omitempty" yaml:"model,omitempty"`
	Attributes        map[string]string             `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty" yaml:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hidden            bool                          `protobuf:"varint,18,opt,name=hidden,proto3" json:"hidden,omitempty" yaml:"hidden,omitempty"`
}

func (m *ModelManifest) Reset()      { *m = ModelManifest{} }
func (*ModelManifest) ProtoMessage() {}
func (*ModelManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3}
}
func (m *ModelManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelManifest.Merge(m, src)
}
func (m *ModelManifest) XXX_Size() int {
	return m.Size()
}
func (m *ModelManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelManifest.DiscardUnknown(m)
}

var xxx_messageInfo_ModelManifest proto.InternalMessageInfo

func (m *ModelManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModelManifest) GetFramework() *FrameworkManifest {
	if m != nil {
		return m.Framework
	}
	return nil
}

func (m *ModelManifest) GetContainer() map[string]*ContainerHardware {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ModelManifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ModelManifest) GetReference() []string {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *ModelManifest) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *ModelManifest) GetInputs() []*ModelManifest_Type {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ModelManifest) GetOutput() *ModelManifest_Type {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ModelManifest) GetBeforePreprocess() string {
	if m != nil {
		return m.BeforePreprocess
	}
	return ""
}

func (m *ModelManifest) GetPreprocess() string {
	if m != nil {
		return m.Preprocess
	}
	return ""
}

func (m *ModelManifest) GetAfterPreprocess() string {
	if m != nil {
		return m.AfterPreprocess
	}
	return ""
}

func (m *ModelManifest) GetBeforePostprocess() string {
	if m != nil {
		return m.BeforePostprocess
	}
	return ""
}

func (m *ModelManifest) GetPostprocess() string {
	if m != nil {
		return m.Postprocess
	}
	return ""
}

func (m *ModelManifest) GetAfterPostprocess() string {
	if m != nil {
		return m.AfterPostprocess
	}
	return ""
}

func (m *ModelManifest) GetModel() *ModelManifest_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *ModelManifest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ModelManifest) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type ModelManifest_Type struct {
	Type        string                                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" yaml:"type,omitempty"`
	Description string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Parameters  map[string]*ModelManifest_Type_Parameter `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" yaml:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ModelManifest_Type) Reset()      { *m = ModelManifest_Type{} }
func (*ModelManifest_Type) ProtoMessage() {}
func (*ModelManifest_Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3, 0}
}
func (m *ModelManifest_Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelManifest_Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelManifest_Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelManifest_Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelManifest_Type.Merge(m, src)
}
func (m *ModelManifest_Type) XXX_Size() int {
	return m.Size()
}
func (m *ModelManifest_Type) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelManifest_Type.DiscardUnknown(m)
}

var xxx_messageInfo_ModelManifest_Type proto.InternalMessageInfo

func (m *ModelManifest_Type) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ModelManifest_Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ModelManifest_Type) GetParameters() map[string]*ModelManifest_Type_Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ModelManifest_Type_Parameter struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" yaml:",inline"`
}

func (m *ModelManifest_Type_Parameter) Reset()      { *m = ModelManifest_Type_Parameter{} }
func (*ModelManifest_Type_Parameter) ProtoMessage() {}
func (*ModelManifest_Type_Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3, 0, 0}
}
func (m *ModelManifest_Type_Parameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelManifest_Type_Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelManifest_Type_Parameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelManifest_Type_Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelManifest_Type_Parameter.Merge(m, src)
}
func (m *ModelManifest_Type_Parameter) XXX_Size() int {
	return m.Size()
}
func (m *ModelManifest_Type_Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelManifest_Type_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_ModelManifest_Type_Parameter proto.InternalMessageInfo

func (m *ModelManifest_Type_Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ModelManifest_Model struct {
	BaseUrl         string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty" yaml:"base_url,omitempty"`
	WeightsPath     string `protobuf:"bytes,2,opt,name=weights_path,json=weightsPath,proto3" json:"weights_path,omitempty" yaml:"weights_path,omitempty"`
	GraphPath       string `protobuf:"bytes,3,opt,name=graph_path,json=graphPath,proto3" json:"graph_path,omitempty" yaml:"graph_path,omitempty"`
	IsArchive       bool   `protobuf:"varint,4,opt,name=is_archive,json=isArchive,proto3" json:"is_archive,omitempty" yaml:"is_archive,omitempty"`
	WeightsChecksum string `protobuf:"bytes,5,opt,name=weights_checksum,json=weightsChecksum,proto3" json:"weights_checksum,omitempty" yaml:"weights_checksum,omitempty"`
	GraphChecksum   string `protobuf:"bytes,6,opt,name=graph_checksum,json=graphChecksum,proto3" json:"graph_checksum,omitempty" yaml:"graph_checksum,omitempty"`
}

func (m *ModelManifest_Model) Reset()      { *m = ModelManifest_Model{} }
func (*ModelManifest_Model) ProtoMessage() {}
func (*ModelManifest_Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3, 1}
}
func (m *ModelManifest_Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelManifest_Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelManifest_Model.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelManifest_Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelManifest_Model.Merge(m, src)
}
func (m *ModelManifest_Model) XXX_Size() int {
	return m.Size()
}
func (m *ModelManifest_Model) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelManifest_Model.DiscardUnknown(m)
}

var xxx_messageInfo_ModelManifest_Model proto.InternalMessageInfo

func (m *ModelManifest_Model) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ModelManifest_Model) GetWeightsPath() string {
	if m != nil {
		return m.WeightsPath
	}
	return ""
}

func (m *ModelManifest_Model) GetGraphPath() string {
	if m != nil {
		return m.GraphPath
	}
	return ""
}

func (m *ModelManifest_Model) GetIsArchive() bool {
	if m != nil {
		return m.IsArchive
	}
	return false
}

func (m *ModelManifest_Model) GetWeightsChecksum() string {
	if m != nil {
		return m.WeightsChecksum
	}
	return ""
}

func (m *ModelManifest_Model) GetGraphChecksum() string {
	if m != nil {
		return m.GraphChecksum
	}
	return ""
}

type FrameworkRequest struct {
	FrameworkName    string `protobuf:"bytes,1,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,2,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
}

func (m *FrameworkRequest) Reset()      { *m = FrameworkRequest{} }
func (*FrameworkRequest) ProtoMessage() {}
func (*FrameworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{4}
}
func (m *FrameworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameworkRequest.Merge(m, src)
}
func (m *FrameworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *FrameworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FrameworkRequest proto.InternalMessageInfo

func (m *FrameworkRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *FrameworkRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

type FrameworkManifestsResponse struct {
	Manifests []*FrameworkManifest `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty" yaml:"manifests,omitempty"`
}

func (m *FrameworkManifestsResponse) Reset()      { *m = FrameworkManifestsResponse{} }
func (*FrameworkManifestsResponse) ProtoMessage() {}
func (*FrameworkManifestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{5}
}
func (m *FrameworkManifestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameworkManifestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameworkManifestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameworkManifestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameworkManifestsResponse.Merge(m, src)
}
func (m *FrameworkManifestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FrameworkManifestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameworkManifestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FrameworkManifestsResponse proto.InternalMessageInfo

func (m *FrameworkManifestsResponse) GetManifests() []*FrameworkManifest {
	if m != nil {
		return m.Manifests
	}
	return nil
}

type Agent struct {
	Host         string               `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" yaml:"host,omitempty"`
	Port         string               `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" yaml:"port,omitempty"`
	Hostname     string               `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty" yaml:"hostname,omitempty"`
	Architecture string               `protobuf:"bytes,4,opt,name=architecture,proto3" json:"architecture,omitempty" yaml:"architecture,omitempty"`
	Hasgpu       bool                 `protobuf:"varint,5,opt,name=hasgpu,proto3" json:"hasgpu,omitempty" yaml:"hasgpu,omitempty"`
	Cpuinfo      string               `protobuf:"bytes,6,opt,name=cpuinfo,proto3" json:"cpuinfo,omitempty" yaml:"cpuinfo,omitempty"`
	Gpuinfo      string               `protobuf:"bytes,7,opt,name=gpuinfo,proto3" json:"gpuinfo,omitempty" yaml:"gpuinfo,omitempty"`
	Frameworks   []*FrameworkManifest `protobuf:"bytes,8,rep,name=frameworks,proto3" json:"frameworks,omitempty" yaml:"frameworks,omitempty"`
	Metadata     map[string]string    `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" yaml:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Agent) Reset()      { *m = Agent{} }
func (*Agent) ProtoMessage() {}
func (*Agent) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{6}
}
func (m *Agent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agent.Merge(m, src)
}
func (m *Agent) XXX_Size() int {
	return m.Size()
}
func (m *Agent) XXX_DiscardUnknown() {
	xxx_messageInfo_Agent.DiscardUnknown(m)
}

var xxx_messageInfo_Agent proto.InternalMessageInfo

func (m *Agent) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Agent) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Agent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Agent) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *Agent) GetHasgpu() bool {
	if m != nil {
		return m.Hasgpu
	}
	return false
}

func (m *Agent) GetCpuinfo() string {
	if m != nil {
		return m.Cpuinfo
	}
	return ""
}

func (m *Agent) GetGpuinfo() string {
	if m != nil {
		return m.Gpuinfo
	}
	return ""
}

func (m *Agent) GetFrameworks() []*FrameworkManifest {
	if m != nil {
		return m.Frameworks
	}
	return nil
}

func (m *Agent) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Agents struct {
	Agents []*Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty" yaml:"agents,omitempty"`
}

func (m *Agents) Reset()      { *m = Agents{} }
func (*Agents) ProtoMessage() {}
func (*Agents) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{7}
}
func (m *Agents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agents.Merge(m, src)
}
func (m *Agents) XXX_Size() int {
	return m.Size()
}
func (m *Agents) XXX_DiscardUnknown() {
	xxx_messageInfo_Agents.DiscardUnknown(m)
}

var xxx_messageInfo_Agents proto.InternalMessageInfo

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type ModelRequest struct {
	FrameworkName    string `protobuf:"bytes,1,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,2,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
	ModelName        string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion     string `protobuf:"bytes,4,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
}

func (m *ModelRequest) Reset()      { *m = ModelRequest{} }
func (*ModelRequest) ProtoMessage() {}
func (*ModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{8}
}
func (m *ModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelRequest.Merge(m, src)
}
func (m *ModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModelRequest proto.InternalMessageInfo

func (m *ModelRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *ModelRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

func (m *ModelRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ModelRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

type ModelManifestsResponse struct {
	Manifests []*ModelManifest `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty" yaml:"manifests,omitempty"`
}

func (m *ModelManifestsResponse) Reset()      { *m = ModelManifestsResponse{} }
func (*ModelManifestsResponse) ProtoMessage() {}
func (*ModelManifestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{9}
}
func (m *ModelManifestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelManifestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelManifestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelManifestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelManifestsResponse.Merge(m, src)
}
func (m *ModelManifestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ModelManifestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelManifestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModelManifestsResponse proto.InternalMessageInfo

func (m *ModelManifestsResponse) GetManifests() []*ModelManifest {
	if m != nil {
		return m.Manifests
	}
	return nil
}

func init() {
	proto.RegisterType((*ErrorStatus)(nil), "carml.org.dlframework.ErrorStatus")
	golang_proto.RegisterType((*ErrorStatus)(nil), "carml.org.dlframework.ErrorStatus")
	proto.RegisterType((*ContainerHardware)(nil), "carml.org.dlframework.ContainerHardware")
	golang_proto.RegisterType((*ContainerHardware)(nil), "carml.org.dlframework.ContainerHardware")
	proto.RegisterType((*FrameworkManifest)(nil), "carml.org.dlframework.FrameworkManifest")
	golang_proto.RegisterType((*FrameworkManifest)(nil), "carml.org.dlframework.FrameworkManifest")
	proto.RegisterMapType((map[string]*ContainerHardware)(nil), "carml.org.dlframework.FrameworkManifest.ContainerEntry")
	golang_proto.RegisterMapType((map[string]*ContainerHardware)(nil), "carml.org.dlframework.FrameworkManifest.ContainerEntry")
	proto.RegisterType((*ModelManifest)(nil), "carml.org.dlframework.ModelManifest")
	golang_proto.RegisterType((*ModelManifest)(nil), "carml.org.dlframework.ModelManifest")
	proto.RegisterMapType((map[string]string)(nil), "carml.org.dlframework.ModelManifest.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "carml.org.dlframework.ModelManifest.AttributesEntry")
	proto.RegisterMapType((map[string]*ContainerHardware)(nil), "carml.org.dlframework.ModelManifest.ContainerEntry")
	golang_proto.RegisterMapType((map[string]*ContainerHardware)(nil), "carml.org.dlframework.ModelManifest.ContainerEntry")
	proto.RegisterType((*ModelManifest_Type)(nil), "carml.org.dlframework.ModelManifest.Type")
	golang_proto.RegisterType((*ModelManifest_Type)(nil), "carml.org.dlframework.ModelManifest.Type")
	proto.RegisterMapType((map[string]*ModelManifest_Type_Parameter)(nil), "carml.org.dlframework.ModelManifest.Type.ParametersEntry")
	golang_proto.RegisterMapType((map[string]*ModelManifest_Type_Parameter)(nil), "carml.org.dlframework.ModelManifest.Type.ParametersEntry")
	proto.RegisterType((*ModelManifest_Type_Parameter)(nil), "carml.org.dlframework.ModelManifest.Type.Parameter")
	golang_proto.RegisterType((*ModelManifest_Type_Parameter)(nil), "carml.org.dlframework.ModelManifest.Type.Parameter")
	proto.RegisterType((*ModelManifest_Model)(nil), "carml.org.dlframework.ModelManifest.Model")
	golang_proto.RegisterType((*ModelManifest_Model)(nil), "carml.org.dlframework.ModelManifest.Model")
	proto.RegisterType((*FrameworkRequest)(nil), "carml.org.dlframework.FrameworkRequest")
	golang_proto.RegisterType((*FrameworkRequest)(nil), "carml.org.dlframework.FrameworkRequest")
	proto.RegisterType((*FrameworkManifestsResponse)(nil), "carml.org.dlframework.FrameworkManifestsResponse")
	golang_proto.RegisterType((*FrameworkManifestsResponse)(nil), "carml.org.dlframework.FrameworkManifestsResponse")
	proto.RegisterType((*Agent)(nil), "carml.org.dlframework.Agent")
	golang_proto.RegisterType((*Agent)(nil), "carml.org.dlframework.Agent")
	proto.RegisterMapType((map[string]string)(nil), "carml.org.dlframework.Agent.MetadataEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "carml.org.dlframework.Agent.MetadataEntry")
	proto.RegisterType((*Agents)(nil), "carml.org.dlframework.Agents")
	golang_proto.RegisterType((*Agents)(nil), "carml.org.dlframework.Agents")
	proto.RegisterType((*ModelRequest)(nil), "carml.org.dlframework.ModelRequest")
	golang_proto.RegisterType((*ModelRequest)(nil), "carml.org.dlframework.ModelRequest")
	proto.RegisterType((*ModelManifestsResponse)(nil), "carml.org.dlframework.ModelManifestsResponse")
	golang_proto.RegisterType((*ModelManifestsResponse)(nil), "carml.org.dlframework.ModelManifestsResponse")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }
func init() { golang_proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 1628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcb, 0x6f, 0x13, 0xd7,
	0x1a, 0xcf, 0xd8, 0x49, 0x88, 0xbf, 0xbc, 0x0f, 0xaf, 0xc1, 0x24, 0x33, 0xc1, 0x5c, 0x2e, 0xb9,
	0x08, 0x1c, 0x5d, 0x72, 0x1f, 0x40, 0x05, 0x15, 0xa6, 0xb4, 0x05, 0x89, 0x2a, 0x0d, 0x2d, 0x8b,
	0xaa, 0x6a, 0x34, 0x71, 0x8e, 0xed, 0x51, 0xec, 0x99, 0xc9, 0x99, 0x33, 0xa0, 0x54, 0xaa, 0x54,
	0xb1, 0xa9, 0xd4, 0x55, 0xa5, 0x2e, 0xba, 0xa5, 0x8b, 0x4a, 0xfd, 0x13, 0xda, 0x4d, 0xc5, 0xb2,
	0x4b, 0xa4, 0x6e, 0x58, 0x4d, 0x49, 0xd2, 0x3f, 0x00, 0xcd, 0xaa, 0xcb, 0xea, 0x3c, 0x66, 0xe6,
	0x1c, 0xdb, 0x09, 0x26, 0x0b, 0xa4, 0xee, 0xec, 0xef, 0xf1, 0xfb, 0xbe, 0xf3, 0xbd, 0x6d, 0x98,
	0x22, 0xb8, 0xe9, 0x86, 0x94, 0x6c, 0x57, 0x03, 0xe2, 0x53, 0x1f, 0x1d, 0xaf, 0x3b, 0xa4, 0xd3,
	0xae, 0xfa, 0xa4, 0x59, 0xdd, 0x68, 0x37, 0x88, 0xd3, 0xc1, 0x8f, 0x7c, 0xb2, 0x59, 0x9e, 0x6b,
	0xfa, 0x7e, 0xb3, 0x8d, 0x97, 0x9c, 0xc0, 0x5d, 0x72, 0x3c, 0xcf, 0xa7, 0x0e, 0x75, 0x7d, 0x2f,
	0x14, 0x4a, 0xe5, 0x4b, 0x4d, 0x97, 0xb6, 0xa2, 0xf5, 0x6a, 0xdd, 0xef, 0x2c, 0x35, 0xfd, 0xa6,
	0xbf, 0xc4, 0xc9, 0xeb, 0x51, 0x83, 0x7f, 0xe3, 0x5f, 0xf8, 0x27, 0x21, 0x5e, 0xa1, 0x30, 0x7e,
	0x9b, 0x10, 0x9f, 0xdc, 0xa7, 0x0e, 0x8d, 0x42, 0x74, 0x1e, 0x0a, 0xfe, 0xa6, 0x69, 0x2c, 0x18,
	0x8b, 0x63, 0xb5, 0x93, 0x49, 0x6c, 0x1f, 0xdd, 0x76, 0x3a, 0xed, 0x6b, 0x15, 0x7f, 0xf3, 0xa2,
	0xdf, 0x71, 0x29, 0xee, 0x04, 0x74, 0xbb, 0xb2, 0x5a, 0xf0, 0x37, 0xd1, 0xff, 0xe0, 0x48, 0x07,
	0x87, 0xa1, 0xd3, 0xc4, 0x66, 0x61, 0xc1, 0x58, 0x2c, 0xd5, 0xe6, 0x92, 0xd8, 0x36, 0x85, 0xb4,
	0x64, 0xa8, 0x2a, 0xa9, 0xf0, 0xb5, 0xe1, 0x97, 0x4f, 0x6c, 0xa3, 0xb2, 0x05, 0xb3, 0xb7, 0x7c,
	0x8f, 0x3a, 0xae, 0x87, 0xc9, 0xfb, 0x0e, 0xd9, 0x78, 0xe4, 0x10, 0x8c, 0x2e, 0x40, 0xb1, 0x19,
	0x44, 0xdc, 0x78, 0xa9, 0x66, 0x26, 0xb1, 0x7d, 0x4c, 0xc0, 0x35, 0x83, 0x48, 0x85, 0x62, 0x42,
	0x4c, 0xb6, 0x1e, 0x44, 0xd2, 0xb4, 0x22, 0x5b, 0xef, 0x92, 0xad, 0x07, 0x91, 0x34, 0xf9, 0x7b,
	0x01, 0x66, 0xdf, 0x4d, 0x63, 0x78, 0xcf, 0xf1, 0xdc, 0x06, 0x0e, 0x29, 0xba, 0x04, 0xc3, 0x9e,
	0xd3, 0xc1, 0xd2, 0xe8, 0xa9, 0x24, 0xb6, 0x8f, 0x0b, 0x20, 0x46, 0x55, 0x91, 0xb8, 0x18, 0x7b,
	0xf5, 0x43, 0x4c, 0x42, 0xd7, 0xf7, 0x7a, 0x5f, 0x2d, 0x19, 0xda, 0xab, 0x25, 0x0d, 0x45, 0x50,
	0xaa, 0xa7, 0xef, 0x35, 0x8b, 0x0b, 0xc5, 0xc5, 0xf1, 0xcb, 0xff, 0xaf, 0xf6, 0xcd, 0x6e, 0xb5,
	0xc7, 0xc7, 0x6a, 0x16, 0xa9, 0xdb, 0x1e, 0x25, 0xdb, 0x35, 0x2b, 0x89, 0xed, 0xb2, 0x7c, 0x6d,
	0xca, 0x51, 0x8d, 0xe6, 0x96, 0xca, 0x0d, 0x98, 0xd2, 0x95, 0xd1, 0x0c, 0x14, 0x37, 0xf1, 0xb6,
	0x78, 0xee, 0x2a, 0xfb, 0x88, 0x6e, 0xc0, 0xc8, 0x43, 0xa7, 0x1d, 0x89, 0x34, 0x8e, 0x5f, 0x5e,
	0xdc, 0xc7, 0xad, 0x9e, 0x74, 0xad, 0x0a, 0xb5, 0x6b, 0x85, 0x2b, 0x86, 0x8c, 0xf0, 0xf7, 0x47,
	0x61, 0xf2, 0x9e, 0xbf, 0x81, 0xdb, 0x6f, 0x3a, 0xba, 0x0d, 0x28, 0x65, 0x8e, 0x9a, 0xc5, 0x03,
	0x9f, 0xd1, 0x13, 0x5d, 0x35, 0x9c, 0x99, 0x98, 0x16, 0xce, 0x8c, 0x8a, 0xb6, 0xd4, 0x2c, 0x0e,
	0xf3, 0x2c, 0x2e, 0xef, 0x63, 0x47, 0x8b, 0xc3, 0xe1, 0x33, 0x88, 0x6a, 0x30, 0xbe, 0x81, 0xc3,
	0x3a, 0x71, 0x03, 0xd6, 0xe3, 0xe6, 0x08, 0x0f, 0xcb, 0x42, 0x12, 0xdb, 0x73, 0x42, 0x5f, 0x61,
	0xaa, 0x08, 0xaa, 0x12, 0xba, 0x0e, 0x25, 0x82, 0x1b, 0x98, 0x60, 0xaf, 0x8e, 0xcd, 0xd1, 0x85,
	0xe2, 0x62, 0xa9, 0x66, 0x27, 0xb1, 0x7d, 0x5a, 0x20, 0x64, 0xac, 0x50, 0x73, 0x21, 0x23, 0xb3,
	0xac, 0xb4, 0xdd, 0x3a, 0xf6, 0x42, 0x6c, 0x1e, 0xe9, 0xce, 0x8a, 0x64, 0x68, 0x59, 0x91, 0x34,
	0xf4, 0x19, 0x8c, 0xba, 0x5e, 0x10, 0xd1, 0xd0, 0x1c, 0xe3, 0xa1, 0xfa, 0xd7, 0x40, 0xa1, 0xfa,
	0x68, 0x3b, 0xc0, 0xb5, 0xd3, 0x49, 0x6c, 0x9f, 0x14, 0x16, 0x04, 0x84, 0x6a, 0x40, 0xa2, 0x32,
	0x7c, 0x3f, 0xa2, 0x41, 0x44, 0xcd, 0x12, 0x4f, 0xf9, 0xe1, 0xf0, 0x05, 0x84, 0x86, 0x2f, 0x48,
	0xe8, 0x3e, 0xcc, 0xae, 0xe3, 0x86, 0x4f, 0xf0, 0x5a, 0x40, 0x70, 0x40, 0xfc, 0x3a, 0x0e, 0x43,
	0x13, 0x78, 0x04, 0xfe, 0x99, 0xc4, 0x76, 0x45, 0xe8, 0xf7, 0x88, 0xa8, 0x50, 0x33, 0x82, 0xbb,
	0x92, 0x31, 0xd1, 0xdb, 0x00, 0x0a, 0xda, 0x38, 0x47, 0x53, 0x92, 0xd1, 0x1f, 0x46, 0x51, 0x41,
	0x2b, 0x30, 0xe3, 0x34, 0x28, 0x26, 0xaa, 0x53, 0x13, 0x1c, 0xe6, 0x5c, 0x12, 0xdb, 0x67, 0x04,
	0x4c, 0xb7, 0x84, 0x0a, 0x36, 0xcd, 0x99, 0x8a, 0x4b, 0x0f, 0x00, 0xa5, 0x8f, 0xf0, 0x43, 0x9a,
	0x62, 0x4e, 0x72, 0xcc, 0xf3, 0x49, 0x6c, 0x9f, 0xd5, 0x1f, 0x9a, 0xcb, 0xa8, 0xa8, 0x32, 0x54,
	0x2b, 0x39, 0x97, 0x95, 0xae, 0x0a, 0x38, 0xd5, 0x5d, 0xba, 0xfb, 0x20, 0xa9, 0x4a, 0x2c, 0x07,
	0xf2, 0x2d, 0x0a, 0xd2, 0x74, 0x77, 0x0e, 0x7a, 0x44, 0xb4, 0x1c, 0x88, 0xf7, 0x2a, 0xa0, 0x9f,
	0xc2, 0x48, 0x87, 0xd5, 0x84, 0x39, 0xc3, 0xeb, 0xe6, 0xc2, 0x40, 0x75, 0xc3, 0xbf, 0xd5, 0xca,
	0x49, 0x6c, 0x9f, 0x90, 0x4b, 0x8e, 0x11, 0x54, 0x43, 0x02, 0x14, 0x45, 0x00, 0x0e, 0xa5, 0xc4,
	0x5d, 0x8f, 0x28, 0x0e, 0xcd, 0x59, 0x5e, 0xfa, 0xff, 0x19, 0xc8, 0xc4, 0xcd, 0x4c, 0x4d, 0x8c,
	0x09, 0xa5, 0x2e, 0x72, 0x44, 0xad, 0x2e, 0x72, 0x32, 0x5a, 0x86, 0xd1, 0x96, 0xbb, 0xb1, 0x81,
	0x3d, 0x13, 0xf1, 0xe5, 0xad, 0x94, 0xb8, 0xa0, 0x6b, 0x25, 0x2e, 0x48, 0xe5, 0x27, 0x45, 0x18,
	0x66, 0x0d, 0xc1, 0x06, 0x35, 0xdd, 0x0e, 0xfa, 0x0c, 0x6a, 0x46, 0xd5, 0x06, 0x35, 0x23, 0x74,
	0x4f, 0xa5, 0xc2, 0x61, 0xa6, 0xd2, 0xe7, 0x00, 0x81, 0xc3, 0x22, 0x41, 0x31, 0x09, 0xe5, 0x4e,
	0xbc, 0x3a, 0x70, 0x0b, 0x57, 0x57, 0x32, 0xdd, 0x9e, 0x60, 0xe5, 0xb0, 0x7a, 0x13, 0x65, 0xe4,
	0xf2, 0x7f, 0xa1, 0x94, 0xe9, 0xa3, 0xc5, 0x74, 0x01, 0x8a, 0xc7, 0xa3, 0x24, 0xb6, 0xa7, 0x04,
	0xd0, 0x45, 0xd7, 0x6b, 0xbb, 0x1e, 0xae, 0xc8, 0x55, 0x57, 0x26, 0x30, 0xdd, 0x65, 0xb6, 0xcf,
	0x3e, 0xbd, 0xa3, 0xef, 0xd3, 0xe5, 0x43, 0x3c, 0x49, 0x59, 0xad, 0xe5, 0x1f, 0x8a, 0x30, 0xc2,
	0x65, 0xd1, 0x15, 0x18, 0x5b, 0x77, 0x42, 0xbc, 0x16, 0x91, 0xb6, 0x74, 0x75, 0x3e, 0x89, 0xed,
	0x53, 0xb2, 0x3b, 0x25, 0x47, 0x9b, 0xc4, 0x8c, 0xf8, 0x31, 0x69, 0xa3, 0x77, 0x60, 0xe2, 0x11,
	0x76, 0x9b, 0x2d, 0x1a, 0xae, 0x05, 0x0e, 0x6d, 0xc9, 0x7c, 0x9d, 0x49, 0x62, 0x7b, 0x5e, 0x68,
	0xab, 0x5c, 0x2d, 0x61, 0x92, 0xb1, 0xe2, 0xd0, 0x16, 0xba, 0x01, 0xd0, 0x24, 0x4e, 0xd0, 0x12,
	0x18, 0xc5, 0xee, 0xd1, 0x95, 0xf3, 0xb4, 0x3d, 0xc2, 0xc9, 0xa9, 0xbe, 0x1b, 0xae, 0x39, 0xa4,
	0xde, 0x72, 0x1f, 0x62, 0x73, 0x98, 0x57, 0xa9, 0xa2, 0x9f, 0xf3, 0x34, 0x7d, 0x37, 0xbc, 0x29,
	0xa8, 0x6c, 0xf2, 0xa5, 0x7e, 0xd6, 0x5b, 0xb8, 0xbe, 0x19, 0x46, 0x1d, 0xb9, 0x0f, 0x95, 0xc9,
	0xd7, 0x2d, 0xa1, 0x4d, 0x3e, 0xc9, 0xbc, 0x25, 0x79, 0xe8, 0x2e, 0x4c, 0x09, 0xaf, 0x33, 0xbc,
	0x51, 0x8e, 0x77, 0x36, 0x89, 0x6d, 0x5b, 0x7d, 0x55, 0x3f, 0xb4, 0x49, 0xce, 0x4a, 0xb1, 0xde,
	0xd4, 0xa9, 0x55, 0xbe, 0x0e, 0xd3, 0x5d, 0x73, 0xa2, 0x8f, 0xa1, 0x63, 0xaa, 0xa1, 0x92, 0xa2,
	0x5e, 0xf9, 0xd9, 0x80, 0x99, 0xec, 0x06, 0x5a, 0xc5, 0x5b, 0x11, 0x3b, 0xd3, 0xee, 0xc2, 0x54,
	0x66, 0x7d, 0x4d, 0x39, 0xd8, 0x94, 0x38, 0xe8, 0x7c, 0x2d, 0x0e, 0x19, 0xeb, 0x03, 0x76, 0xc3,
	0xdd, 0x87, 0xd9, 0x5c, 0x56, 0xbf, 0xe6, 0x94, 0x89, 0xdd, 0x23, 0xa2, 0x4d, 0xec, 0x8c, 0xfb,
	0x40, 0x30, 0xe5, 0x7d, 0xf9, 0xb5, 0x01, 0xe5, 0x9e, 0xfb, 0x2d, 0x5c, 0xc5, 0x61, 0xe0, 0xb3,
	0x7b, 0xa3, 0x01, 0xa5, 0x4e, 0x4a, 0x34, 0x0d, 0x3e, 0x4f, 0x0e, 0x75, 0x05, 0x66, 0x20, 0x5a,
	0x1d, 0x66, 0xd4, 0xf4, 0xd8, 0x1d, 0x81, 0x91, 0x9b, 0x4d, 0xec, 0xf1, 0x23, 0xb7, 0xe5, 0x87,
	0xb4, 0x77, 0x76, 0x32, 0xaa, 0x36, 0x3b, 0x19, 0x81, 0x89, 0x07, 0x3e, 0xa1, 0x32, 0x26, 0x8a,
	0x38, 0xa3, 0x6a, 0xe2, 0x8c, 0x80, 0xae, 0xc2, 0x18, 0x53, 0xe3, 0x59, 0x29, 0x76, 0x77, 0x7d,
	0xca, 0x51, 0xd5, 0x32, 0x71, 0x74, 0x1b, 0x26, 0x78, 0x47, 0x51, 0x5c, 0xa7, 0x11, 0x11, 0x2d,
	0xa7, 0xb5, 0xbd, 0xca, 0x55, 0x21, 0x34, 0x35, 0xbe, 0x59, 0x9c, 0x90, 0xfd, 0x32, 0x1b, 0xe9,
	0xd9, 0x2c, 0x9c, 0xae, 0x6f, 0x16, 0x4e, 0x62, 0x47, 0x63, 0x3d, 0x88, 0x5c, 0xaf, 0xe1, 0xcb,
	0x9e, 0x52, 0x8e, 0x46, 0xc9, 0xd0, 0x46, 0x95, 0xa4, 0x31, 0xbd, 0xa6, 0xd4, 0xeb, 0x39, 0x36,
	0x9b, 0x7d, 0xf4, 0x24, 0x0d, 0xb9, 0x00, 0x59, 0x7a, 0xd3, 0x83, 0x73, 0xf0, 0xec, 0x2b, 0x63,
	0x28, 0x47, 0xd1, 0x96, 0x47, 0x4e, 0x46, 0x18, 0xc6, 0x3a, 0x98, 0x3a, 0x1b, 0x0e, 0x75, 0xcc,
	0x12, 0x37, 0xb4, 0xdf, 0x05, 0xc1, 0xeb, 0xa3, 0x7a, 0x4f, 0x0a, 0x8b, 0x3d, 0xa5, 0x64, 0x2f,
	0x45, 0xd1, 0xb2, 0x97, 0x12, 0xcb, 0x6f, 0xc1, 0xa4, 0xa6, 0xf9, 0x3a, 0x6d, 0x2e, 0x6b, 0xd4,
	0x81, 0x51, 0xee, 0x42, 0x88, 0x3e, 0x84, 0x51, 0x87, 0x7f, 0x92, 0x8d, 0x31, 0x77, 0x90, 0xc7,
	0x6a, 0x86, 0x85, 0x96, 0x96, 0x61, 0x41, 0x92, 0x26, 0x7e, 0x29, 0xc0, 0x04, 0x5f, 0x4f, 0x7f,
	0x97, 0x59, 0xc2, 0xd6, 0x10, 0x3f, 0xd4, 0xd6, 0x94, 0x96, 0x52, 0xf2, 0x9f, 0xf3, 0xf4, 0xf6,
	0x67, 0x64, 0xee, 0xd4, 0x7b, 0x30, 0x29, 0x64, 0x52, 0x87, 0x44, 0x5b, 0x55, 0x92, 0xd8, 0xb6,
	0x54, 0x88, 0x3e, 0xce, 0x4c, 0x70, 0x8e, 0x3e, 0xd4, 0x1e, 0x1b, 0x70, 0x42, 0xbb, 0x05, 0xf2,
	0x81, 0xb6, 0xde, 0x3b, 0xd0, 0xfe, 0x31, 0xc8, 0x35, 0xf1, 0xda, 0xc3, 0xec, 0xf2, 0x93, 0x61,
	0x18, 0x5b, 0x95, 0xff, 0x3d, 0xa1, 0xef, 0x0c, 0x40, 0xbd, 0x63, 0x16, 0x9d, 0x7f, 0x55, 0x37,
	0xc9, 0x0a, 0x28, 0xff, 0x7b, 0xd0, 0xb6, 0xcb, 0x5e, 0x5a, 0x39, 0xf7, 0xf8, 0xb7, 0x3f, 0xbe,
	0x2d, 0xd8, 0x68, 0x7e, 0x29, 0xfd, 0x07, 0x6c, 0x29, 0x6f, 0xb8, 0xa5, 0xd4, 0x5b, 0xf4, 0x05,
	0x4c, 0x67, 0x20, 0xb2, 0xb0, 0x07, 0xf6, 0x6a, 0xfe, 0xa0, 0x8a, 0x0f, 0x2b, 0x15, 0xee, 0xc1,
	0x1c, 0x2a, 0xf7, 0xf5, 0x80, 0x97, 0x3c, 0xfa, 0xca, 0x80, 0x29, 0x3d, 0x55, 0xe8, 0xec, 0x41,
	0xf9, 0x48, 0x4d, 0x5f, 0x1a, 0x24, 0x69, 0x79, 0x30, 0xce, 0x70, 0x57, 0x4e, 0xa3, 0x53, 0xb9,
	0x2b, 0xbc, 0x6e, 0x94, 0x40, 0x6c, 0xc1, 0x38, 0x57, 0x96, 0x41, 0x18, 0xc8, 0x8b, 0x57, 0x04,
	0xc0, 0xe2, 0x56, 0x4d, 0x74, 0xa2, 0xc7, 0x2a, 0x7f, 0x7c, 0xed, 0xce, 0xf3, 0x1d, 0x6b, 0xe8,
	0xc5, 0x8e, 0x65, 0xbc, 0xdc, 0xb1, 0x8c, 0x3f, 0x77, 0x2c, 0xe3, 0xcb, 0x5d, 0xcb, 0xf8, 0x71,
	0xd7, 0x32, 0x7e, 0xda, 0xb5, 0x8c, 0xa7, 0xbb, 0x96, 0xf1, 0xeb, 0xae, 0x65, 0x3c, 0xdb, 0xb5,
	0x8c, 0x17, 0xbb, 0x96, 0xf1, 0xcd, 0x9e, 0x35, 0xf4, 0x74, 0xcf, 0x32, 0x9e, 0xed, 0x59, 0x43,
	0xcf, 0xf7, 0xac, 0xa1, 0x4f, 0xc6, 0x15, 0x8b, 0xeb, 0xa3, 0xfc, 0x9f, 0xc7, 0xe5, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x0e, 0x1e, 0x90, 0x47, 0xef, 0x14, 0x00, 0x00,
}

func (this *ErrorStatus) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *ContainerHardware) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *FrameworkManifest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *FrameworkRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *FrameworkManifestsResponse) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *Agent) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *Agents) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *ModelRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func (this *ModelManifestsResponse) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return RegistryDescription()
}
func RegistryDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 8214 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x5d, 0x70, 0x24, 0xd7,
		0x75, 0x1f, 0xbe, 0x3d, 0x1f, 0xc0, 0xcc, 0x19, 0x60, 0xd0, 0xb8, 0x00, 0x97, 0xb3, 0x20, 0x89,
		0x59, 0x0e, 0x49, 0xed, 0x72, 0xc9, 0xc5, 0xf2, 0xbf, 0x24, 0x97, 0xe4, 0xac, 0x49, 0xfe, 0x67,
		0x80, 0x59, 0x70, 0x56, 0xf8, 0x52, 0x03, 0xd0, 0x2e, 0x29, 0x27, 0x9d, 0x46, 0xcf, 0xc5, 0xa0,
		0x89, 0x99, 0xee, 0x66, 0x77, 0xcf, 0x2e, 0x40, 0xc7, 0x55, 0x14, 0x65, 0xcb, 0xa5, 0xd8, 0x4e,
		0x9c, 0xd8, 0x55, 0x96, 0x15, 0x49, 0x91, 0x94, 0x38, 0x72, 0xe4, 0x38, 0xb1, 0xe3, 0x58, 0xb1,
		0x14, 0x97, 0xa2, 0x3c, 0x38, 0x71, 0xf2, 0x90, 0x92, 0x2a, 0x2f, 0x4e, 0x52, 0x05, 0x4b, 0x2b,
		0x55, 0xd9, 0x71, 0x94, 0x58, 0x41, 0x58, 0x15, 0x57, 0xe9, 0x25, 0x75, 0xbf, 0x7a, 0x6e, 0xf7,
		0x0c, 0x30, 0x83, 0x25, 0x77, 0x55, 0xa9, 0xca, 0x13, 0xa6, 0xcf, 0x3d, 0xe7, 0x77, 0x4f, 0x9f,
		0x7b, 0xee, 0x39, 0xa7, 0xef, 0xbd, 0xdd, 0x80, 0x3f, 0x4c, 0xc3, 0x03, 0x4d, 0xc7, 0x69, 0xb6,
		0xf0, 0x25, 0xc3, 0xb5, 0x2e, 0xed, 0x04, 0x81, 0x3b, 0xe7, 0x7a, 0x4e, 0xe0, 0x20, 0x60, 0xe4,
		0x39, 0xc3, 0xb5, 0x4a, 0xfb, 0x90, 0x7a, 0x2d, 0x08, 0x5c, 0x74, 0x01, 0xd2, 0x5e, 0xa7, 0x85,
		0xfd, 0x82, 0x72, 0x36, 0x79, 0x3e, 0x77, 0x79, 0x7a, 0xae, 0xcb, 0x33, 0x47, 0x18, 0xb4, 0x4e,
		0x0b, 0x6b, 0x8c, 0x05, 0xd5, 0xa0, 0xb8, 0xdd, 0x69, 0xb5, 0xf6, 0xf5, 0x06, 0x36, 0x9d, 0x06,
		0xd6, 0x3d, 0xec, 0x63, 0xef, 0x16, 0x6e, 0xe8, 0x78, 0xcf, 0x35, 0x6c, 0xdf, 0x72, 0xec, 0x42,
		0xe2, 0xac, 0x72, 0x3e, 0xa3, 0x3d, 0x4c, 0xd9, 0x16, 0x28, 0x97, 0xc6, 0x99, 0x6a, 0x82, 0xa7,
		0xf4, 0x9f, 0x13, 0x90, 0x11, 0xd0, 0x68, 0x06, 0x32, 0x3e, 0x6e, 0x61, 0x33, 0x70, 0xbc, 0x82,
		0x72, 0x56, 0x39, 0x9f, 0xd5, 0xc2, 0x6b, 0x84, 0x20, 0xd9, 0xc4, 0x01, 0xc5, 0xcc, 0xbe, 0x76,
		0x4a, 0x23, 0x17, 0x84, 0xe6, 0x76, 0x82, 0x42, 0x52, 0xd0, 0xdc, 0x4e, 0x80, 0xa6, 0x21, 0xe5,
		0x3a, 0x7e, 0x50, 0x48, 0x71, 0x22, 0xbd, 0x42, 0x05, 0x18, 0x69, 0xe0, 0x16, 0x0e, 0x70, 0x21,
		0xcd, 0xe9, 0xfc, 0x1a, 0x9d, 0x86, 0xb4, 0x6b, 0x04, 0xe6, 0x4e, 0x61, 0x84, 0x37, 0xb0, 0x4b,
		0x84, 0x20, 0xb5, 0xe5, 0x34, 0xf6, 0x0b, 0xa3, 0x54, 0x0f, 0xfa, 0x1b, 0xbd, 0x00, 0x23, 0x66,
		0xc7, 0x0f, 0x9c, 0x76, 0x21, 0x73, 0x56, 0x39, 0x9f, 0xbb, 0xfc, 0x88, 0x6c, 0xa0, 0x79, 0xda,
		0x42, 0xee, 0x65, 0xcd, 0x08, 0x02, 0xec, 0xd9, 0xa4, 0x13, 0xc6, 0x8e, 0x6a, 0x30, 0x65, 0x34,
		0x1a, 0x56, 0x60, 0x39, 0xb6, 0xd1, 0xd2, 0xb7, 0x2c, 0xbb, 0x61, 0xd9, 0x4d, 0xbf, 0x90, 0x3b,
		0xc6, 0xcc, 0xa8, 0x2b, 0x50, 0xe5, 0xfc, 0xe8, 0x31, 0x18, 0xf7, 0xb0, 0xef, 0x3a, 0xb6, 0x8f,
		0x75, 0xaa, 0xdc, 0x18, 0x55, 0x6e, 0x4c, 0x10, 0xab, 0x4e, 0x63, 0xbf, 0x9a, 0x85, 0x51, 0x97,
		0x29, 0x50, 0xba, 0x0a, 0x93, 0x3d, 0x5a, 0x91, 0x1b, 0xdb, 0xb5, 0xec, 0x06, 0x37, 0x30, 0xfd,
		0x4d, 0x68, 0xae, 0x11, 0xec, 0x30, 0xeb, 0x6a, 0xf4, 0x77, 0xf5, 0x5d, 0xe5, 0x8f, 0xee, 0xcc,
		0x2a, 0xdf, 0xba, 0x33, 0xab, 0x7c, 0xe7, 0xce, 0xac, 0xf2, 0x4b, 0xdf, 0x9b, 0x3d, 0xf5, 0xad,
		0xef, 0xcd, 0x9e, 0xfa, 0xe3, 0xef, 0xcd, 0x9e, 0x82, 0xbc, 0xe9, 0xb4, 0x25, 0xa5, 0xab, 0x59,
		0x8a, 0x4f, 0xdc, 0x6a, 0x4d, 0x79, 0xa3, 0xc2, 0x1b, 0x9a, 0x4e, 0xcb, 0xb0, 0x9b, 0x73, 0x8e,
		0xd7, 0xbc, 0xd4, 0xc4, 0x36, 0x75, 0xba, 0x4b, 0xac, 0xc9, 0x70, 0x2d, 0x9f, 0xba, 0xa3, 0x61,
		0xdb, 0x4e, 0x60, 0x90, 0x9b, 0xf4, 0xaf, 0x4a, 0xbf, 0xff, 0x52, 0x51, 0xbe, 0x94, 0x48, 0x2d,
		0x56, 0xd6, 0xea, 0x5b, 0x23, 0x54, 0xee, 0x59, 0xf8, 0xce, 0x15, 0x38, 0xcb, 0xfd, 0x98, 0x52,
		0xb6, 0x3a, 0xdb, 0x97, 0x1a, 0xd8, 0x37, 0x3d, 0xcb, 0x0d, 0x1c, 0x8f, 0xbb, 0xf4, 0x04, 0xef,
		0x59, 0x70, 0x94, 0x96, 0x61, 0xf2, 0x9a, 0xd5, 0xc2, 0x0b, 0x21, 0xe3, 0x3a, 0x0e, 0xd0, 0x8b,
		0x90, 0xda, 0xb6, 0x5a, 0x98, 0xfb, 0xf8, 0xe3, 0x73, 0x31, 0xa1, 0xb9, 0xa8, 0x04, 0xbd, 0x2b,
		0x8d, 0x4a, 0x94, 0xbe, 0x9f, 0x82, 0xa9, 0x3e, 0xad, 0xc4, 0x7a, 0xb6, 0xd1, 0xc6, 0xc2, 0xa2,
		0xe4, 0x37, 0x2a, 0x90, 0x51, 0x30, 0x77, 0x8d, 0x26, 0xe6, 0x46, 0x15, 0x97, 0x68, 0x16, 0xa0,
		0x81, 0x5d, 0x6c, 0x37, 0xb0, 0x6d, 0xee, 0x17, 0x92, 0x67, 0x93, 0xe7, 0xb3, 0x9a, 0x44, 0x41,
		0x4f, 0xc1, 0xa4, 0xdb, 0xd9, 0x6a, 0x59, 0xa6, 0x2e, 0xb1, 0xc1, 0xd9, 0xe4, 0xf9, 0xb4, 0xa6,
		0xb2, 0x86, 0x85, 0x2e, 0xf3, 0x39, 0x98, 0xb8, 0x8d, 0x8d, 0x5d, 0x99, 0x35, 0x47, 0x59, 0xf3,
		0x84, 0x2c, 0x31, 0xce, 0xc3, 0x58, 0x1b, 0xfb, 0xbe, 0xd1, 0xc4, 0x7a, 0xb0, 0xef, 0xe2, 0x42,
		0x8a, 0xde, 0xfd, 0xd9, 0x9e, 0xbb, 0x8f, 0xdf, 0x79, 0x8e, 0x4b, 0x6d, 0xec, 0xbb, 0x18, 0x55,
		0x20, 0x8b, 0xed, 0x4e, 0x9b, 0x21, 0xa4, 0x8f, 0xb0, 0x5f, 0xcd, 0xee, 0xb4, 0xe3, 0x28, 0x19,
		0x22, 0xc6, 0x21, 0x46, 0x49, 0x08, 0xb0, 0x4c, 0x5c, 0x18, 0xa1, 0x00, 0xe7, 0x7a, 0x00, 0xd6,
		0x59, 0x7b, 0x1c, 0x43, 0xc8, 0xa1, 0x79, 0xc8, 0xe2, 0xbd, 0x00, 0xb3, 0x18, 0x33, 0x4a, 0x41,
		0x9e, 0xe8, 0x33, 0x8a, 0xb8, 0xd5, 0x88, 0x43, 0x74, 0xe5, 0xd0, 0x15, 0x18, 0x75, 0x5c, 0xea,
		0x6d, 0x7c, 0x2e, 0x3f, 0xdc, 0xd7, 0x11, 0x56, 0x19, 0x8f, 0x26, 0x98, 0x51, 0x1d, 0x54, 0xdf,
		0xe9, 0x78, 0x26, 0xd6, 0x69, 0xd4, 0xb3, 0xec, 0x6d, 0xa7, 0x90, 0xa5, 0x00, 0xc5, 0xde, 0x1b,
		0xa1, 0x8c, 0xf3, 0x4e, 0x03, 0xd7, 0xed, 0x6d, 0x47, 0xcb, 0xfb, 0x91, 0x6b, 0x74, 0x1a, 0x46,
		0xfc, 0x7d, 0x3b, 0x30, 0xf6, 0xf8, 0x34, 0xe6, 0x57, 0xa5, 0xff, 0x9d, 0x86, 0x89, 0x61, 0x5c,
		0xec, 0x2a, 0xa4, 0xb7, 0xc9, 0x5d, 0x16, 0x12, 0x27, 0xb1, 0x01, 0x93, 0x89, 0x1a, 0x71, 0xe4,
		0x2e, 0x8d, 0x58, 0x81, 0x9c, 0x8d, 0xfd, 0x00, 0x37, 0x98, 0x47, 0x24, 0x87, 0xf4, 0x29, 0x60,
		0x42, 0xbd, 0x2e, 0x95, 0xba, 0x2b, 0x97, 0xba, 0x09, 0x13, 0xa1, 0x4a, 0xba, 0x67, 0xd8, 0x4d,
		0xe1, 0x9b, 0x97, 0x06, 0x69, 0x32, 0x57, 0x13, 0x72, 0x1a, 0x11, 0xd3, 0xf2, 0x38, 0x72, 0x8d,
		0x16, 0x00, 0x1c, 0x1b, 0x3b, 0xdb, 0x24, 0xc7, 0xb5, 0x0a, 0x99, 0x23, 0xac, 0xb4, 0x4a, 0x58,
		0x7a, 0xac, 0xe4, 0x30, 0xaa, 0xd9, 0x42, 0x2f, 0x75, 0x5d, 0x6d, 0xf4, 0x08, 0x4f, 0x59, 0x66,
		0x93, 0xac, 0xc7, 0xdb, 0x36, 0x21, 0x1f, 0xe6, 0x55, 0x76, 0x67, 0x59, 0xaa, 0xc4, 0xdc, 0xc0,
		0x3b, 0x13, 0x99, 0x96, 0xdd, 0xd8, 0xb8, 0x27, 0x5f, 0xf2, 0x3c, 0xc2, 0x60, 0xa9, 0x5b, 0x01,
		0x8d, 0x42, 0x63, 0x82, 0xb8, 0x62, 0xb4, 0xf1, 0xcc, 0x8b, 0x90, 0x8f, 0x9a, 0x07, 0x4d, 0x43,
		0xda, 0x0f, 0x0c, 0x2f, 0xa0, 0x5e, 0x98, 0xd6, 0xd8, 0x05, 0x52, 0x21, 0x89, 0xed, 0x06, 0x8d,
		0x72, 0x69, 0x8d, 0xfc, 0x9c, 0x79, 0x01, 0xc6, 0x23, 0xdd, 0x0f, 0x2b, 0x58, 0xfa, 0xf4, 0x08,
		0x4c, 0xf7, 0xf3, 0xb9, 0xbe, 0xee, 0x7f, 0x1a, 0x46, 0xec, 0x4e, 0x7b, 0x0b, 0x7b, 0x34, 0xff,
		0xa7, 0x35, 0x7e, 0x85, 0x2a, 0x90, 0x6e, 0x19, 0x5b, 0xb8, 0x45, 0x2b, 0x80, 0xfc, 0xe5, 0xa7,
		0x86, 0xf2, 0xea, 0xb9, 0x25, 0x22, 0xa2, 0x31, 0x49, 0xf4, 0x0a, 0xa4, 0x78, 0x88, 0x23, 0x08,
		0x17, 0x86, 0x43, 0x20, 0xbe, 0xa8, 0x51, 0x39, 0xf4, 0x10, 0x64, 0xc9, 0x5f, 0x66, 0xdb, 0x11,
		0x56, 0xc8, 0x10, 0x02, 0xb1, 0x2b, 0x29, 0x72, 0xa8, 0x9b, 0x35, 0xb0, 0x48, 0x0d, 0xe1, 0x35,
		0x19, 0x98, 0x06, 0xde, 0x36, 0x3a, 0xad, 0x40, 0xbf, 0x65, 0xb4, 0x3a, 0x98, 0x57, 0x1f, 0x63,
		0x9c, 0xf8, 0x51, 0x42, 0x43, 0x45, 0xc8, 0x31, 0xaf, 0xb4, 0xec, 0x06, 0xde, 0xa3, 0xd1, 0x27,
		0xad, 0x31, 0x47, 0xad, 0x13, 0x0a, 0xe9, 0xfe, 0x4d, 0xdf, 0xb1, 0xc5, 0xd0, 0xd2, 0x2e, 0x08,
		0x81, 0x76, 0xff, 0x42, 0x3c, 0xf0, 0x3d, 0xd2, 0xff, 0xf6, 0xe2, 0xbe, 0x58, 0xfa, 0x6a, 0x02,
		0x52, 0x74, 0xbe, 0x4d, 0x40, 0x6e, 0xe3, 0xf5, 0xb5, 0x9a, 0xbe, 0xb0, 0xba, 0x59, 0x5d, 0xaa,
		0xa9, 0x0a, 0xca, 0x03, 0x50, 0xc2, 0xb5, 0xa5, 0xd5, 0xca, 0x86, 0x9a, 0x08, 0xaf, 0xeb, 0x2b,
		0x1b, 0x57, 0x9e, 0x53, 0x93, 0xa1, 0xc0, 0x26, 0x23, 0xa4, 0x64, 0x86, 0x67, 0x2f, 0xab, 0x69,
		0xa4, 0xc2, 0x18, 0x03, 0xa8, 0xdf, 0xac, 0x2d, 0x5c, 0x79, 0x4e, 0x1d, 0x89, 0x52, 0x9e, 0xbd,
		0xac, 0x8e, 0xa2, 0x71, 0xc8, 0x52, 0x4a, 0x75, 0x75, 0x75, 0x49, 0xcd, 0x84, 0x98, 0xeb, 0x1b,
		0x5a, 0x7d, 0x65, 0x51, 0xcd, 0x86, 0x98, 0x8b, 0xda, 0xea, 0xe6, 0x9a, 0x0a, 0x21, 0xc2, 0x72,
		0x6d, 0x7d, 0xbd, 0xb2, 0x58, 0x53, 0x73, 0x21, 0x47, 0xf5, 0xf5, 0x8d, 0xda, 0xba, 0x3a, 0x16,
		0x51, 0xeb, 0xd9, 0xcb, 0xea, 0x78, 0xd8, 0x45, 0x6d, 0x65, 0x73, 0x59, 0xcd, 0xa3, 0x49, 0x18,
		0x67, 0x5d, 0x08, 0x25, 0x26, 0x62, 0xa4, 0x2b, 0xcf, 0xa9, 0x6a, 0x57, 0x11, 0x86, 0x32, 0x19,
		0x21, 0x5c, 0x79, 0x4e, 0x45, 0xa5, 0x79, 0x48, 0x53, 0xef, 0x42, 0x08, 0xf2, 0x4b, 0x95, 0x6a,
		0x6d, 0x49, 0x5f, 0x5d, 0xdb, 0xa8, 0xaf, 0xae, 0x54, 0x96, 0x54, 0xa5, 0x4b, 0xd3, 0x6a, 0x1f,
		0xd9, 0xac, 0x6b, 0xb5, 0x05, 0x35, 0x21, 0xd3, 0xd6, 0x6a, 0x95, 0x8d, 0xda, 0x82, 0x9a, 0x2c,
		0x99, 0x30, 0xdd, 0x2f, 0xce, 0xf4, 0x9d, 0x19, 0xd2, 0x10, 0x27, 0x8e, 0x18, 0x62, 0x8a, 0xd5,
		0x33, 0xc4, 0x5f, 0x52, 0x60, 0xaa, 0x4f, 0xac, 0xed, 0xdb, 0xc9, 0xab, 0x90, 0x66, 0x2e, 0xca,
		0xb2, 0xcf, 0x93, 0x7d, 0x83, 0x36, 0x75, 0xd8, 0x9e, 0x0c, 0x44, 0xe5, 0xe4, 0x0c, 0x9c, 0x3c,
		0x22, 0x03, 0x13, 0x88, 0x1e, 0x25, 0x3f, 0xa1, 0x40, 0xe1, 0x28, 0xec, 0x01, 0x81, 0x22, 0x11,
		0x09, 0x14, 0x57, 0xe3, 0x0a, 0x3c, 0x7a, 0xf4, 0x3d, 0xf4, 0x68, 0xf1, 0x65, 0x05, 0x4e, 0xf7,
		0x2f, 0x54, 0xfa, 0xea, 0xf0, 0x0a, 0x8c, 0xb4, 0x71, 0xb0, 0xe3, 0x88, 0x64, 0xfd, 0xa1, 0x3e,
		0x29, 0x80, 0x34, 0xc7, 0x6d, 0xc5, 0xa5, 0xe4, 0x1c, 0x92, 0x3c, 0xaa, 0xda, 0x60, 0xda, 0xf4,
		0x68, 0xfa, 0xa9, 0x04, 0x3c, 0xd0, 0x17, 0xbc, 0xaf, 0xa2, 0x8f, 0x00, 0x58, 0xb6, 0xdb, 0x09,
		0x58, 0x42, 0x66, 0xf1, 0x29, 0x4b, 0x29, 0x74, 0xee, 0x93, 0xd8, 0xd3, 0x09, 0xc2, 0x76, 0xfa,
		0xe4, 0xa5, 0x01, 0x23, 0x51, 0x86, 0x17, 0xbb, 0x8a, 0xa6, 0xa8, 0xa2, 0xb3, 0x47, 0xdc, 0x69,
		0x4f, 0xae, 0x7b, 0x06, 0x54, 0xb3, 0x65, 0x61, 0x3b, 0xd0, 0xfd, 0xc0, 0xc3, 0x46, 0xdb, 0xb2,
		0x9b, 0x34, 0x00, 0x67, 0xca, 0xe9, 0x6d, 0xa3, 0xe5, 0x63, 0x6d, 0x82, 0x35, 0xaf, 0x8b, 0x56,
		0x22, 0x41, 0xb3, 0x8c, 0x27, 0x49, 0x8c, 0x44, 0x24, 0x58, 0x73, 0x28, 0x51, 0xfa, 0x2f, 0xa3,
		0x90, 0x93, 0xca, 0x3a, 0xf4, 0x28, 0x8c, 0xbd, 0x69, 0xdc, 0x32, 0x74, 0x51, 0xaa, 0x33, 0x4b,
		0xe4, 0x08, 0x6d, 0x8d, 0x97, 0xeb, 0xcf, 0xc0, 0x34, 0x65, 0x71, 0x3a, 0x01, 0xf6, 0x74, 0xb3,
		0x65, 0xf8, 0x3e, 0x35, 0x5a, 0x86, 0xb2, 0x22, 0xd2, 0xb6, 0x4a, 0x9a, 0xe6, 0x45, 0x0b, 0x7a,
		0x1e, 0xa6, 0xa8, 0x44, 0xbb, 0xd3, 0x0a, 0x2c, 0xb7, 0x85, 0x75, 0xf2, 0xf0, 0xe0, 0xd3, 0x40,
		0x1c, 0x6a, 0x36, 0x49, 0x38, 0x96, 0x39, 0x03, 0xd1, 0xc8, 0x47, 0x0b, 0xf0, 0x08, 0x15, 0x6b,
		0x62, 0x1b, 0x7b, 0x46, 0x80, 0x75, 0xfc, 0x56, 0xc7, 0x68, 0xf9, 0xba, 0x61, 0x37, 0xf4, 0x1d,
		0xc3, 0xdf, 0x29, 0x4c, 0x13, 0x80, 0x6a, 0xa2, 0xa0, 0x68, 0x67, 0x08, 0xe3, 0x22, 0xe7, 0xab,
		0x51, 0xb6, 0x8a, 0xdd, 0x78, 0xcd, 0xf0, 0x77, 0x50, 0x19, 0x4e, 0x53, 0x14, 0x3f, 0xf0, 0x2c,
		0xbb, 0xa9, 0x9b, 0x3b, 0xd8, 0xdc, 0xd5, 0x3b, 0xc1, 0xf6, 0x8b, 0x85, 0x87, 0xe4, 0xfe, 0xa9,
		0x86, 0xeb, 0x94, 0x67, 0x9e, 0xb0, 0x6c, 0x06, 0xdb, 0x2f, 0xa2, 0x75, 0x18, 0x23, 0x83, 0xd1,
		0xb6, 0xde, 0xc6, 0xfa, 0xb6, 0xe3, 0xd1, 0xcc, 0x92, 0xef, 0x33, 0xb3, 0x25, 0x0b, 0xce, 0xad,
		0x72, 0x81, 0x65, 0xa7, 0x81, 0xcb, 0xe9, 0xf5, 0xb5, 0x5a, 0x6d, 0x41, 0xcb, 0x09, 0x94, 0x6b,
		0x8e, 0x47, 0x1c, 0xaa, 0xe9, 0x84, 0x06, 0xce, 0x31, 0x87, 0x6a, 0x3a, 0xc2, 0xbc, 0xcf, 0xc3,
		0x94, 0x69, 0xb2, 0x7b, 0xb6, 0x4c, 0x9d, 0x97, 0xf8, 0x7e, 0x41, 0x8d, 0x18, 0xcb, 0x34, 0x17,
		0x19, 0x03, 0xf7, 0x71, 0x1f, 0xbd, 0x04, 0x0f, 0x74, 0x8d, 0x25, 0x0b, 0x4e, 0xf6, 0xdc, 0x65,
		0x5c, 0xf4, 0x79, 0x98, 0x72, 0xf7, 0x7b, 0x05, 0x51, 0xa4, 0x47, 0x77, 0x3f, 0x2e, 0xf6, 0x04,
		0x7d, 0x6c, 0xf3, 0xb0, 0x69, 0x04, 0xb8, 0x51, 0x78, 0x50, 0xe6, 0x96, 0x1a, 0xd0, 0x25, 0x50,
		0x4d, 0x53, 0xc7, 0xb6, 0xb1, 0xd5, 0xc2, 0xba, 0xe1, 0x61, 0xdb, 0xf0, 0x0b, 0x45, 0x99, 0x39,
		0x6f, 0x9a, 0x35, 0xda, 0x5a, 0xa1, 0x8d, 0xe8, 0x02, 0x4c, 0x3a, 0x5b, 0x6f, 0x9a, 0xcc, 0xb3,
		0x74, 0xd7, 0xc3, 0xdb, 0xd6, 0x5e, 0xe1, 0x71, 0x6a, 0xa6, 0x09, 0xd2, 0x40, 0xfd, 0x6a, 0x8d,
		0x92, 0xd1, 0x93, 0xa0, 0x9a, 0xfe, 0x8e, 0xe1, 0xb9, 0x34, 0xb5, 0xfb, 0xae, 0x61, 0xe2, 0xc2,
		0x13, 0x8c, 0x95, 0xd1, 0x57, 0x04, 0x99, 0x78, 0xb6, 0x7f, 0xdb, 0xda, 0x0e, 0x04, 0xe2, 0x39,
		0xe6, 0xd9, 0x94, 0xc6, 0xd1, 0xce, 0x83, 0xea, 0xee, 0xb8, 0xd1, 0x8e, 0xcf, 0x53, 0xb6, 0xbc,
		0xbb, 0xe3, 0xca, 0xfd, 0xde, 0x84, 0xe9, 0x8e, 0x6d, 0xd9, 0x01, 0xf6, 0x5c, 0x0f, 0x93, 0x72,
		0x9f, 0xcd, 0xd9, 0xc2, 0x9f, 0x8e, 0x1e, 0x51, 0xb0, 0x6f, 0xca, 0xdc, 0xcc, 0x55, 0xb4, 0xa9,
		0x4e, 0x2f, 0xb1, 0x54, 0x86, 0x31, 0xd9, 0x83, 0x50, 0x16, 0x98, 0x0f, 0xa9, 0x0a, 0xc9, 0xc6,
		0xf3, 0xab, 0x0b, 0x24, 0x8f, 0xbe, 0x51, 0x53, 0x13, 0x24, 0x9f, 0x2f, 0xd5, 0x37, 0x6a, 0xba,
		0xb6, 0xb9, 0xb2, 0x51, 0x5f, 0xae, 0xa9, 0xc9, 0x0b, 0xd9, 0xcc, 0x9f, 0x8d, 0xaa, 0xef, 0xbc,
		0xf3, 0xce, 0x3b, 0x89, 0xeb, 0xa9, 0xcc, 0x87, 0xd4, 0x73, 0xa5, 0x6f, 0x27, 0x20, 0x1f, 0xad,
		0xa4, 0xd1, 0x4f, 0xc0, 0x83, 0xe2, 0xb1, 0xd7, 0xc7, 0x81, 0x7e, 0xdb, 0xf2, 0xa8, 0x6b, 0xb7,
		0x0d, 0x56, 0x8b, 0x86, 0xa3, 0x32, 0xcd, 0xb9, 0xd6, 0x71, 0x70, 0xc3, 0xf2, 0x88, 0xe3, 0xb6,
		0x8d, 0x00, 0x2d, 0x41, 0xd1, 0x76, 0x74, 0x3f, 0x30, 0xec, 0x86, 0xe1, 0x35, 0xf4, 0xee, 0x82,
		0x83, 0x6e, 0x98, 0x26, 0xf6, 0x7d, 0x87, 0xa5, 0x94, 0x10, 0xe5, 0x61, 0xdb, 0x59, 0xe7, 0xcc,
		0xdd, 0x58, 0x5b, 0xe1, 0xac, 0x31, 0x0f, 0x4a, 0x1e, 0xe5, 0x41, 0x0f, 0x41, 0xb6, 0x6d, 0xb8,
		0x3a, 0xb6, 0x03, 0x8f, 0xad, 0x3e, 0x65, 0xb4, 0x4c, 0xdb, 0x70, 0x6b, 0xe4, 0xfa, 0xde, 0x8d,
		0x44, 0xd4, 0x9a, 0x19, 0x35, 0x7b, 0x3d, 0x95, 0xc9, 0xaa, 0x50, 0xba, 0x93, 0x84, 0x31, 0xb9,
		0x1e, 0x24, 0xe5, 0xb5, 0x49, 0x63, 0xbf, 0x42, 0xa3, 0xc3, 0x63, 0xc7, 0x56, 0x8f, 0x73, 0xf3,
		0x24, 0x29, 0x94, 0x47, 0x58, 0x95, 0xa6, 0x31, 0x49, 0x92, 0x90, 0x49, 0x3c, 0xc0, 0x0d, 0xbe,
		0x42, 0xc8, 0xaf, 0xd0, 0x22, 0x8c, 0xbc, 0xe9, 0x53, 0xec, 0x11, 0x8a, 0xfd, 0xf8, 0xf1, 0xd8,
		0xd7, 0xd7, 0x29, 0x78, 0xf6, 0xfa, 0xba, 0xbe, 0xb2, 0xaa, 0x2d, 0x57, 0x96, 0x34, 0x2e, 0x8e,
		0xce, 0x40, 0xaa, 0x65, 0xbc, 0xbd, 0x1f, 0x4d, 0x1f, 0x94, 0x34, 0xec, 0x20, 0x9c, 0x81, 0xd4,
		0x6d, 0x6c, 0xec, 0x46, 0x83, 0x36, 0x25, 0xdd, 0xc3, 0xc9, 0x70, 0x09, 0xd2, 0xd4, 0x5e, 0x08,
		0x80, 0x5b, 0x4c, 0x3d, 0x85, 0x32, 0x90, 0x9a, 0x5f, 0xd5, 0xc8, 0x84, 0x50, 0x61, 0x8c, 0x51,
		0xf5, 0xb5, 0x7a, 0x6d, 0xbe, 0xa6, 0x26, 0x4a, 0xcf, 0xc3, 0x08, 0x33, 0x02, 0x99, 0x2c, 0xa1,
		0x19, 0xd4, 0x53, 0xfc, 0x92, 0x63, 0x28, 0xa2, 0x75, 0x73, 0xb9, 0x5a, 0xd3, 0xd4, 0x44, 0x74,
		0xa8, 0x53, 0x6a, 0xba, 0xe4, 0xc3, 0x98, 0x5c, 0x10, 0xde, 0x17, 0x2f, 0x2b, 0x7d, 0x53, 0x81,
		0x9c, 0x54, 0xe0, 0x91, 0xd2, 0xc2, 0x68, 0xb5, 0x9c, 0xdb, 0xba, 0xd1, 0xb2, 0x0c, 0x9f, 0xbb,
		0x06, 0x50, 0x52, 0x85, 0x50, 0x86, 0x1d, 0xba, 0xfb, 0x34, 0x45, 0xd2, 0xea, 0x48, 0xe9, 0xf3,
		0x0a, 0xa8, 0xf1, 0x12, 0x31, 0xa6, 0xa6, 0xf2, 0xe3, 0x54, 0xb3, 0xf4, 0x59, 0x05, 0xf2, 0xd1,
		0xba, 0x30, 0xa6, 0xde, 0xa3, 0x3f, 0x56, 0xf5, 0xbe, 0x93, 0x80, 0xf1, 0x48, 0x35, 0x38, 0xac,
		0x76, 0x6f, 0xc1, 0xa4, 0xd5, 0xc0, 0x6d, 0xd7, 0x09, 0xb0, 0x6d, 0xee, 0xeb, 0x2d, 0x7c, 0x0b,
		0xb7, 0x0a, 0x25, 0x1a, 0x34, 0x2e, 0x1d, 0x5f, 0x6f, 0xce, 0xd5, 0xbb, 0x72, 0x4b, 0x44, 0xac,
		0x3c, 0x55, 0x5f, 0xa8, 0x2d, 0xaf, 0xad, 0x6e, 0xd4, 0x56, 0xe6, 0x5f, 0xd7, 0x37, 0x57, 0x3e,
		0xbc, 0xb2, 0x7a, 0x63, 0x45, 0x53, 0xad, 0x18, 0xdb, 0x3d, 0x9c, 0xf6, 0x6b, 0xa0, 0xc6, 0x95,
		0x42, 0x0f, 0x42, 0x3f, 0xb5, 0xd4, 0x53, 0x68, 0x0a, 0x26, 0x56, 0x56, 0xf5, 0xf5, 0xfa, 0x42,
		0x4d, 0xaf, 0x5d, 0xbb, 0x56, 0x9b, 0xdf, 0x58, 0x67, 0x0f, 0xe0, 0x21, 0xf7, 0x46, 0x64, 0x82,
		0x97, 0x3e, 0x93, 0x84, 0xa9, 0x3e, 0x9a, 0xa0, 0x0a, 0xaf, 0xfd, 0xd9, 0xe3, 0xc8, 0xc5, 0x61,
		0xb4, 0x9f, 0x23, 0xd5, 0xc5, 0x9a, 0xe1, 0x05, 0xfc, 0x51, 0xe1, 0x49, 0x20, 0x56, 0xb2, 0x03,
		0x6b, 0xdb, 0xc2, 0x1e, 0x5f, 0xaf, 0x60, 0x0f, 0x04, 0x13, 0x5d, 0x3a, 0x5b, 0xb2, 0x78, 0x1a,
		0x90, 0xeb, 0xf8, 0x56, 0x60, 0xdd, 0xc2, 0xba, 0x65, 0x8b, 0xc5, 0x0d, 0xf2, 0x80, 0x90, 0xd2,
		0x54, 0xd1, 0x52, 0xb7, 0x83, 0x90, 0xdb, 0xc6, 0x4d, 0x23, 0xc6, 0x4d, 0x82, 0x79, 0x52, 0x53,
		0x45, 0x4b, 0xc8, 0xfd, 0x28, 0x8c, 0x35, 0x9c, 0x0e, 0x29, 0xb7, 0x18, 0x1f, 0xc9, 0x1d, 0x8a,
		0x96, 0x63, 0xb4, 0x90, 0x85, 0xd7, 0xc3, 0xdd, 0x55, 0x95, 0x31, 0x2d, 0xc7, 0x68, 0x8c, 0xe5,
		0x1c, 0x4c, 0x18, 0xcd, 0xa6, 0x47, 0xc0, 0x05, 0x10, 0xab, 0xf0, 0xf3, 0x21, 0x99, 0x32, 0xce,
		0x5c, 0x87, 0x8c, 0xb0, 0x03, 0x49, 0xd5, 0xc4, 0x12, 0xba, 0xcb, 0xd6, 0xb6, 0x12, 0xe7, 0xb3,
		0x5a, 0xc6, 0x16, 0x8d, 0x8f, 0xc2, 0x98, 0xe5, 0xeb, 0xdd, 0x45, 0xd6, 0xc4, 0xd9, 0xc4, 0xf9,
		0x8c, 0x96, 0xb3, 0xfc, 0x70, 0x55, 0xad, 0xf4, 0xe5, 0x04, 0xe4, 0xa3, 0x8b, 0xc4, 0x68, 0x01,
		0x32, 0x2d, 0xc7, 0xa4, 0xfb, 0x20, 0x7c, 0x87, 0xe2, 0xfc, 0x80, 0x75, 0xe5, 0xb9, 0x25, 0xce,
		0xaf, 0x85, 0x92, 0x33, 0xff, 0x41, 0x81, 0x8c, 0x20, 0xa3, 0xd3, 0x7c, 0x73, 0x87, 0xc0, 0xa5,
		0xab, 0x09, 0x55, 0x61, 0x1b, 0x3c, 0x84, 0xee, 0xbb, 0x86, 0x4d, 0x5d, 0x80, 0xd3, 0xc9, 0x35,
		0x19, 0xd7, 0x16, 0x36, 0x1a, 0xf4, 0xf1, 0xc1, 0x69, 0xb7, 0xb1, 0x1d, 0xf8, 0x62, 0x5c, 0x39,
		0x7d, 0x9e, 0x93, 0xd1, 0x53, 0x30, 0x19, 0x78, 0x86, 0xd5, 0x8a, 0xf0, 0xd2, 0x9d, 0x37, 0x4d,
		0x15, 0x0d, 0x21, 0x73, 0x19, 0xce, 0x08, 0xdc, 0x06, 0x0e, 0x0c, 0x73, 0x07, 0x37, 0xba, 0x42,
		0x23, 0x74, 0x05, 0xf2, 0x41, 0xce, 0xb0, 0xc0, 0xdb, 0x85, 0x6c, 0xe9, 0xdb, 0x0a, 0x4c, 0x8a,
		0x07, 0x9e, 0x46, 0x68, 0xac, 0x65, 0x80, 0xee, 0xb6, 0x11, 0x37, 0x57, 0xaf, 0x2b, 0xf7, 0xc8,
		0xcd, 0x55, 0x42, 0x21, 0x4d, 0x02, 0x98, 0x69, 0x03, 0x74, 0x5b, 0x8e, 0x34, 0x5b, 0x11, 0x72,
		0x7c, 0x07, 0x80, 0x6e, 0x23, 0xb1, 0x47, 0x64, 0x60, 0x24, 0xf2, 0x64, 0x84, 0xa6, 0x21, 0xbd,
		0x85, 0x9b, 0x96, 0xcd, 0xd7, 0x25, 0xd9, 0x85, 0x58, 0xed, 0x4c, 0x85, 0xab, 0x9d, 0xd5, 0x5f,
		0x50, 0x60, 0x4a, 0xda, 0x48, 0x13, 0xfa, 0x56, 0xd5, 0xd8, 0x73, 0xba, 0xff, 0x9a, 0xf2, 0xc6,
		0x2b, 0x4d, 0x2b, 0xd8, 0xe9, 0x6c, 0xcd, 0x99, 0x4e, 0xfb, 0x12, 0xdb, 0x58, 0xeb, 0xee, 0x83,
		0xd1, 0x1f, 0xe6, 0xc5, 0x26, 0xb6, 0x2f, 0x36, 0x1d, 0x69, 0x57, 0xec, 0x6a, 0xf7, 0xe7, 0x97,
		0x12, 0xc9, 0xc5, 0xb5, 0xea, 0x57, 0x12, 0x33, 0x8b, 0xac, 0xaf, 0x35, 0x61, 0x1b, 0x0d, 0x6f,
		0xb7, 0xb0, 0x49, 0xee, 0x17, 0xfe, 0x75, 0x02, 0x1e, 0x96, 0xb6, 0x8a, 0xa5, 0xfd, 0xb8, 0xde,
		0x1d, 0xe3, 0x99, 0xfe, 0x9b, 0xca, 0x33, 0x03, 0xf7, 0xe8, 0xca, 0x1f, 0x86, 0x14, 0xe1, 0x47,
		0x03, 0x96, 0x05, 0x0a, 0xbf, 0xfd, 0xef, 0xff, 0xa0, 0x44, 0xd7, 0x0f, 0xfa, 0xef, 0x8e, 0x52,
		0x90, 0xea, 0x27, 0x87, 0xdf, 0xa2, 0x54, 0xbb, 0x23, 0xeb, 0x7f, 0x70, 0x3b, 0x95, 0xf1, 0x6d,
		0xca, 0x6f, 0x3c, 0x05, 0x17, 0x23, 0x23, 0xd5, 0x74, 0xba, 0xb6, 0x20, 0x57, 0x02, 0xbc, 0xe9,
		0x70, 0xa3, 0x66, 0x43, 0xea, 0x10, 0xc6, 0x5b, 0x81, 0x29, 0xce, 0xac, 0xd3, 0x4d, 0x13, 0xf6,
		0xd0, 0x86, 0x8e, 0x5d, 0x38, 0x2b, 0xfc, 0xce, 0xf7, 0x69, 0xa9, 0xa4, 0x4d, 0x72, 0x51, 0xd2,
		0xc6, 0x9e, 0xeb, 0xca, 0x1a, 0x3c, 0x10, 0xc1, 0x63, 0x01, 0x11, 0x7b, 0x03, 0x10, 0xff, 0x90,
		0x23, 0x4e, 0x49, 0x88, 0xeb, 0x5c, 0xb4, 0x3c, 0x0f, 0xe3, 0x27, 0xc1, 0xfa, 0x37, 0x1c, 0x6b,
		0x0c, 0xcb, 0x20, 0x8b, 0x30, 0x41, 0x41, 0xd8, 0xf6, 0x39, 0xcd, 0x36, 0xc7, 0xc3, 0xfc, 0xdb,
		0xef, 0xb3, 0x08, 0x95, 0x27, 0x62, 0xf3, 0xa1, 0x54, 0xb9, 0x0c, 0x74, 0x9f, 0xa8, 0x81, 0xcd,
		0xd6, 0x00, 0x84, 0x3f, 0xe2, 0x8a, 0x84, 0xfc, 0xe5, 0x8f, 0xc2, 0x34, 0xf9, 0x4d, 0x93, 0x81,
		0xac, 0xc9, 0xe0, 0x65, 0xc2, 0xc2, 0xb7, 0x3f, 0xc1, 0x82, 0xe0, 0x54, 0x08, 0x20, 0xe9, 0x24,
		0x8d, 0x62, 0x13, 0x07, 0x01, 0xf6, 0x7c, 0xdd, 0x68, 0xf5, 0x53, 0x4f, 0x5a, 0x67, 0x29, 0xfc,
		0xda, 0x0f, 0xa2, 0xa3, 0xb8, 0xc8, 0x24, 0x2b, 0xad, 0x56, 0x79, 0x13, 0x1e, 0xec, 0xe3, 0x15,
		0x43, 0x60, 0x7e, 0x86, 0x63, 0x4e, 0xf7, 0x78, 0x06, 0x81, 0x5d, 0x03, 0x41, 0x0f, 0xc7, 0x72,
		0x08, 0xcc, 0xbf, 0xcb, 0x31, 0x11, 0x97, 0x15, 0x43, 0x4a, 0x10, 0xaf, 0xc3, 0xe4, 0x2d, 0xec,
		0x6d, 0x39, 0x3e, 0x5f, 0xdb, 0x1a, 0x02, 0xee, 0xb3, 0x1c, 0x6e, 0x82, 0x0b, 0xd2, 0xc5, 0x2e,
		0x82, 0xf5, 0x12, 0x64, 0xb6, 0x0d, 0x13, 0x0f, 0x01, 0xf1, 0x39, 0x0e, 0x31, 0x4a, 0xf8, 0x89,
		0x68, 0x05, 0xc6, 0x9a, 0x0e, 0xaf, 0x07, 0x06, 0x8b, 0x7f, 0x9e, 0x8b, 0xe7, 0x84, 0x0c, 0x87,
		0x70, 0x1d, 0xb7, 0xd3, 0x22, 0xc5, 0xc2, 0x60, 0x88, 0xbf, 0x27, 0x20, 0x84, 0x0c, 0x87, 0x38,
		0x81, 0x59, 0xbf, 0x20, 0x20, 0x7c, 0xc9, 0x9e, 0xaf, 0x42, 0xce, 0xb1, 0x5b, 0xfb, 0x8e, 0x3d,
		0x8c, 0x12, 0x5f, 0xe4, 0x08, 0xc0, 0x45, 0x08, 0xc0, 0x55, 0xc8, 0x0e, 0x3b, 0x10, 0xbf, 0xfe,
		0x03, 0x31, 0x3d, 0xc4, 0x08, 0x2c, 0xc2, 0x84, 0x08, 0x50, 0x96, 0x63, 0x0f, 0x01, 0xf1, 0x0f,
		0x39, 0x44, 0x5e, 0x12, 0xe3, 0xb7, 0x11, 0x60, 0x3f, 0x68, 0xe2, 0x61, 0x40, 0xbe, 0x2c, 0x6e,
		0x83, 0x8b, 0x70, 0x53, 0x6e, 0x61, 0xdb, 0xdc, 0x19, 0x0e, 0xe1, 0x37, 0x84, 0x29, 0x85, 0x0c,
		0x81, 0x98, 0x87, 0xf1, 0xb6, 0xe1, 0xf9, 0x3b, 0x46, 0x6b, 0xa8, 0xe1, 0xf8, 0x47, 0x1c, 0x63,
		0x2c, 0x14, 0xe2, 0x16, 0xe9, 0xd8, 0x27, 0x81, 0xf9, 0x8a, 0xb0, 0x88, 0x24, 0xc6, 0xa7, 0x9e,
		0x1f, 0xd0, 0x15, 0xc4, 0x93, 0xa0, 0xfd, 0xa6, 0x98, 0x7a, 0x4c, 0x76, 0x59, 0x46, 0xbc, 0x0a,
		0x59, 0xdf, 0x7a, 0x7b, 0x28, 0x98, 0x7f, 0x2c, 0x46, 0x9a, 0x0a, 0x10, 0xe1, 0xd7, 0xe1, 0x4c,
		0xdf, 0x34, 0x31, 0x04, 0xd8, 0x6f, 0x71, 0xb0, 0xd3, 0x7d, 0x52, 0x05, 0x0f, 0x09, 0x27, 0x85,
		0xfc, 0x27, 0x22, 0x24, 0xe0, 0x18, 0xd6, 0x1a, 0x79, 0x42, 0xf3, 0x8d, 0xed, 0x93, 0x59, 0xed,
		0x9f, 0x0a, 0xab, 0x31, 0xd9, 0x88, 0xd5, 0x36, 0xe0, 0x34, 0x47, 0x3c, 0xd9, 0xb8, 0xfe, 0xb6,
		0x08, 0xac, 0x4c, 0x7a, 0x33, 0x3a, 0xba, 0x1f, 0x83, 0x99, 0xd0, 0x9c, 0xe2, 0x51, 0xc0, 0xd7,
		0xdb, 0x86, 0x3b, 0x04, 0xf2, 0xef, 0x70, 0x64, 0x11, 0xf1, 0xc3, 0x67, 0x09, 0x7f, 0xd9, 0x70,
		0x09, 0xf8, 0x4d, 0x28, 0x08, 0xf0, 0x8e, 0xed, 0x61, 0xd3, 0x69, 0xda, 0xd6, 0xdb, 0xb8, 0x31,
		0x04, 0xf4, 0x3f, 0x8b, 0x0d, 0xd5, 0xa6, 0x24, 0x4e, 0x90, 0xeb, 0xa0, 0x86, 0xb5, 0x8a, 0x6e,
		0xb5, 0x5d, 0xc7, 0x0b, 0x06, 0x20, 0xfe, 0xae, 0x18, 0xa9, 0x50, 0xae, 0x4e, 0xc5, 0xca, 0x35,
		0xc8, 0xd3, 0xcb, 0x61, 0x5d, 0xf2, 0x9f, 0x73, 0xa0, 0xf1, 0xae, 0x14, 0x0f, 0x1c, 0xa6, 0xd3,
		0x76, 0x0d, 0x6f, 0x98, 0xf8, 0xf7, 0x7b, 0x22, 0x70, 0x70, 0x11, 0x1e, 0x38, 0x82, 0x7d, 0x17,
		0x93, 0x6c, 0x3f, 0x04, 0xc2, 0x57, 0x45, 0xe0, 0x10, 0x32, 0x1c, 0x42, 0x14, 0x0c, 0x43, 0x40,
		0xfc, 0x0b, 0x01, 0x21, 0x64, 0x08, 0xc4, 0x47, 0xba, 0x89, 0xd6, 0xc3, 0x4d, 0xcb, 0x0f, 0x3c,
		0xf6, 0x00, 0x72, 0x3c, 0xd4, 0xef, 0xff, 0x20, 0x5a, 0x84, 0x69, 0x92, 0x28, 0x89, 0x44, 0x7c,
		0x41, 0x9b, 0x3e, 0x9f, 0x0e, 0x56, 0xec, 0x6b, 0x22, 0x12, 0x49, 0x62, 0x44, 0x37, 0xa9, 0x42,
		0x24, 0x66, 0x37, 0xc9, 0x53, 0xd9, 0x10, 0x70, 0x5f, 0x8f, 0x29, 0xb7, 0x2e, 0x64, 0x09, 0xa6,
		0x54, 0xff, 0x74, 0xec, 0x5d, 0xbc, 0x3f, 0x94, 0x77, 0xfe, 0xcb, 0x58, 0xfd, 0xb3, 0xc9, 0x24,
		0x59, 0x0c, 0x99, 0x88, 0xd5, 0x53, 0x68, 0xd0, 0x09, 0x9b, 0xc2, 0xc7, 0xdf, 0xe3, 0xf7, 0x1b,
		0x2d, 0xa7, 0xca, 0x4b, 0xc4, 0xc9, 0xa3, 0x45, 0xcf, 0x60, 0xb0, 0x4f, 0xbc, 0x17, 0xfa, 0x79,
		0xa4, 0xe6, 0x29, 0x5f, 0x83, 0xf1, 0x48, 0xc1, 0x33, 0x18, 0xea, 0x67, 0x38, 0xd4, 0x98, 0x5c,
		0xef, 0x94, 0x9f, 0x87, 0x14, 0x29, 0x5e, 0x06, 0x8b, 0xff, 0x2c, 0x17, 0xa7, 0xec, 0xe5, 0x97,
		0x21, 0x23, 0x8a, 0x96, 0xc1, 0xa2, 0x9f, 0xe4, 0xa2, 0xa1, 0x08, 0x11, 0x17, 0x05, 0xcb, 0x60,
		0xf1, 0x9f, 0x13, 0xe2, 0x42, 0x84, 0x88, 0x0f, 0x6f, 0xc2, 0x6f, 0xfe, 0x7c, 0x8a, 0x27, 0x1d,
		0x61, 0xbb, 0xab, 0x30, 0xca, 0x2b, 0x95, 0xc1, 0xd2, 0x9f, 0xe2, 0x9d, 0x0b, 0x89, 0xf2, 0x0b,
		0x90, 0x1e, 0xd2, 0xe0, 0xbf, 0xc8, 0x45, 0x19, 0x7f, 0x79, 0x1e, 0x72, 0x52, 0x75, 0x32, 0x58,
		0xfc, 0x6f, 0x72, 0x71, 0x59, 0x8a, 0xa8, 0xce, 0xab, 0x93, 0xc1, 0x00, 0x7f, 0x4b, 0xa8, 0xce,
		0x25, 0x88, 0xd9, 0x44, 0x61, 0x32, 0x58, 0xfa, 0x97, 0x84, 0xd5, 0x85, 0x48, 0xf9, 0x55, 0xc8,
		0x86, 0xc9, 0x66, 0xb0, 0xfc, 0xdf, 0xe6, 0xf2, 0x5d, 0x19, 0x62, 0x01, 0x29, 0xd9, 0x0d, 0x86,
		0xf8, 0x3b, 0xc2, 0x02, 0x92, 0x14, 0x99, 0x46, 0xf1, 0x02, 0x66, 0x30, 0xd2, 0x2f, 0x8b, 0x69,
		0x14, 0xab, 0x5f, 0xc8, 0x68, 0xd2, 0x98, 0x3f, 0x18, 0xe2, 0x57, 0xc4, 0x68, 0x52, 0x7e, 0xa2,
		0x46, 0xbc, 0x22, 0x18, 0x8c, 0xf1, 0xab, 0x42, 0x8d, 0x58, 0x41, 0x50, 0x5e, 0x03, 0xd4, 0x5b,
		0x0d, 0x0c, 0xc6, 0xfb, 0x34, 0xc7, 0x9b, 0xec, 0x29, 0x06, 0xca, 0x37, 0xe0, 0x74, 0xff, 0x4a,
		0x60, 0x30, 0xea, 0xaf, 0xbd, 0x17, 0x7b, 0x76, 0x93, 0x0b, 0x81, 0xf2, 0x46, 0x37, 0xa5, 0xc8,
		0x55, 0xc0, 0x60, 0xd8, 0xcf, 0xbc, 0x17, 0x0d, 0xdc, 0x72, 0x11, 0x50, 0xae, 0x00, 0x74, 0x13,
		0xf0, 0x60, 0xac, 0xcf, 0x72, 0x2c, 0x49, 0x88, 0x4c, 0x0d, 0x9e, 0x7f, 0x07, 0xcb, 0x7f, 0x4e,
		0x4c, 0x0d, 0x2e, 0x41, 0xa6, 0x86, 0x48, 0xbd, 0x83, 0xa5, 0x3f, 0x2f, 0xa6, 0x86, 0x10, 0x21,
		0x9e, 0x2d, 0x65, 0xb7, 0xc1, 0x08, 0x5f, 0x14, 0x9e, 0x2d, 0x49, 0x95, 0x57, 0x60, 0xb2, 0x27,
		0x21, 0x0e, 0x86, 0xfa, 0x12, 0x87, 0x52, 0xe3, 0xf9, 0x50, 0x4e, 0x5e, 0x3c, 0x19, 0x0e, 0x46,
		0xfb, 0xfb, 0xb1, 0xe4, 0xc5, 0x73, 0x61, 0xf9, 0x2a, 0x64, 0xec, 0x4e, 0xab, 0x45, 0x26, 0x0f,
		0x3a, 0xfe, 0x54, 0x5f, 0xe1, 0xbf, 0xfe, 0x88, 0x5b, 0x47, 0x08, 0x94, 0x9f, 0x87, 0x34, 0x6e,
		0x6f, 0xe1, 0xc6, 0x20, 0xc9, 0x3f, 0xff, 0x91, 0x08, 0x98, 0x84, 0xbb, 0xfc, 0x2a, 0x00, 0x5b,
		0x1a, 0xa1, 0x1b, 0xaf, 0x03, 0x64, 0xff, 0xdb, 0x8f, 0xf8, 0x81, 0xa1, 0xae, 0x48, 0x17, 0x80,
		0x1d, 0x3f, 0x3a, 0x1e, 0xe0, 0x07, 0x51, 0x00, 0x3a, 0x22, 0x2f, 0xc1, 0xe8, 0x9b, 0xbe, 0x63,
		0x07, 0x46, 0x73, 0x90, 0xf4, 0x7f, 0xe7, 0xd2, 0x82, 0x9f, 0x18, 0xac, 0xed, 0x78, 0x38, 0x30,
		0x9a, 0xfe, 0x20, 0xd9, 0xff, 0xc1, 0x65, 0x43, 0x01, 0x22, 0x6c, 0x1a, 0x7e, 0x30, 0xcc, 0x7d,
		0xff, 0x85, 0x10, 0x16, 0x02, 0x44, 0x69, 0xf2, 0x7b, 0x17, 0xef, 0x0f, 0x92, 0xfd, 0xa1, 0x50,
		0x9a, 0xf3, 0x97, 0x5f, 0x86, 0x2c, 0xf9, 0xc9, 0x0e, 0xd1, 0x0d, 0x10, 0xfe, 0x9f, 0x5c, 0xb8,
		0x2b, 0x41, 0x7a, 0xf6, 0x83, 0x46, 0x60, 0x0d, 0x36, 0xf6, 0x21, 0x1f, 0x69, 0xc1, 0x5f, 0xae,
		0x40, 0xce, 0x0f, 0x1a, 0x8d, 0x0e, 0xaf, 0x4f, 0x07, 0x88, 0xff, 0xaf, 0x1f, 0x85, 0x4b, 0x16,
		0xa1, 0x0c, 0x19, 0xed, 0xdb, 0xbb, 0x81, 0xeb, 0xd0, 0xcd, 0xa5, 0x41, 0x08, 0xef, 0x71, 0x04,
		0x49, 0xa4, 0xfa, 0x57, 0x8e, 0x5c, 0xf1, 0xed, 0xbb, 0x96, 0x0e, 0x8b, 0xce, 0xa2, 0xc3, 0x56,
		0xd1, 0xdf, 0x28, 0x0d, 0x5e, 0x99, 0x85, 0xbf, 0x78, 0x12, 0xf2, 0xbc, 0x08, 0xdf, 0xe7, 0x2b,
		0xb4, 0x0f, 0x98, 0x86, 0xd7, 0x6e, 0xcd, 0x39, 0x5e, 0x73, 0xae, 0xd1, 0xda, 0xf6, 0x8c, 0x36,
		0xbe, 0xed, 0x78, 0xbb, 0x33, 0xc7, 0xae, 0x95, 0xcf, 0x9c, 0x6c, 0x15, 0xb8, 0x14, 0x40, 0xae,
		0xe6, 0x79, 0x8e, 0xb7, 0x1e, 0x18, 0x41, 0xc7, 0x47, 0xe7, 0x20, 0xe1, 0xec, 0xb2, 0xad, 0xe3,
		0xea, 0x83, 0x87, 0x07, 0xc5, 0xa9, 0x7d, 0xa3, 0xdd, 0x2a, 0x97, 0x9c, 0xdd, 0xa7, 0x9d, 0xb6,
		0x15, 0xe0, 0xb6, 0x1b, 0xec, 0x97, 0xb4, 0x84, 0xb3, 0x8b, 0xae, 0xc0, 0x28, 0x0f, 0x4e, 0x6c,
		0x1f, 0xa2, 0xfa, 0xf0, 0xe1, 0x41, 0xb1, 0xc0, 0xb8, 0x79, 0x83, 0x2c, 0x22, 0x98, 0xcb, 0xa9,
		0x1f, 0x7e, 0xa1, 0xa8, 0x94, 0xde, 0x82, 0xc9, 0x79, 0x32, 0x11, 0x2c, 0x1b, 0x7b, 0xaf, 0x19,
		0x5e, 0xe3, 0x36, 0x09, 0xcb, 0x17, 0x20, 0xd9, 0x74, 0x3b, 0xec, 0x24, 0x5c, 0xb5, 0x70, 0x78,
		0x50, 0x9c, 0x66, 0x70, 0x4d, 0xb7, 0x23, 0x43, 0x11, 0x26, 0xc2, 0x6b, 0xba, 0x1d, 0xde, 0xb5,
		0xc4, 0x6b, 0xc6, 0x78, 0x4d, 0xb7, 0xc3, 0xbb, 0xfc, 0x93, 0x04, 0x4c, 0x5e, 0x13, 0x36, 0x5c,
		0x36, 0x6c, 0x6b, 0x1b, 0xfb, 0x01, 0xba, 0x28, 0x1f, 0x44, 0xac, 0x9e, 0x39, 0x3c, 0x28, 0x3e,
		0xc0, 0x80, 0x08, 0x55, 0x46, 0x62, 0x1b, 0x8f, 0x57, 0x60, 0xf4, 0x16, 0xf6, 0xc2, 0x57, 0xcc,
		0x22, 0x77, 0xcd, 0x1b, 0x22, 0x77, 0xcd, 0x69, 0xa8, 0x03, 0x59, 0x53, 0xdc, 0x2f, 0x7f, 0x59,
		0xe1, 0x85, 0xb9, 0xbe, 0xa3, 0x3b, 0xd7, 0xa3, 0xe3, 0x5c, 0x68, 0x29, 0x7a, 0x10, 0xa7, 0x3a,
		0x7b, 0x78, 0x50, 0x9c, 0xe1, 0x77, 0x2b, 0x5a, 0xe4, 0x4e, 0xbb, 0x3d, 0xcd, 0x6c, 0x43, 0x3e,
		0x2a, 0x8c, 0x54, 0x48, 0xee, 0xe2, 0x7d, 0x7e, 0xda, 0x90, 0xfc, 0x44, 0xaf, 0x74, 0x4f, 0xd3,
		0x2a, 0x74, 0xcf, 0xaf, 0xbf, 0x5a, 0x3d, 0xc3, 0xc5, 0x0f, 0xd3, 0x96, 0x13, 0x2f, 0x2a, 0xdc,
		0xc2, 0x5f, 0x9c, 0x82, 0xf1, 0x65, 0xa7, 0x81, 0x5b, 0xf7, 0xdb, 0xba, 0xdb, 0x90, 0x0d, 0x15,
		0xe5, 0x87, 0x54, 0xcf, 0x0f, 0x6b, 0x5d, 0xd9, 0x9c, 0x21, 0x5b, 0xc4, 0x9c, 0x21, 0x15, 0xbd,
		0x25, 0x8f, 0x22, 0x7b, 0x63, 0xe4, 0xd9, 0x23, 0xfa, 0x89, 0xd8, 0xe1, 0xee, 0x47, 0x10, 0x55,
		0x23, 0x4f, 0x05, 0xec, 0x15, 0xc2, 0xea, 0xd9, 0xc3, 0x83, 0xe2, 0xc3, 0x4c, 0x5e, 0x6a, 0x94,
		0x11, 0x22, 0x8f, 0x12, 0x2f, 0x43, 0xd6, 0xc3, 0xdb, 0xd8, 0xc3, 0x36, 0x7f, 0xf5, 0x29, 0x5b,
		0x2d, 0x1e, 0x1e, 0x14, 0x1f, 0x62, 0x08, 0x61, 0x93, 0x1f, 0x51, 0x21, 0x24, 0x93, 0x51, 0x69,
		0x59, 0x26, 0xb6, 0x7d, 0xfe, 0x4e, 0x80, 0x3c, 0x2a, 0xbc, 0x21, 0x32, 0x2a, 0x9c, 0x86, 0xfe,
		0x2a, 0x8c, 0xd0, 0xd3, 0xbb, 0x3e, 0x7f, 0x7d, 0xe5, 0xc9, 0xa1, 0x4c, 0xb5, 0xb1, 0xef, 0xe2,
		0xea, 0x43, 0x87, 0x07, 0xc5, 0x07, 0x59, 0x0f, 0x0c, 0x42, 0xee, 0x80, 0xa3, 0x12, 0x7c, 0x76,
		0xfa, 0x97, 0xbf, 0x05, 0x75, 0x77, 0xf8, 0x0c, 0x22, 0x82, 0xcf, 0x48, 0x68, 0x1d, 0x26, 0xb7,
		0xf0, 0xb6, 0xe3, 0x61, 0xdd, 0xf5, 0xb0, 0xeb, 0x39, 0x26, 0xf6, 0xd9, 0x51, 0xda, 0x6c, 0xf5,
		0x43, 0x87, 0x07, 0xc5, 0x12, 0x93, 0xef, 0x61, 0x91, 0xa1, 0x54, 0xd6, 0xba, 0x16, 0x36, 0xa2,
		0x57, 0x49, 0x21, 0x1b, 0xa2, 0xd1, 0x33, 0xa9, 0xf2, 0x60, 0xf4, 0x87, 0x91, 0x44, 0xd0, 0x1a,
		0xa8, 0xc6, 0x76, 0x80, 0x3d, 0x59, 0x29, 0xfa, 0x12, 0x57, 0xf5, 0x89, 0xc3, 0x83, 0xe2, 0xa3,
		0x0c, 0x26, 0xce, 0x21, 0x83, 0x4d, 0xd0, 0x46, 0x49, 0xa5, 0x8f, 0x02, 0x12, 0x37, 0xe1, 0xf8,
		0x81, 0xc0, 0x1c, 0xa7, 0x98, 0xe7, 0x0e, 0x0f, 0x8a, 0x8f, 0x45, 0x6f, 0xb4, 0xcb, 0x23, 0xa3,
		0x72, 0x53, 0xad, 0x75, 0x5b, 0x89, 0xeb, 0xca, 0x80, 0xf9, 0xb8, 0xeb, 0x1e, 0x81, 0x24, 0x0b,
		0x91, 0x31, 0xe0, 0xf7, 0x22, 0x21, 0x4d, 0xc4, 0xc7, 0xa0, 0x87, 0x25, 0x32, 0x06, 0xec, 0x7e,
		0x25, 0xd0, 0x9f, 0x84, 0x74, 0x9b, 0xf8, 0x04, 0x3d, 0xea, 0x9b, 0xbb, 0x7c, 0x61, 0x28, 0xbf,
		0xa1, 0x57, 0xd5, 0x99, 0xc3, 0x83, 0xe2, 0x69, 0x9e, 0xe4, 0x08, 0x41, 0xee, 0x88, 0x81, 0xa2,
		0x0e, 0x80, 0x11, 0x04, 0x9e, 0xb5, 0xd5, 0x09, 0xe8, 0xa1, 0x60, 0xe2, 0xfa, 0xcf, 0x0d, 0xd5,
		0x45, 0x25, 0x14, 0x63, 0x61, 0x42, 0xf2, 0x8b, 0x2e, 0x62, 0xc4, 0x2f, 0xba, 0x64, 0xf4, 0x2c,
		0x8c, 0xec, 0x58, 0x8d, 0x06, 0xb6, 0xd9, 0x71, 0x62, 0xd9, 0xc5, 0x19, 0x3d, 0xe2, 0xe2, 0x8c,
		0x34, 0xf3, 0x85, 0x24, 0x7f, 0xb1, 0xe6, 0x22, 0x7f, 0xed, 0xa8, 0x27, 0x50, 0x13, 0x6a, 0x24,
		0x50, 0xd3, 0xa2, 0x33, 0x16, 0x95, 0x12, 0x77, 0x13, 0x95, 0xde, 0x06, 0x70, 0x0d, 0x62, 0x89,
		0x00, 0x7b, 0x3e, 0xcf, 0x89, 0x2f, 0x0d, 0x3d, 0x85, 0xe7, 0xd6, 0x42, 0xd9, 0x1e, 0x63, 0x75,
		0x61, 0xa3, 0x93, 0x28, 0x24, 0xcf, 0x3c, 0x0f, 0xd9, 0x50, 0x1e, 0x9d, 0x17, 0x09, 0x90, 0xdd,
		0x3c, 0x3a, 0x3c, 0x28, 0xe6, 0x19, 0xd0, 0xd3, 0x96, 0xdd, 0xb2, 0x6c, 0x5c, 0xe2, 0xa9, 0x6e,
		0xc6, 0x83, 0x89, 0x58, 0xb7, 0x7d, 0xf2, 0x69, 0x3d, 0x9a, 0x4f, 0x9f, 0xbd, 0x8b, 0x5b, 0x92,
		0x52, 0xeb, 0xcc, 0xaf, 0x27, 0x21, 0x4d, 0x79, 0xd1, 0x8b, 0x90, 0xd9, 0x32, 0x7c, 0xac, 0x77,
		0xbc, 0x16, 0x57, 0xf5, 0x91, 0xc3, 0x83, 0xe2, 0x19, 0x3e, 0x3b, 0x79, 0x4b, 0x24, 0x12, 0x13,
		0xe2, 0xa6, 0xd7, 0x42, 0x0b, 0x30, 0x76, 0x1b, 0x5b, 0xcd, 0x9d, 0xc0, 0xd7, 0xbb, 0xef, 0x5a,
		0x57, 0x1f, 0x3d, 0x3c, 0x28, 0x3e, 0xc2, 0xa4, 0xe5, 0xd6, 0xc8, 0x80, 0xf1, 0x86, 0x35, 0x23,
		0xd8, 0x41, 0xaf, 0x00, 0x34, 0x3d, 0xc3, 0xdd, 0x61, 0x18, 0xc9, 0x78, 0xe8, 0xea, 0xb6, 0x45,
		0xf2, 0x08, 0x25, 0x0b, 0x79, 0xcb, 0xd7, 0x0d, 0xcf, 0xdc, 0xb1, 0x6e, 0xb1, 0x13, 0x58, 0x19,
		0x59, 0xbe, 0xdb, 0x16, 0x91, 0xb7, 0xfc, 0x0a, 0xa3, 0x92, 0xc8, 0x27, 0xf4, 0xa4, 0xef, 0x16,
		0xf8, 0x9d, 0x36, 0xcf, 0x87, 0x52, 0xe4, 0x8b, 0x73, 0x44, 0x22, 0x1f, 0x6f, 0x9c, 0xe7, 0x6d,
		0xe8, 0x3a, 0xe4, 0x99, 0xd6, 0x21, 0x1e, 0x7d, 0x63, 0xae, 0xfa, 0xd8, 0xe1, 0x41, 0xb1, 0x28,
		0xdf, 0x55, 0x3f, 0xb4, 0x71, 0xda, 0x24, 0xb0, 0xee, 0x57, 0xa9, 0x35, 0xf3, 0x32, 0x4c, 0xc4,
		0xe2, 0x44, 0x9f, 0x8e, 0xa6, 0xe5, 0x8e, 0xb2, 0x92, 0x78, 0xe9, 0x6b, 0x0a, 0xa8, 0x61, 0x0d,
		0xa4, 0xe1, 0xb7, 0x3a, 0xa4, 0x4c, 0xbb, 0x0e, 0xf9, 0xb0, 0x77, 0x5d, 0x2a, 0xd8, 0x24, 0x3b,
		0x44, 0xdb, 0x23, 0x76, 0x08, 0x9b, 0xe8, 0x4b, 0x7e, 0xeb, 0x30, 0xd9, 0xe5, 0x8d, 0x56, 0x73,
		0x52, 0xc4, 0xee, 0x61, 0x89, 0x44, 0xec, 0xb0, 0xf5, 0xa3, 0xac, 0x91, 0xd7, 0x97, 0x7f, 0x43,
		0x81, 0x99, 0x9e, 0xfa, 0xcd, 0xd7, 0xf8, 0x17, 0x08, 0x48, 0x15, 0xd8, 0x16, 0xc4, 0xf0, 0x00,
		0xdb, 0x5d, 0x54, 0x81, 0x21, 0x48, 0xc4, 0x0f, 0x43, 0xaa, 0x28, 0x76, 0xd3, 0x90, 0xae, 0x34,
		0xb1, 0x4d, 0x8b, 0xdc, 0x1d, 0xc7, 0x0f, 0x7a, 0x63, 0x27, 0xa1, 0x46, 0x62, 0x27, 0x21, 0x10,
		0x76, 0xd7, 0xf1, 0xf8, 0xe7, 0x24, 0x64, 0x76, 0x42, 0x8d, 0xb0, 0xd3, 0x7d, 0xae, 0x97, 0x20,
		0x43, 0xc4, 0xe8, 0xa8, 0x24, 0xe3, 0xb3, 0x5e, 0xb4, 0xc8, 0x62, 0x21, 0x3b, 0xaa, 0xc1, 0x18,
		0x9d, 0x51, 0x01, 0x36, 0x83, 0x8e, 0xc7, 0xa6, 0x5c, 0x64, 0xda, 0xcb, 0xad, 0x32, 0x44, 0x44,
		0x8c, 0x66, 0x16, 0xc3, 0x27, 0x4f, 0x66, 0xe9, 0x9e, 0xcc, 0x42, 0xe9, 0xd1, 0xcc, 0x42, 0x49,
		0xa4, 0x68, 0x34, 0xdd, 0x0e, 0x7d, 0x47, 0x7d, 0x24, 0x5e, 0x34, 0xf2, 0x86, 0x48, 0xa8, 0xe2,
		0x34, 0x22, 0xd7, 0xe4, 0x72, 0x3d, 0xc5, 0x66, 0xb3, 0x8f, 0x1c, 0xa7, 0x21, 0x0b, 0x20, 0x1c,
		0x5e, 0x51, 0x70, 0x0e, 0x3f, 0xfa, 0x52, 0x18, 0xea, 0xa2, 0x44, 0x92, 0x47, 0x97, 0x8c, 0x30,
		0x64, 0xda, 0x38, 0x30, 0x1a, 0x46, 0x60, 0xf0, 0x77, 0xa2, 0x8f, 0xaa, 0x20, 0xa8, 0x7f, 0xcc,
		0x2d, 0x73, 0x66, 0x96, 0xa7, 0xa4, 0xd1, 0x13, 0x28, 0x91, 0xd1, 0x13, 0xc4, 0x99, 0xab, 0xf4,
		0x80, 0x72, 0x57, 0xf2, 0x24, 0xd3, 0x9c, 0xfb, 0xa8, 0x01, 0x23, 0x54, 0x05, 0x1f, 0x7d, 0x04,
		0x46, 0x0c, 0xfa, 0x8b, 0x4f, 0x8c, 0x87, 0x8f, 0xd3, 0x58, 0x1e, 0x61, 0x26, 0x15, 0x19, 0x61,
		0x46, 0xe2, 0x5d, 0x7c, 0x23, 0x01, 0x63, 0x34, 0x3d, 0xfd, 0xdf, 0x12, 0x4b, 0x48, 0x1a, 0xa2,
		0x85, 0x9a, 0x2e, 0x4d, 0x29, 0x69, 0xfc, 0xbb, 0x6d, 0xd1, 0xe9, 0x4f, 0xc8, 0x54, 0xa9, 0x45,
		0x18, 0x67, 0x3c, 0x42, 0x21, 0x36, 0xad, 0x4a, 0x87, 0x07, 0xc5, 0x59, 0x19, 0xa2, 0x8f, 0x32,
		0x63, 0xb4, 0x25, 0x1a, 0xd4, 0xde, 0x55, 0xe0, 0x74, 0xa4, 0x16, 0xe8, 0x06, 0xb4, 0xad, 0xde,
		0x80, 0xf6, 0xf8, 0x30, 0xd5, 0xc4, 0x89, 0x83, 0xd9, 0xe5, 0x2f, 0xa4, 0x20, 0xc3, 0x77, 0x71,
		0xf7, 0xd1, 0xaf, 0x2a, 0x80, 0x7a, 0xc3, 0x2c, 0x3a, 0x37, 0x68, 0x36, 0x71, 0x0f, 0x98, 0xf9,
		0xff, 0x86, 0x9d, 0x76, 0xe1, 0x9d, 0x96, 0x9e, 0x78, 0xf7, 0x3f, 0x7e, 0xff, 0x97, 0x13, 0x45,
		0xf4, 0xc8, 0x25, 0xb1, 0x02, 0x76, 0xa9, 0x3b, 0xe1, 0x2e, 0x09, 0x6d, 0xd1, 0x4f, 0xc3, 0x44,
		0x08, 0xc2, 0x1d, 0x7b, 0x68, 0xad, 0x1e, 0x39, 0xce, 0xe3, 0xfd, 0x52, 0x89, 0x6a, 0xf0, 0x30,
		0x9a, 0xe9, 0xab, 0x01, 0x75, 0x79, 0xf4, 0x73, 0x0a, 0xe4, 0xa3, 0x43, 0x85, 0x1e, 0x3b, 0x6e,
		0x3c, 0x44, 0xd7, 0x17, 0x87, 0x19, 0xb4, 0xae, 0x31, 0x1e, 0xa5, 0xaa, 0x3c, 0x84, 0xce, 0x74,
		0x55, 0xa1, 0x7e, 0x23, 0x19, 0xe2, 0x2d, 0xc8, 0x51, 0x61, 0x6e, 0x84, 0xa1, 0xb4, 0x18, 0x60,
		0x80, 0x59, 0xda, 0x6b, 0x01, 0x9d, 0xee, 0xe9, 0x95, 0xde, 0x7c, 0xb5, 0xfe, 0xc7, 0xdf, 0x9d,
		0x3d, 0xf5, 0x9d, 0xef, 0xce, 0x2a, 0x3f, 0xfc, 0xee, 0xac, 0xf2, 0x97, 0xdf, 0x9d, 0x55, 0xde,
		0xb9, 0x33, 0xab, 0xfc, 0xc6, 0x9d, 0x59, 0xe5, 0xf7, 0xef, 0xcc, 0x2a, 0xdf, 0xbc, 0x33, 0xdb,
		0x73, 0x1e, 0xf6, 0x9b, 0xdf, 0x9b, 0x55, 0xc4, 0x0a, 0xe9, 0x1b, 0x39, 0xa9, 0xc7, 0xf0, 0xc8,
		0xea, 0x27, 0x1f, 0x83, 0xfc, 0x36, 0x36, 0x48, 0x92, 0x11, 0x07, 0x7d, 0x1f, 0x6e, 0xb7, 0x58,
		0xaf, 0xa6, 0xe3, 0xe2, 0x7b, 0xbb, 0xf0, 0xd9, 0x81, 0x74, 0xbd, 0x6d, 0x34, 0x31, 0x7a, 0x19,
		0x12, 0x16, 0xff, 0x26, 0x51, 0xf5, 0xe2, 0x9d, 0x83, 0x62, 0xa2, 0xbe, 0xf0, 0xe7, 0x07, 0xc5,
		0x31, 0xab, 0xd1, 0x9d, 0x32, 0xdd, 0x85, 0x50, 0x99, 0x5a, 0xd2, 0x12, 0x56, 0x83, 0xe4, 0x73,
		0x9a, 0x0a, 0x48, 0x5c, 0x1a, 0x93, 0xf3, 0x79, 0x3c, 0xb4, 0x53, 0xb6, 0xd2, 0xef, 0x91, 0xa9,
		0x66, 0xdc, 0xfe, 0x40, 0xba, 0xbe, 0x0a, 0x59, 0x82, 0x29, 0xbd, 0x30, 0x2d, 0x4f, 0xfd, 0xb0,
		0x29, 0x92, 0x5f, 0x08, 0x95, 0x3e, 0xf2, 0xbd, 0x0c, 0x59, 0x73, 0xc7, 0xf0, 0xf4, 0x96, 0xe5,
		0x07, 0xf4, 0xf1, 0x2b, 0x4d, 0x9f, 0xe0, 0xc4, 0xba, 0x94, 0x68, 0x92, 0x84, 0x55, 0x45, 0xcb,
		0x10, 0xfa, 0x92, 0xe5, 0x07, 0xe8, 0xff, 0x07, 0xd8, 0x6e, 0x39, 0x46, 0xc0, 0xe4, 0x53, 0x67,
		0x93, 0xe7, 0x13, 0xb4, 0xb4, 0x10, 0x69, 0x34, 0x6c, 0x8b, 0x02, 0x64, 0x69, 0x03, 0x45, 0x78,
		0x06, 0xd2, 0xb7, 0xad, 0x46, 0xb0, 0x43, 0xcb, 0x8a, 0xb4, 0xfc, 0x68, 0x4d, 0xc9, 0x91, 0x47,
		0x6b, 0x4a, 0xa1, 0x95, 0x08, 0x2d, 0xe1, 0x69, 0x4d, 0x91, 0x8e, 0x54, 0x22, 0x94, 0x1e, 0xad,
		0x44, 0x28, 0x89, 0x14, 0x50, 0xe6, 0x8e, 0x61, 0xdb, 0xb8, 0xc5, 0x3e, 0x82, 0x92, 0x96, 0x53,
		0xb0, 0x68, 0x89, 0x98, 0x48, 0x10, 0xd1, 0x32, 0x4c, 0x98, 0x4e, 0xdb, 0xf5, 0xb0, 0xef, 0xe3,
		0x86, 0x4e, 0x47, 0x39, 0x43, 0x47, 0xf9, 0xf1, 0xc3, 0x83, 0xe2, 0x59, 0xb1, 0x80, 0x17, 0x61,
		0x90, 0x81, 0xf2, 0xdd, 0xb6, 0x05, 0x23, 0x30, 0xc8, 0x70, 0xbd, 0xe9, 0xe2, 0xa6, 0xce, 0x2b,
		0x07, 0x02, 0x24, 0x0d, 0x57, 0xd8, 0x14, 0xd1, 0x85, 0x50, 0x89, 0x70, 0xe9, 0x6d, 0xc8, 0xd3,
		0xf7, 0x62, 0xad, 0x6d, 0x8b, 0xbf, 0x5c, 0xf1, 0x0c, 0xa4, 0xd9, 0x67, 0x38, 0x94, 0xb8, 0xfd,
		0x28, 0x39, 0x62, 0x3f, 0x4a, 0x21, 0x12, 0xec, 0xfb, 0x24, 0xcc, 0x57, 0x24, 0x09, 0x4a, 0x8e,
		0x48, 0x50, 0x0a, 0xcf, 0x51, 0xbf, 0x9b, 0x80, 0x5c, 0xd5, 0xe9, 0xd0, 0x4f, 0x81, 0x55, 0x9d,
		0xbd, 0xfb, 0xd1, 0x33, 0x99, 0x56, 0x7b, 0x6d, 0xfe, 0x26, 0x43, 0x42, 0x9e, 0x56, 0x84, 0x1a,
		0x99, 0x56, 0x84, 0xc0, 0xd8, 0x8d, 0x3d, 0x9a, 0x8c, 0x63, 0xec, 0xc6, 0x5e, 0x8c, 0xdd, 0xd8,
		0x23, 0xec, 0xfb, 0x04, 0x3d, 0x1d, 0x67, 0xdf, 0x8f, 0xa3, 0xef, 0x73, 0xf4, 0x7d, 0x82, 0x3e,
		0xd2, 0xcb, 0x1e, 0x43, 0x27, 0x04, 0x6e, 0xb5, 0xaf, 0x2b, 0x30, 0xb1, 0x8e, 0xdb, 0x86, 0x1d,
		0x58, 0xe6, 0x3a, 0x6e, 0xb6, 0x49, 0x0a, 0xe9, 0x7a, 0xb0, 0x32, 0xbc, 0x07, 0x87, 0x13, 0x25,
		0x31, 0xec, 0x44, 0x29, 0x43, 0xc6, 0xb2, 0x03, 0xbd, 0x6d, 0xf8, 0xbb, 0x7c, 0x6a, 0x17, 0xbb,
		0x3e, 0x2f, 0x5a, 0xa2, 0x13, 0x73, 0xd4, 0xb2, 0x83, 0x65, 0xc3, 0xdf, 0xe5, 0xca, 0xff, 0xa7,
		0x14, 0x4c, 0xd4, 0x6d, 0x3f, 0x30, 0x6c, 0x13, 0x0b, 0xe5, 0xff, 0xdf, 0xb0, 0x1f, 0x3b, 0xec,
		0x64, 0x7e, 0x13, 0xbb, 0xb2, 0x70, 0x3c, 0x1a, 0x0f, 0xc7, 0x61, 0x53, 0xb4, 0xdc, 0x37, 0xfc,
		0x5d, 0x1a, 0x8e, 0xbb, 0x9e, 0x91, 0xb9, 0x0b, 0xcf, 0xc8, 0xde, 0x8d, 0x67, 0xc0, 0xc9, 0x3c,
		0xa3, 0x1b, 0xf2, 0xa9, 0x74, 0xae, 0x7f, 0xc8, 0xef, 0x95, 0x67, 0x21, 0x5f, 0xf2, 0xad, 0x6f,
		0x28, 0x90, 0x5b, 0xc4, 0x4e, 0xf8, 0x96, 0xd8, 0xc9, 0xfd, 0xea, 0x25, 0xc8, 0xb4, 0x8c, 0xc0,
		0x0a, 0x3a, 0x0d, 0x96, 0xf7, 0x12, 0x72, 0x4c, 0x17, 0x2d, 0x11, 0x3b, 0x0b, 0x22, 0xfa, 0x09,
		0xc8, 0xb6, 0x1c, 0xbb, 0xc9, 0x64, 0x99, 0x97, 0x49, 0x83, 0x14, 0x36, 0x45, 0xca, 0xe5, 0x90,
		0xca, 0x6f, 0xc0, 0x83, 0x11, 0x52, 0x2d, 0x3b, 0x76, 0x98, 0xfc, 0x95, 0xa1, 0x92, 0x3f, 0x19,
		0x64, 0xfe, 0x09, 0x00, 0x36, 0x21, 0xa4, 0x41, 0x66, 0xf4, 0xc8, 0x20, 0x33, 0x12, 0xef, 0xf3,
		0x2a, 0xa4, 0x36, 0xf0, 0x5e, 0x70, 0xc2, 0x72, 0x23, 0xdc, 0x6e, 0x4d, 0x57, 0x3a, 0x0d, 0xcb,
		0xb9, 0x8f, 0xfa, 0x3a, 0x90, 0xd4, 0x8c, 0xdb, 0xf7, 0xb1, 0xc3, 0x7f, 0x30, 0x06, 0xa3, 0xd7,
		0x58, 0x35, 0xf9, 0x7e, 0xeb, 0xaa, 0x9b, 0x7c, 0x35, 0x3c, 0xc9, 0xbf, 0x42, 0x72, 0x5c, 0x51,
		0x3a, 0xc7, 0xfb, 0xa4, 0xfb, 0x4a, 0xc3, 0x2c, 0x9c, 0xbb, 0x9e, 0xb3, 0x65, 0x6c, 0x59, 0x2d,
		0x2b, 0xd8, 0xe7, 0x61, 0x4b, 0xde, 0x13, 0xe9, 0x36, 0x46, 0xf7, 0x44, 0xba, 0x74, 0x64, 0x4b,
		0xeb, 0x0f, 0x69, 0xbe, 0x09, 0x39, 0x8c, 0x86, 0x77, 0xb9, 0x10, 0x81, 0x6e, 0x40, 0xda, 0x22,
		0xd5, 0x2a, 0x0d, 0x83, 0xb9, 0xcb, 0x8f, 0x1d, 0xdf, 0x19, 0x2d, 0x6c, 0x23, 0x73, 0xb8, 0x1d,
		0x3d, 0x0a, 0xf0, 0xda, 0x29, 0x8d, 0xe1, 0x21, 0x03, 0xb2, 0x9e, 0x71, 0x5b, 0x67, 0xe0, 0xec,
		0xfb, 0x74, 0x1f, 0x3a, 0x1e, 0x5c, 0x14, 0xce, 0x03, 0xf0, 0x33, 0x9e, 0x28, 0xb0, 0x7f, 0x0a,
		0xf2, 0x66, 0xa4, 0x6a, 0xe2, 0x5f, 0x1e, 0x7b, 0xfa, 0xf8, 0x7e, 0xa2, 0x95, 0x96, 0xbc, 0x76,
		0x11, 0x45, 0x8b, 0x76, 0x1b, 0xeb, 0x0a, 0xb9, 0x30, 0xb6, 0xc5, 0xab, 0x26, 0x7d, 0xcb, 0xd9,
		0x0b, 0xb7, 0x29, 0x8f, 0xed, 0x5a, 0xaa, 0xb3, 0x64, 0xc7, 0x10, 0x40, 0x5b, 0xce, 0x5e, 0xb4,
		0xd3, 0xdc, 0x96, 0x54, 0x98, 0x7d, 0x5c, 0x01, 0xd5, 0xe7, 0x25, 0x87, 0xee, 0xb3, 0xb4, 0x4d,
		0xb7, 0x2c, 0x73, 0x97, 0x2f, 0x1e, 0xdf, 0x6d, 0xac, 0x50, 0x91, 0x97, 0xd4, 0xe3, 0x80, 0xd1,
		0xfe, 0x27, 0xfc, 0x58, 0x89, 0xf3, 0x8e, 0x02, 0xaa, 0xc5, 0x2b, 0x87, 0x50, 0x87, 0xdc, 0x30,
		0x3a, 0xc4, 0xea, 0x0d, 0xb9, 0xca, 0x16, 0x80, 0xfd, 0x55, 0xb0, 0x62, 0x85, 0xca, 0x3a, 0xa4,
		0x02, 0xbc, 0x17, 0xd0, 0x7d, 0xd1, 0xdc, 0xe5, 0xd2, 0xf1, 0xbd, 0x92, 0xa8, 0x1a, 0x99, 0xb8,
		0x78, 0x2f, 0x86, 0x4f, 0xc1, 0xd0, 0xc7, 0x60, 0xc4, 0xa3, 0x41, 0x9f, 0x6e, 0x8d, 0xe6, 0x2e,
		0x3f, 0x3e, 0xc0, 0x55, 0x29, 0xaf, 0x1c, 0xc0, 0x98, 0x74, 0x14, 0x9a, 0x43, 0x92, 0x39, 0x66,
		0x90, 0x00, 0x4d, 0x77, 0x49, 0x07, 0xce, 0x31, 0x1a, 0xcb, 0xe5, 0x39, 0x40, 0x65, 0x63, 0x73,
		0x8c, 0xd2, 0x90, 0x03, 0xb9, 0x26, 0x76, 0xc2, 0xf7, 0xba, 0x27, 0x86, 0x71, 0x41, 0x29, 0x37,
		0xcb, 0x2e, 0x28, 0xe1, 0xc4, 0x5c, 0x50, 0x6a, 0x41, 0x6b, 0x90, 0xf4, 0x8c, 0xdb, 0x85, 0x3f,
		0x1b, 0xe5, 0xdf, 0x35, 0x1b, 0x34, 0x9f, 0xe5, 0xc3, 0x3b, 0x9e, 0x71, 0x3b, 0x8a, 0x4c, 0xa0,
		0x3e, 0x80, 0x85, 0xd0, 0x6a, 0x16, 0x46, 0xf9, 0x42, 0xc3, 0x05, 0x52, 0x7c, 0x48, 0x21, 0x1b,
		0xe5, 0x60, 0xb4, 0xfb, 0x89, 0x83, 0x2c, 0xa4, 0xeb, 0xcb, 0x95, 0xc5, 0x1a, 0xfb, 0x70, 0x89,
		0x56, 0xb9, 0xa1, 0xb3, 0x4b, 0xfa, 0x61, 0xbc, 0xf9, 0xa5, 0xca, 0xfa, 0x7a, 0xfd, 0x5a, 0x7d,
		0xbe, 0xb2, 0x51, 0x5f, 0x5d, 0x61, 0x1f, 0x17, 0xac, 0xae, 0x6e, 0xae, 0x2c, 0xd4, 0x57, 0x16,
		0xab, 0xab, 0x37, 0xd5, 0x14, 0x9a, 0x82, 0x89, 0xf5, 0xda, 0x72, 0x65, 0x65, 0xa3, 0x3e, 0xbf,
		0x5e, 0x5b, 0x5c, 0xae, 0xad, 0x6c, 0xa8, 0x69, 0x42, 0xac, 0xaf, 0xac, 0x6f, 0x54, 0x56, 0xe6,
		0x6b, 0x82, 0x38, 0x42, 0x44, 0x17, 0x6b, 0xab, 0x4b, 0xab, 0x1c, 0x6b, 0x14, 0x01, 0x8c, 0x68,
		0xb5, 0x45, 0xf2, 0x3b, 0x83, 0x32, 0x90, 0xda, 0xa8, 0xdd, 0xdc, 0x50, 0xb3, 0x44, 0x9f, 0xca,
		0xe6, 0x42, 0x7d, 0x55, 0x05, 0x34, 0x0a, 0x49, 0xad, 0x72, 0x43, 0x6d, 0xdc, 0x8b, 0x85, 0x98,
		0x5f, 0x48, 0xc0, 0x6c, 0xcf, 0x1b, 0xc0, 0xfc, 0xdc, 0xdc, 0x51, 0x1f, 0x38, 0x2e, 0x43, 0x66,
		0x41, 0x1c, 0xc7, 0x2b, 0xc0, 0xa8, 0x8f, 0x4d, 0xc7, 0x6e, 0xf8, 0x74, 0x50, 0x92, 0x9a, 0xb8,
		0x24, 0x03, 0x63, 0x1b, 0xb6, 0xe3, 0xf3, 0xef, 0xdf, 0xb1, 0x8b, 0xea, 0xaf, 0x28, 0x27, 0x3b,
		0x4a, 0x37, 0x2e, 0x7a, 0x12, 0xaf, 0x4f, 0x5f, 0x38, 0xee, 0x9d, 0x74, 0x92, 0x68, 0xfd, 0x50,
		0x7f, 0xfa, 0x45, 0x67, 0xf6, 0x0a, 0xfa, 0x6c, 0xfc, 0x15, 0xf4, 0x1b, 0xb8, 0xd5, 0xfa, 0xb0,
		0xed, 0xdc, 0xb6, 0x89, 0x27, 0xf8, 0xa1, 0x39, 0xfe, 0xe0, 0x79, 0x98, 0x70, 0x3d, 0xdc, 0xb0,
		0xcc, 0xee, 0x07, 0x9e, 0x8f, 0x5f, 0x98, 0x8a, 0x2d, 0x63, 0x7d, 0xa0, 0x0b, 0x55, 0x33, 0x03,
		0x86, 0xa6, 0x34, 0x06, 0x30, 0xbf, 0xb6, 0xc9, 0x4f, 0x2e, 0x96, 0x7e, 0x3e, 0x09, 0xb0, 0x18,
		0x5e, 0xa2, 0xb7, 0xa1, 0xe8, 0xd2, 0xa3, 0x20, 0xf4, 0xe8, 0x83, 0xde, 0x74, 0x3b, 0x7a, 0x1b,
		0xb7, 0x1d, 0x6f, 0x5f, 0xdf, 0xf6, 0x0c, 0x93, 0x7f, 0xbc, 0x40, 0x39, 0xaf, 0x54, 0x9f, 0x3b,
		0x3c, 0x28, 0x3e, 0xc3, 0x8b, 0x90, 0xe3, 0x05, 0xe4, 0x2a, 0xe1, 0x21, 0x17, 0x7b, 0x6b, 0x8c,
		0x75, 0xd1, 0xed, 0x2c, 0x53, 0xc6, 0x6b, 0x9c, 0x0f, 0x5d, 0x87, 0xbc, 0xd1, 0xa2, 0x81, 0xc1,
		0xf1, 0xe4, 0x35, 0x2a, 0x29, 0x9d, 0x46, 0xdb, 0x23, 0x5b, 0x01, 0x61, 0x13, 0xff, 0xd2, 0xee,
		0xd4, 0x2d, 0xcb, 0xb7, 0xb6, 0x5a, 0x58, 0x6f, 0xe0, 0x5b, 0x96, 0x89, 0xd9, 0xba, 0x13, 0xdb,
		0xff, 0x3d, 0x7f, 0x78, 0x50, 0x7c, 0x9c, 0x1f, 0x13, 0xeb, 0x65, 0x8a, 0x1c, 0x53, 0xe1, 0xed,
		0x0b, 0xb4, 0x99, 0x2e, 0x43, 0x7d, 0x0c, 0xa6, 0xb7, 0x1d, 0xcf, 0xc4, 0xf4, 0x56, 0xe9, 0x79,
		0xef, 0x80, 0x70, 0xd0, 0x42, 0x21, 0x53, 0x7d, 0xf2, 0xf0, 0xa0, 0xf8, 0x44, 0x58, 0x80, 0xf6,
		0x70, 0xc9, 0xd8, 0x88, 0x32, 0x2c, 0xba, 0x9d, 0xf9, 0xb0, 0xb9, 0x74, 0x19, 0x46, 0x37, 0x3c,
		0xc3, 0xc4, 0xf5, 0x05, 0x74, 0x4e, 0xaa, 0x49, 0x1f, 0x3c, 0xa6, 0xfa, 0x2c, 0x7d, 0x6a, 0x14,
		0xd4, 0xda, 0x1e, 0x36, 0x3b, 0xc4, 0x88, 0x62, 0x1c, 0x75, 0xc8, 0x04, 0x04, 0x48, 0xe7, 0x18,
		0xb9, 0xcb, 0x4f, 0x0c, 0x48, 0x6b, 0xac, 0x5b, 0xb9, 0xcc, 0x13, 0x00, 0x91, 0x0d, 0x34, 0x4a,
		0xac, 0x37, 0xd0, 0x5f, 0x87, 0x1c, 0x6b, 0x67, 0x5f, 0xb4, 0x49, 0xd0, 0xd2, 0xf7, 0xa5, 0xe3,
		0xfb, 0x88, 0x6b, 0xc9, 0x3a, 0xa5, 0x9f, 0x91, 0x91, 0x13, 0x87, 0x84, 0x1b, 0xd9, 0x53, 0x0b,
		0x42, 0x6e, 0x74, 0x0d, 0xc6, 0x03, 0xab, 0x8d, 0x9d, 0x4e, 0xa0, 0x5b, 0xb6, 0xde, 0x66, 0x5f,
		0xfd, 0x48, 0xc9, 0x9b, 0x2a, 0x91, 0xe6, 0x48, 0x6d, 0xcc, 0x5b, 0xea, 0xf6, 0xb2, 0x8f, 0x7e,
		0x56, 0x81, 0x31, 0x3e, 0xf4, 0xa6, 0xd3, 0xb1, 0x03, 0x7e, 0x4a, 0xef, 0xd5, 0x13, 0xde, 0x07,
		0x73, 0x8f, 0x79, 0x82, 0xc0, 0x8a, 0x65, 0x69, 0xd3, 0x54, 0x86, 0x8f, 0x1d, 0x6e, 0x09, 0x85,
		0xd0, 0x2e, 0xe4, 0x4c, 0xb7, 0xa3, 0x8b, 0xef, 0x51, 0xa6, 0xf9, 0x7e, 0xff, 0xf1, 0x45, 0x67,
		0x38, 0x6b, 0x65, 0xe3, 0x49, 0x30, 0x11, 0xe3, 0x99, 0x6e, 0x47, 0xf8, 0xc6, 0x2e, 0xe4, 0x9a,
		0x52, 0x67, 0x23, 0xc3, 0x74, 0xb6, 0xd8, 0xb7, 0xb3, 0xe6, 0x11, 0x9d, 0x35, 0xc3, 0xce, 0x66,
		0x5e, 0x01, 0x35, 0x6e, 0x9d, 0x41, 0x09, 0x39, 0x2d, 0x1f, 0x40, 0xf8, 0x4d, 0x05, 0xa0, 0xeb,
		0x26, 0x68, 0x0c, 0x32, 0x2b, 0xab, 0xfa, 0x86, 0x56, 0x99, 0xaf, 0xa9, 0xa7, 0xd0, 0x03, 0x30,
		0x59, 0x59, 0x5b, 0x5b, 0xe2, 0x29, 0x96, 0x93, 0x15, 0x92, 0x2d, 0x97, 0x57, 0x17, 0x6a, 0x4b,
		0x9c, 0x90, 0x20, 0x39, 0xf5, 0x9a, 0x56, 0x59, 0xae, 0xdd, 0x58, 0xd5, 0x3e, 0xcc, 0x89, 0x49,
		0x34, 0x0d, 0xea, 0xf2, 0x92, 0xbe, 0x54, 0xaf, 0x6a, 0x15, 0xed, 0x75, 0x4e, 0x4d, 0xa1, 0x02,
		0x4c, 0xaf, 0xbf, 0xbe, 0xbe, 0x51, 0x5b, 0x8e, 0xb5, 0xa4, 0x49, 0x4a, 0x7f, 0xad, 0xa2, 0x2d,
		0xdc, 0xa8, 0x68, 0x35, 0x4e, 0x1b, 0x41, 0x79, 0x80, 0x6b, 0x9b, 0x4b, 0xa2, 0xa3, 0xd1, 0xd2,
		0xbb, 0x29, 0x98, 0x5c, 0x63, 0xa9, 0x40, 0x9a, 0x8c, 0x26, 0x80, 0xc7, 0x76, 0x55, 0xf4, 0x70,
		0x4a, 0x2f, 0xdc, 0x39, 0x28, 0x66, 0xf9, 0x5e, 0x0b, 0x7d, 0xda, 0x9c, 0xee, 0xb2, 0x44, 0x9e,
		0x3a, 0xc3, 0x63, 0x97, 0xbd, 0xad, 0xf4, 0xd8, 0x25, 0x43, 0x68, 0xa0, 0x45, 0x18, 0xe7, 0x59,
		0x45, 0x6f, 0x59, 0x6d, 0x2b, 0xe0, 0xab, 0x7f, 0xd2, 0x94, 0x88, 0x34, 0x47, 0xf6, 0x19, 0x79,
		0xcb, 0x12, 0x69, 0x40, 0xaf, 0x00, 0x6c, 0x19, 0x81, 0xb9, 0x43, 0xdf, 0x1a, 0x61, 0x5f, 0x86,
		0x91, 0x37, 0x3c, 0xbb, 0x6d, 0x11, 0x45, 0x28, 0x79, 0xdd, 0x7a, 0x1b, 0xa3, 0x4f, 0x28, 0x30,
		0x89, 0xc5, 0x0c, 0xd1, 0xa3, 0x9f, 0x58, 0x9d, 0x3b, 0xd9, 0xc4, 0x92, 0xb7, 0x6d, 0x7b, 0x20,
		0x23, 0xdb, 0xb6, 0x38, 0x1e, 0x00, 0x9f, 0x81, 0x34, 0xdd, 0x88, 0xe2, 0x21, 0x5f, 0x2e, 0x7e,
		0x9b, 0xd1, 0x27, 0x02, 0x8d, 0x31, 0xa2, 0x0a, 0x9b, 0x16, 0x6d, 0x1c, 0x78, 0x96, 0xe9, 0xf3,
		0x63, 0x08, 0x31, 0x67, 0xe7, 0x8d, 0x71, 0x67, 0x5f, 0x66, 0x64, 0xbe, 0xb2, 0xf0, 0xa7, 0x49,
		0x98, 0x5e, 0x13, 0xf5, 0xc0, 0xaa, 0x8b, 0x6d, 0xb1, 0xd7, 0x1d, 0xdd, 0x4a, 0x56, 0xde, 0xff,
		0x56, 0x72, 0xe2, 0xee, 0xb6, 0x92, 0xfb, 0x6c, 0xba, 0x27, 0x3f, 0xd8, 0x4d, 0xf7, 0xd4, 0xfb,
		0xdc, 0x74, 0xbf, 0x02, 0xa3, 0x2e, 0xf9, 0xc9, 0x53, 0x76, 0x46, 0x3e, 0xd6, 0xc1, 0x1b, 0x22,
		0x59, 0x89, 0xd3, 0x50, 0xb3, 0xfb, 0x4d, 0x5f, 0x16, 0xd6, 0x2e, 0x1d, 0xef, 0x70, 0x3d, 0x73,
		0x55, 0xee, 0xa8, 0x8f, 0x9f, 0x09, 0x74, 0x3e, 0xd2, 0x5f, 0x55, 0xe0, 0x81, 0x70, 0xa4, 0xe7,
		0x5b, 0x8e, 0x8f, 0xc5, 0x50, 0x63, 0xc8, 0x86, 0x25, 0x21, 0x4f, 0xc0, 0xe7, 0x86, 0x52, 0xc5,
		0xf1, 0xe4, 0xf5, 0xc5, 0x10, 0x23, 0xe2, 0x11, 0x21, 0x95, 0x78, 0x39, 0xad, 0x22, 0xd8, 0x37,
		0x08, 0x65, 0x2f, 0xa7, 0xe4, 0x88, 0x97, 0x53, 0x4a, 0xb8, 0x22, 0x79, 0x3a, 0xae, 0x37, 0x3f,
		0x44, 0x70, 0x13, 0x32, 0xa2, 0x5e, 0xe4, 0x7a, 0x9f, 0xe9, 0xfd, 0x82, 0x3f, 0x67, 0xa0, 0x69,
		0x8e, 0x17, 0x0b, 0x42, 0x48, 0xea, 0xf2, 0xd3, 0x7f, 0x52, 0x54, 0xb4, 0x10, 0xad, 0xf4, 0x15,
		0x05, 0xb2, 0x61, 0xa7, 0xef, 0x7f, 0xc9, 0xad, 0xab, 0x66, 0xe2, 0x83, 0x54, 0x53, 0x8c, 0x6c,
		0x12, 0x72, 0x9b, 0xda, 0x92, 0x7f, 0x9f, 0xc7, 0xf3, 0x27, 0x21, 0xd5, 0xf1, 0x5a, 0x7e, 0xf8,
		0xad, 0xbb, 0x63, 0x7b, 0x90, 0xf4, 0x23, 0xbf, 0xe5, 0x45, 0x09, 0x02, 0x12, 0x59, 0x4d, 0x24,
		0x04, 0x79, 0x76, 0x24, 0xef, 0xe5, 0xec, 0x98, 0xf1, 0x21, 0xb9, 0xa9, 0x2d, 0x7d, 0x90, 0x3b,
		0xe5, 0xd9, 0x61, 0x97, 0xae, 0xff, 0x55, 0x02, 0xc6, 0xe9, 0x5a, 0xde, 0xfd, 0x1e, 0xba, 0x9b,
		0x30, 0x42, 0x97, 0x16, 0xc5, 0xe0, 0x0d, 0xb5, 0xee, 0x29, 0xbf, 0xb8, 0x40, 0x85, 0xa3, 0x2f,
		0x2e, 0x50, 0xd2, 0x7d, 0x1b, 0x36, 0x6e, 0xc1, 0xaf, 0x25, 0x20, 0xb7, 0x81, 0xf7, 0x82, 0xfb,
		0x6c, 0xbf, 0x0d, 0x48, 0x07, 0x78, 0x2f, 0x10, 0xe6, 0x1b, 0x66, 0x15, 0x4e, 0x0a, 0x77, 0x54,
		0x34, 0x12, 0xee, 0x28, 0xe5, 0x7e, 0xdb, 0xee, 0xdf, 0x25, 0x21, 0xbf, 0x60, 0x04, 0x86, 0x8f,
		0xef, 0xb7, 0xf9, 0x5a, 0x30, 0xda, 0x60, 0x1d, 0xf3, 0x78, 0xf8, 0xdc, 0xf1, 0x9d, 0x44, 0xb5,
		0x14, 0x97, 0xf2, 0xdd, 0x72, 0xb8, 0xc8, 0xdd, 0x72, 0xda, 0xfd, 0x8c, 0x24, 0xa3, 0x5c, 0x35,
		0x7a, 0x30, 0xc3, 0x08, 0x70, 0xd3, 0xf1, 0xf6, 0x7b, 0xcf, 0xb3, 0x8b, 0x96, 0xe8, 0xc1, 0x0c,
		0x4e, 0x0c, 0xdf, 0x2b, 0x4b, 0x0c, 0xf5, 0x5e, 0x19, 0x1f, 0xcb, 0xdf, 0x4a, 0xc1, 0x04, 0x5f,
		0xf9, 0x0b, 0xb3, 0xe3, 0xfb, 0x8c, 0x68, 0xd1, 0x07, 0x81, 0xc4, 0xbd, 0x79, 0x10, 0x78, 0x1d,
		0x32, 0xec, 0xff, 0x22, 0x58, 0x0d, 0x5e, 0xd6, 0xbd, 0x72, 0xe7, 0xa0, 0x38, 0x5a, 0x27, 0x34,
		0xda, 0x01, 0x12, 0xcd, 0x11, 0xf8, 0x33, 0xd2, 0xfb, 0x53, 0xf1, 0x87, 0x7e, 0x4a, 0xac, 0x37,
		0xd0, 0x5f, 0x83, 0x8c, 0x58, 0xb9, 0xe2, 0x4f, 0xca, 0x4f, 0x0c, 0xb5, 0x95, 0x24, 0x8f, 0x94,
		0x00, 0x88, 0x8c, 0x94, 0x20, 0xa2, 0x5b, 0x3d, 0x9b, 0x55, 0x57, 0x87, 0xea, 0x41, 0x8c, 0xd0,
		0x8f, 0xf1, 0xf4, 0xec, 0xbb, 0x29, 0x50, 0xb9, 0x36, 0xfe, 0x07, 0xe5, 0x30, 0xf2, 0x32, 0x4e,
		0xe2, 0x5e, 0x2c, 0xe3, 0xec, 0x42, 0x56, 0xfc, 0x4b, 0x3e, 0xf1, 0x52, 0xcd, 0xc5, 0x13, 0x19,
		0x5c, 0x8e, 0x51, 0x21, 0x52, 0xcc, 0x33, 0x39, 0x15, 0xbd, 0xa3, 0xc0, 0x69, 0x51, 0x67, 0xe9,
		0xdb, 0x8e, 0xa7, 0x5b, 0xb6, 0x78, 0xcd, 0x30, 0x35, 0xa8, 0x86, 0xbb, 0x74, 0x78, 0x50, 0x3c,
		0x17, 0xad, 0xe1, 0xa2, 0x10, 0xf1, 0x8a, 0x6e, 0x5a, 0xb0, 0x5d, 0x73, 0xbc, 0xba, 0x60, 0x8a,
		0xd4, 0x8d, 0xe9, 0x7b, 0x50, 0x37, 0x7e, 0x5d, 0x81, 0x31, 0x0d, 0x4b, 0xe1, 0x9f, 0x39, 0x40,
		0xe2, 0x6e, 0x1d, 0xe0, 0xfe, 0x64, 0x0f, 0xae, 0xfc, 0x3b, 0x0a, 0xfb, 0x77, 0x58, 0x41, 0xe8,
		0xbe, 0xd6, 0xfb, 0xe8, 0xbe, 0xf4, 0xad, 0x83, 0xa2, 0x72, 0x42, 0x15, 0x2e, 0x7f, 0x6e, 0x04,
		0x46, 0x39, 0x04, 0xfa, 0x69, 0x48, 0x91, 0xa7, 0x67, 0x74, 0x79, 0xc8, 0x1e, 0xa5, 0x47, 0xed,
		0x99, 0x61, 0xb5, 0x2c, 0x15, 0xe8, 0x39, 0x56, 0x54, 0x1a, 0xbf, 0xc4, 0x55, 0xb9, 0xe4, 0xb8,
		0xd8, 0x2e, 0x2b, 0x17, 0xd0, 0x2f, 0x2a, 0x90, 0xa6, 0xcf, 0x46, 0xe8, 0xd9, 0x21, 0xc1, 0xe4,
		0x27, 0xc0, 0x99, 0xe7, 0x4e, 0x26, 0xc4, 0x0f, 0xf3, 0x9e, 0xa1, 0xea, 0x4c, 0x95, 0xf2, 0xa1,
		0x3a, 0x26, 0x69, 0x27, 0xfa, 0xfc, 0x14, 0xa4, 0x48, 0xc5, 0x8f, 0x9e, 0x1c, 0xfa, 0xa9, 0x60,
		0x66, 0x6e, 0xa8, 0xa9, 0xdc, 0x3d, 0x4a, 0xdc, 0x6b, 0x0c, 0xf2, 0xdc, 0x40, 0x3a, 0xff, 0xb8,
		0x02, 0x23, 0xac, 0xac, 0x46, 0x4f, 0x0d, 0x51, 0xd8, 0xde, 0xb5, 0x06, 0x33, 0x54, 0x83, 0xe9,
		0xd2, 0x44, 0xa8, 0x01, 0x2b, 0x82, 0x89, 0x0e, 0x3f, 0xa3, 0x74, 0x8b, 0x81, 0xa7, 0x4f, 0x52,
		0xdd, 0x9c, 0x58, 0x8b, 0x87, 0xa8, 0x16, 0x0f, 0x94, 0xd4, 0x50, 0x0b, 0x5e, 0xf8, 0xb0, 0x71,
		0x48, 0xd3, 0x49, 0x82, 0x2e, 0x0c, 0xda, 0xd1, 0x95, 0x34, 0x78, 0x6a, 0x28, 0xde, 0x23, 0x9d,
		0xc0, 0xc3, 0xac, 0xf3, 0x7b, 0xb0, 0x9b, 0xf7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x17,
		0xb7, 0x89, 0x79, 0x77, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *ErrorStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ErrorStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ErrorStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ErrorStatus but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *ErrorStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ContainerHardware) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ContainerHardware)
	if !ok {
		that2, ok := that.(ContainerHardware)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ContainerHardware")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ContainerHardware but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ContainerHardware but is not nil && this == nil")
	}
	if this.Gpu != that1.Gpu {
		return fmt.Errorf("Gpu this(%v) Not Equal that(%v)", this.Gpu, that1.Gpu)
	}
	if this.Cpu != that1.Cpu {
		return fmt.Errorf("Cpu this(%v) Not Equal that(%v)", this.Cpu, that1.Cpu)
	}
	return nil
}
func (this *ContainerHardware) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerHardware)
	if !ok {
		that2, ok := that.(ContainerHardware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gpu != that1.Gpu {
		return false
	}
	if this.Cpu != that1.Cpu {
		return false
	}
	return true
}
func (this *FrameworkManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkManifest)
	if !ok {
		that2, ok := that.(FrameworkManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkManifest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	return nil
}
func (this *FrameworkManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameworkManifest)
	if !ok {
		that2, ok := that.(FrameworkManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	return true
}
func (this *ModelManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest)
	if !ok {
		that2, ok := that.(ModelManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if !this.Framework.Equal(that1.Framework) {
		return fmt.Errorf("Framework this(%v) Not Equal that(%v)", this.Framework, that1.Framework)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Reference) != len(that1.Reference) {
		return fmt.Errorf("Reference this(%v) Not Equal that(%v)", len(this.Reference), len(that1.Reference))
	}
	for i := range this.Reference {
		if this.Reference[i] != that1.Reference[i] {
			return fmt.Errorf("Reference this[%v](%v) Not Equal that[%v](%v)", i, this.Reference[i], i, that1.Reference[i])
		}
	}
	if this.License != that1.License {
		return fmt.Errorf("License this(%v) Not Equal that(%v)", this.License, that1.License)
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return fmt.Errorf("Inputs this(%v) Not Equal that(%v)", len(this.Inputs), len(that1.Inputs))
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return fmt.Errorf("Inputs this[%v](%v) Not Equal that[%v](%v)", i, this.Inputs[i], i, that1.Inputs[i])
		}
	}
	if !this.Output.Equal(that1.Output) {
		return fmt.Errorf("Output this(%v) Not Equal that(%v)", this.Output, that1.Output)
	}
	if this.BeforePreprocess != that1.BeforePreprocess {
		return fmt.Errorf("BeforePreprocess this(%v) Not Equal that(%v)", this.BeforePreprocess, that1.BeforePreprocess)
	}
	if this.Preprocess != that1.Preprocess {
		return fmt.Errorf("Preprocess this(%v) Not Equal that(%v)", this.Preprocess, that1.Preprocess)
	}
	if this.AfterPreprocess != that1.AfterPreprocess {
		return fmt.Errorf("AfterPreprocess this(%v) Not Equal that(%v)", this.AfterPreprocess, that1.AfterPreprocess)
	}
	if this.BeforePostprocess != that1.BeforePostprocess {
		return fmt.Errorf("BeforePostprocess this(%v) Not Equal that(%v)", this.BeforePostprocess, that1.BeforePostprocess)
	}
	if this.Postprocess != that1.Postprocess {
		return fmt.Errorf("Postprocess this(%v) Not Equal that(%v)", this.Postprocess, that1.Postprocess)
	}
	if this.AfterPostprocess != that1.AfterPostprocess {
		return fmt.Errorf("AfterPostprocess this(%v) Not Equal that(%v)", this.AfterPostprocess, that1.AfterPostprocess)
	}
	if !this.Model.Equal(that1.Model) {
		return fmt.Errorf("Model this(%v) Not Equal that(%v)", this.Model, that1.Model)
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", len(this.Attributes), len(that1.Attributes))
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return fmt.Errorf("Attributes this[%v](%v) Not Equal that[%v](%v)", i, this.Attributes[i], i, that1.Attributes[i])
		}
	}
	if this.Hidden != that1.Hidden {
		return fmt.Errorf("Hidden this(%v) Not Equal that(%v)", this.Hidden, that1.Hidden)
	}
	return nil
}
func (this *ModelManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelManifest)
	if !ok {
		that2, ok := that.(ModelManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Framework.Equal(that1.Framework) {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Reference) != len(that1.Reference) {
		return false
	}
	for i := range this.Reference {
		if this.Reference[i] != that1.Reference[i] {
			return false
		}
	}
	if this.License != that1.License {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if this.BeforePreprocess != that1.BeforePreprocess {
		return false
	}
	if this.Preprocess != that1.Preprocess {
		return false
	}
	if this.AfterPreprocess != that1.AfterPreprocess {
		return false
	}
	if this.BeforePostprocess != that1.BeforePostprocess {
		return false
	}
	if this.Postprocess != that1.Postprocess {
		return false
	}
	if this.AfterPostprocess != that1.AfterPostprocess {
		return false
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	return true
}
func (this *ModelManifest_Type) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Type)
	if !ok {
		that2, ok := that.(ModelManifest_Type)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Type")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Type but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Type but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return fmt.Errorf("Parameters this(%v) Not Equal that(%v)", len(this.Parameters), len(that1.Parameters))
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return fmt.Errorf("Parameters this[%v](%v) Not Equal that[%v](%v)", i, this.Parameters[i], i, that1.Parameters[i])
		}
	}
	return nil
}
func (this *ModelManifest_Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelManifest_Type)
	if !ok {
		that2, ok := that.(ModelManifest_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	return true
}
func (this *ModelManifest_Type_Parameter) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Type_Parameter)
	if !ok {
		that2, ok := that.(ModelManifest_Type_Parameter)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Type_Parameter")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Type_Parameter but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Type_Parameter but is not nil && this == nil")
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *ModelManifest_Type_Parameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelManifest_Type_Parameter)
	if !ok {
		that2, ok := that.(ModelManifest_Type_Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ModelManifest_Model) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Model)
	if !ok {
		that2, ok := that.(ModelManifest_Model)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Model")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Model but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Model but is not nil && this == nil")
	}
	if this.BaseUrl != that1.BaseUrl {
		return fmt.Errorf("BaseUrl this(%v) Not Equal that(%v)", this.BaseUrl, that1.BaseUrl)
	}
	if this.WeightsPath != that1.WeightsPath {
		return fmt.Errorf("WeightsPath this(%v) Not Equal that(%v)", this.WeightsPath, that1.WeightsPath)
	}
	if this.GraphPath != that1.GraphPath {
		return fmt.Errorf("GraphPath this(%v) Not Equal that(%v)", this.GraphPath, that1.GraphPath)
	}
	if this.IsArchive != that1.IsArchive {
		return fmt.Errorf("IsArchive this(%v) Not Equal that(%v)", this.IsArchive, that1.IsArchive)
	}
	if this.WeightsChecksum != that1.WeightsChecksum {
		return fmt.Errorf("WeightsChecksum this(%v) Not Equal that(%v)", this.WeightsChecksum, that1.WeightsChecksum)
	}
	if this.GraphChecksum != that1.GraphChecksum {
		return fmt.Errorf("GraphChecksum this(%v) Not Equal that(%v)", this.GraphChecksum, that1.GraphChecksum)
	}
	return nil
}
func (this *ModelManifest_Model) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelManifest_Model)
	if !ok {
		that2, ok := that.(ModelManifest_Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseUrl != that1.BaseUrl {
		return false
	}
	if this.WeightsPath != that1.WeightsPath {
		return false
	}
	if this.GraphPath != that1.GraphPath {
		return false
	}
	if this.IsArchive != that1.IsArchive {
		return false
	}
	if this.WeightsChecksum != that1.WeightsChecksum {
		return false
	}
	if this.GraphChecksum != that1.GraphChecksum {
		return false
	}
	return true
}
func (this *FrameworkRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkRequest)
	if !ok {
		that2, ok := that.(FrameworkRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkRequest but is not nil && this == nil")
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	return nil
}
func (this *FrameworkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameworkRequest)
	if !ok {
		that2, ok := that.(FrameworkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	return true
}
func (this *FrameworkManifestsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkManifestsResponse)
	if !ok {
		that2, ok := that.(FrameworkManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkManifestsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkManifestsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkManifestsResponse but is not nil && this == nil")
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return fmt.Errorf("Manifests this(%v) Not Equal that(%v)", len(this.Manifests), len(that1.Manifests))
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return fmt.Errorf("Manifests this[%v](%v) Not Equal that[%v](%v)", i, this.Manifests[i], i, that1.Manifests[i])
		}
	}
	return nil
}
func (this *FrameworkManifestsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrameworkManifestsResponse)
	if !ok {
		that2, ok := that.(FrameworkManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return false
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return false
		}
	}
	return true
}
func (this *Agent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Agent)
	if !ok {
		that2, ok := that.(Agent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Agent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Agent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Agent but is not nil && this == nil")
	}
	if this.Host != that1.Host {
		return fmt.Errorf("Host this(%v) Not Equal that(%v)", this.Host, that1.Host)
	}
	if this.Port != that1.Port {
		return fmt.Errorf("Port this(%v) Not Equal that(%v)", this.Port, that1.Port)
	}
	if this.Hostname != that1.Hostname {
		return fmt.Errorf("Hostname this(%v) Not Equal that(%v)", this.Hostname, that1.Hostname)
	}
	if this.Architecture != that1.Architecture {
		return fmt.Errorf("Architecture this(%v) Not Equal that(%v)", this.Architecture, that1.Architecture)
	}
	if this.Hasgpu != that1.Hasgpu {
		return fmt.Errorf("Hasgpu this(%v) Not Equal that(%v)", this.Hasgpu, that1.Hasgpu)
	}
	if this.Cpuinfo != that1.Cpuinfo {
		return fmt.Errorf("Cpuinfo this(%v) Not Equal that(%v)", this.Cpuinfo, that1.Cpuinfo)
	}
	if this.Gpuinfo != that1.Gpuinfo {
		return fmt.Errorf("Gpuinfo this(%v) Not Equal that(%v)", this.Gpuinfo, that1.Gpuinfo)
	}
	if len(this.Frameworks) != len(that1.Frameworks) {
		return fmt.Errorf("Frameworks this(%v) Not Equal that(%v)", len(this.Frameworks), len(that1.Frameworks))
	}
	for i := range this.Frameworks {
		if !this.Frameworks[i].Equal(that1.Frameworks[i]) {
			return fmt.Errorf("Frameworks this[%v](%v) Not Equal that[%v](%v)", i, this.Frameworks[i], i, that1.Frameworks[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	return nil
}
func (this *Agent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Agent)
	if !ok {
		that2, ok := that.(Agent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.Architecture != that1.Architecture {
		return false
	}
	if this.Hasgpu != that1.Hasgpu {
		return false
	}
	if this.Cpuinfo != that1.Cpuinfo {
		return false
	}
	if this.Gpuinfo != that1.Gpuinfo {
		return false
	}
	if len(this.Frameworks) != len(that1.Frameworks) {
		return false
	}
	for i := range this.Frameworks {
		if !this.Frameworks[i].Equal(that1.Frameworks[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return false
		}
	}
	return true
}
func (this *Agents) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Agents)
	if !ok {
		that2, ok := that.(Agents)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Agents")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Agents but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Agents but is not nil && this == nil")
	}
	if len(this.Agents) != len(that1.Agents) {
		return fmt.Errorf("Agents this(%v) Not Equal that(%v)", len(this.Agents), len(that1.Agents))
	}
	for i := range this.Agents {
		if !this.Agents[i].Equal(that1.Agents[i]) {
			return fmt.Errorf("Agents this[%v](%v) Not Equal that[%v](%v)", i, this.Agents[i], i, that1.Agents[i])
		}
	}
	return nil
}
func (this *Agents) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Agents)
	if !ok {
		that2, ok := that.(Agents)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Agents) != len(that1.Agents) {
		return false
	}
	for i := range this.Agents {
		if !this.Agents[i].Equal(that1.Agents[i]) {
			return false
		}
	}
	return true
}
func (this *ModelRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelRequest)
	if !ok {
		that2, ok := that.(ModelRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelRequest but is not nil && this == nil")
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	return nil
}
func (this *ModelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelRequest)
	if !ok {
		that2, ok := that.(ModelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	return true
}
func (this *ModelManifestsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifestsResponse)
	if !ok {
		that2, ok := that.(ModelManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifestsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifestsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifestsResponse but is not nil && this == nil")
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return fmt.Errorf("Manifests this(%v) Not Equal that(%v)", len(this.Manifests), len(that1.Manifests))
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return fmt.Errorf("Manifests this[%v](%v) Not Equal that[%v](%v)", i, this.Manifests[i], i, that1.Manifests[i])
		}
	}
	return nil
}
func (this *ModelManifestsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModelManifestsResponse)
	if !ok {
		that2, ok := that.(ModelManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return false
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return false
		}
	}
	return true
}
func (this *ErrorStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ErrorStatus{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerHardware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ContainerHardware{")
	s = append(s, "Gpu: "+fmt.Sprintf("%#v", this.Gpu)+",\n")
	s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.FrameworkManifest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&dlframework.ModelManifest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Framework != nil {
		s = append(s, "Framework: "+fmt.Sprintf("%#v", this.Framework)+",\n")
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Reference: "+fmt.Sprintf("%#v", this.Reference)+",\n")
	s = append(s, "License: "+fmt.Sprintf("%#v", this.License)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "BeforePreprocess: "+fmt.Sprintf("%#v", this.BeforePreprocess)+",\n")
	s = append(s, "Preprocess: "+fmt.Sprintf("%#v", this.Preprocess)+",\n")
	s = append(s, "AfterPreprocess: "+fmt.Sprintf("%#v", this.AfterPreprocess)+",\n")
	s = append(s, "BeforePostprocess: "+fmt.Sprintf("%#v", this.BeforePostprocess)+",\n")
	s = append(s, "Postprocess: "+fmt.Sprintf("%#v", this.Postprocess)+",\n")
	s = append(s, "AfterPostprocess: "+fmt.Sprintf("%#v", this.AfterPostprocess)+",\n")
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "Hidden: "+fmt.Sprintf("%#v", this.Hidden)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.ModelManifest_Type{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForParameters := make([]string, 0, len(this.Parameters))
	for k := range this.Parameters {
		keysForParameters = append(keysForParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParameters)
	mapStringForParameters := "map[string]*ModelManifest_Type_Parameter{"
	for _, k := range keysForParameters {
		mapStringForParameters += fmt.Sprintf("%#v: %#v,", k, this.Parameters[k])
	}
	mapStringForParameters += "}"
	if this.Parameters != nil {
		s = append(s, "Parameters: "+mapStringForParameters+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Type_Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.ModelManifest_Type_Parameter{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Model) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dlframework.ModelManifest_Model{")
	s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	s = append(s, "WeightsPath: "+fmt.Sprintf("%#v", this.WeightsPath)+",\n")
	s = append(s, "GraphPath: "+fmt.Sprintf("%#v", this.GraphPath)+",\n")
	s = append(s, "IsArchive: "+fmt.Sprintf("%#v", this.IsArchive)+",\n")
	s = append(s, "WeightsChecksum: "+fmt.Sprintf("%#v", this.WeightsChecksum)+",\n")
	s = append(s, "GraphChecksum: "+fmt.Sprintf("%#v", this.GraphChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.FrameworkRequest{")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkManifestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.FrameworkManifestsResponse{")
	if this.Manifests != nil {
		s = append(s, "Manifests: "+fmt.Sprintf("%#v", this.Manifests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Agent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dlframework.Agent{")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "Architecture: "+fmt.Sprintf("%#v", this.Architecture)+",\n")
	s = append(s, "Hasgpu: "+fmt.Sprintf("%#v", this.Hasgpu)+",\n")
	s = append(s, "Cpuinfo: "+fmt.Sprintf("%#v", this.Cpuinfo)+",\n")
	s = append(s, "Gpuinfo: "+fmt.Sprintf("%#v", this.Gpuinfo)+",\n")
	if this.Frameworks != nil {
		s = append(s, "Frameworks: "+fmt.Sprintf("%#v", this.Frameworks)+",\n")
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Agents) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.Agents{")
	if this.Agents != nil {
		s = append(s, "Agents: "+fmt.Sprintf("%#v", this.Agents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.ModelRequest{")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.ModelManifestsResponse{")
	if this.Manifests != nil {
		s = append(s, "Manifests: "+fmt.Sprintf("%#v", this.Manifests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRegistry(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	FrameworkManifests(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*FrameworkManifestsResponse, error)
	FrameworkAgents(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*Agents, error)
	ModelManifests(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelManifestsResponse, error)
	ModelAgents(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*Agents, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) FrameworkManifests(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*FrameworkManifestsResponse, error) {
	out := new(FrameworkManifestsResponse)
	err := c.cc.Invoke(ctx, "/carml.org.dlframework.Registry/FrameworkManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) FrameworkAgents(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := c.cc.Invoke(ctx, "/carml.org.dlframework.Registry/FrameworkAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ModelManifests(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelManifestsResponse, error) {
	out := new(ModelManifestsResponse)
	err := c.cc.Invoke(ctx, "/carml.org.dlframework.Registry/ModelManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ModelAgents(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := c.cc.Invoke(ctx, "/carml.org.dlframework.Registry/ModelAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	FrameworkManifests(context.Context, *FrameworkRequest) (*FrameworkManifestsResponse, error)
	FrameworkAgents(context.Context, *FrameworkRequest) (*Agents, error)
	ModelManifests(context.Context, *ModelRequest) (*ModelManifestsResponse, error)
	ModelAgents(context.Context, *ModelRequest) (*Agents, error)
}

// UnimplementedRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (*UnimplementedRegistryServer) FrameworkManifests(ctx context.Context, req *FrameworkRequest) (*FrameworkManifestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrameworkManifests not implemented")
}
func (*UnimplementedRegistryServer) FrameworkAgents(ctx context.Context, req *FrameworkRequest) (*Agents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrameworkAgents not implemented")
}
func (*UnimplementedRegistryServer) ModelManifests(ctx context.Context, req *ModelRequest) (*ModelManifestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelManifests not implemented")
}
func (*UnimplementedRegistryServer) ModelAgents(ctx context.Context, req *ModelRequest) (*Agents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelAgents not implemented")
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_FrameworkManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).FrameworkManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/FrameworkManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).FrameworkManifests(ctx, req.(*FrameworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_FrameworkAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).FrameworkAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/FrameworkAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).FrameworkAgents(ctx, req.(*FrameworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ModelManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ModelManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/ModelManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ModelManifests(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ModelAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ModelAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/ModelAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ModelAgents(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.dlframework.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FrameworkManifests",
			Handler:    _Registry_FrameworkManifests_Handler,
		},
		{
			MethodName: "FrameworkAgents",
			Handler:    _Registry_FrameworkAgents_Handler,
		},
		{
			MethodName: "ModelManifests",
			Handler:    _Registry_ModelManifests_Handler,
		},
		{
			MethodName: "ModelAgents",
			Handler:    _Registry_ModelAgents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func (m *ErrorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ContainerHardware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerHardware) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gpu) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Gpu)))
		i += copy(dAtA[i:], m.Gpu)
	}
	if len(m.Cpu) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Cpu)))
		i += copy(dAtA[i:], m.Cpu)
	}
	return i, nil
}

func (m *FrameworkManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Container) > 0 {
		for k := range m.Container {
			dAtA[i] = 0x1a
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRegistry(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRegistry(uint64(len(k))) + msgSize
			i = encodeVarintRegistry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRegistry(dAtA, i, uint64(v.Size()))
				n1, err1 := v.MarshalTo(dAtA[i:])
				if err1 != nil {
					return 0, err1
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *ModelManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Framework != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(m.Framework.Size()))
		n2, err2 := m.Framework.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if len(m.Container) > 0 {
		for k := range m.Container {
			dAtA[i] = 0x22
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRegistry(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRegistry(uint64(len(k))) + msgSize
			i = encodeVarintRegistry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRegistry(dAtA, i, uint64(v.Size()))
				n3, err3 := v.MarshalTo(dAtA[i:])
				if err3 != nil {
					return 0, err3
				}
				i += n3
			}
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Reference) > 0 {
		for _, s := range m.Reference {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.License) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Output != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(m.Output.Size()))
		n4, err4 := m.Output.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if len(m.BeforePreprocess) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.BeforePreprocess)))
		i += copy(dAtA[i:], m.BeforePreprocess)
	}
	if len(m.Preprocess) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Preprocess)))
		i += copy(dAtA[i:], m.Preprocess)
	}
	if len(m.AfterPreprocess) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.AfterPreprocess)))
		i += copy(dAtA[i:], m.AfterPreprocess)
	}
	if len(m.BeforePostprocess) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.BeforePostprocess)))
		i += copy(dAtA[i:], m.BeforePostprocess)
	}
	if len(m.Postprocess) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Postprocess)))
		i += copy(dAtA[i:], m.Postprocess)
	}
	if len(m.AfterPostprocess) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.AfterPostprocess)))
		i += copy(dAtA[i:], m.AfterPostprocess)
	}
	if m.Model != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(m.Model.Size()))
		n5, err5 := m.Model.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovRegistry(uint64(len(k))) + 1 + len(v) + sovRegistry(uint64(len(v)))
			i = encodeVarintRegistry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Hidden {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ModelManifest_Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Parameters) > 0 {
		for k := range m.Parameters {
			dAtA[i] = 0x1a
			i++
			v := m.Parameters[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRegistry(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRegistry(uint64(len(k))) + msgSize
			i = encodeVarintRegistry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRegistry(dAtA, i, uint64(v.Size()))
				n6, err6 := v.MarshalTo(dAtA[i:])
				if err6 != nil {
					return 0, err6
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *ModelManifest_Type_Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Type_Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *ModelManifest_Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.BaseUrl)))
		i += copy(dAtA[i:], m.BaseUrl)
	}
	if len(m.WeightsPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.WeightsPath)))
		i += copy(dAtA[i:], m.WeightsPath)
	}
	if len(m.GraphPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.GraphPath)))
		i += copy(dAtA[i:], m.GraphPath)
	}
	if m.IsArchive {
		dAtA[i] = 0x20
		i++
		if m.IsArchive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.WeightsChecksum) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.WeightsChecksum)))
		i += copy(dAtA[i:], m.WeightsChecksum)
	}
	if len(m.GraphChecksum) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.GraphChecksum)))
		i += copy(dAtA[i:], m.GraphChecksum)
	}
	return i, nil
}

func (m *FrameworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	return i, nil
}

func (m *FrameworkManifestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkManifestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, msg := range m.Manifests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Agent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Architecture) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Architecture)))
		i += copy(dAtA[i:], m.Architecture)
	}
	if m.Hasgpu {
		dAtA[i] = 0x28
		i++
		if m.Hasgpu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Cpuinfo) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Cpuinfo)))
		i += copy(dAtA[i:], m.Cpuinfo)
	}
	if len(m.Gpuinfo) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Gpuinfo)))
		i += copy(dAtA[i:], m.Gpuinfo)
	}
	if len(m.Frameworks) > 0 {
		for _, msg := range m.Frameworks {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			dAtA[i] = 0x4a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovRegistry(uint64(len(k))) + 1 + len(v) + sovRegistry(uint64(len(v)))
			i = encodeVarintRegistry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Agents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for _, msg := range m.Agents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	return i, nil
}

func (m *ModelManifestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, msg := range m.Manifests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegistry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintRegistry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedErrorStatus(r randyRegistry, easy bool) *ErrorStatus {
	this := &ErrorStatus{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	this.Message = string(randStringRegistry(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContainerHardware(r randyRegistry, easy bool) *ContainerHardware {
	this := &ContainerHardware{}
	this.Gpu = string(randStringRegistry(r))
	this.Cpu = string(randStringRegistry(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkManifest(r randyRegistry, easy bool) *FrameworkManifest {
	this := &FrameworkManifest{}
	this.Name = string(randStringRegistry(r))
	this.Version = string(randStringRegistry(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Container = make(map[string]*ContainerHardware)
		for i := 0; i < v1; i++ {
			this.Container[randStringRegistry(r)] = NewPopulatedContainerHardware(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest(r randyRegistry, easy bool) *ModelManifest {
	this := &ModelManifest{}
	this.Name = string(randStringRegistry(r))
	this.Version = string(randStringRegistry(r))
	if r.Intn(10) != 0 {
		this.Framework = NewPopulatedFrameworkManifest(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Container = make(map[string]*ContainerHardware)
		for i := 0; i < v2; i++ {
			this.Container[randStringRegistry(r)] = NewPopulatedContainerHardware(r, easy)
		}
	}
	this.Description = string(randStringRegistry(r))
	v3 := r.Intn(10)
	this.Reference = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Reference[i] = string(randStringRegistry(r))
	}
	this.License = string(randStringRegistry(r))
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Inputs = make([]*ModelManifest_Type, v4)
		for i := 0; i < v4; i++ {
			this.Inputs[i] = NewPopulatedModelManifest_Type(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Output = NewPopulatedModelManifest_Type(r, easy)
	}
	this.BeforePreprocess = string(randStringRegistry(r))
	this.Preprocess = string(randStringRegistry(r))
	this.AfterPreprocess = string(randStringRegistry(r))
	this.BeforePostprocess = string(randStringRegistry(r))
	this.Postprocess = string(randStringRegistry(r))
	this.AfterPostprocess = string(randStringRegistry(r))
	if r.Intn(10) != 0 {
		this.Model = NewPopulatedModelManifest_Model(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Attributes[randStringRegistry(r)] = randStringRegistry(r)
		}
	}
	this.Hidden = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Type(r randyRegistry, easy bool) *ModelManifest_Type {
	this := &ModelManifest_Type{}
	this.Type = string(randStringRegistry(r))
	this.Description = string(randStringRegistry(r))
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Parameters = make(map[string]*ModelManifest_Type_Parameter)
		for i := 0; i < v6; i++ {
			this.Parameters[randStringRegistry(r)] = NewPopulatedModelManifest_Type_Parameter(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Type_Parameter(r randyRegistry, easy bool) *ModelManifest_Type_Parameter {
	this := &ModelManifest_Type_Parameter{}
	this.Value = string(randStringRegistry(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Model(r randyRegistry, easy bool) *ModelManifest_Model {
	this := &ModelManifest_Model{}
	this.BaseUrl = string(randStringRegistry(r))
	this.WeightsPath = string(randStringRegistry(r))
	this.GraphPath = string(randStringRegistry(r))
	this.IsArchive = bool(bool(r.Intn(2) == 0))
	this.WeightsChecksum = string(randStringRegistry(r))
	this.GraphChecksum = string(randStringRegistry(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkRequest(r randyRegistry, easy bool) *FrameworkRequest {
	this := &FrameworkRequest{}
	this.FrameworkName = string(randStringRegistry(r))
	this.FrameworkVersion = string(randStringRegistry(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkManifestsResponse(r randyRegistry, easy bool) *FrameworkManifestsResponse {
	this := &FrameworkManifestsResponse{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Manifests = make([]*FrameworkManifest, v7)
		for i := 0; i < v7; i++ {
			this.Manifests[i] = NewPopulatedFrameworkManifest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAgent(r randyRegistry, easy bool) *Agent {
	this := &Agent{}
	this.Host = string(randStringRegistry(r))
	this.Port = string(randStringRegistry(r))
	this.Hostname = string(randStringRegistry(r))
	this.Architecture = string(randStringRegistry(r))
	this.Hasgpu = bool(bool(r.Intn(2) == 0))
	this.Cpuinfo = string(randStringRegistry(r))
	this.Gpuinfo = string(randStringRegistry(r))
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Frameworks = make([]*FrameworkManifest, v8)
		for i := 0; i < v8; i++ {
			this.Frameworks[i] = NewPopulatedFrameworkManifest(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(10)
		this.Metadata = make(map[string]string)
		for i := 0; i < v9; i++ {
			this.Metadata[randStringRegistry(r)] = randStringRegistry(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAgents(r randyRegistry, easy bool) *Agents {
	this := &Agents{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Agents = make([]*Agent, v10)
		for i := 0; i < v10; i++ {
			this.Agents[i] = NewPopulatedAgent(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelRequest(r randyRegistry, easy bool) *ModelRequest {
	this := &ModelRequest{}
	this.FrameworkName = string(randStringRegistry(r))
	this.FrameworkVersion = string(randStringRegistry(r))
	this.ModelName = string(randStringRegistry(r))
	this.ModelVersion = string(randStringRegistry(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifestsResponse(r randyRegistry, easy bool) *ModelManifestsResponse {
	this := &ModelManifestsResponse{}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Manifests = make([]*ModelManifest, v11)
		for i := 0; i < v11; i++ {
			this.Manifests[i] = NewPopulatedModelManifest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRegistry interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRegistry(r randyRegistry) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRegistry(r randyRegistry) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneRegistry(r)
	}
	return string(tmps)
}
func randUnrecognizedRegistry(r randyRegistry, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRegistry(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRegistry(dAtA []byte, r randyRegistry, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRegistry(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateRegistry(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateRegistry(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRegistry(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRegistry(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRegistry(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRegistry(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ErrorStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *ContainerHardware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gpu)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *FrameworkManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRegistry(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRegistry(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.Framework != nil {
		l = m.Framework.Size()
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRegistry(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRegistry(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRegistry(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Reference) > 0 {
		for _, s := range m.Reference {
			l = len(s)
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.BeforePreprocess)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Preprocess)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.AfterPreprocess)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.BeforePostprocess)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Postprocess)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.AfterPostprocess)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 2 + l + sovRegistry(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRegistry(uint64(len(k))) + 1 + len(v) + sovRegistry(uint64(len(v)))
			n += mapEntrySize + 2 + sovRegistry(uint64(mapEntrySize))
		}
	}
	if m.Hidden {
		n += 3
	}
	return n
}

func (m *ModelManifest_Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRegistry(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRegistry(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest_Type_Parameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *ModelManifest_Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.WeightsPath)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.GraphPath)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.IsArchive {
		n += 2
	}
	l = len(m.WeightsChecksum)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.GraphChecksum)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *FrameworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *FrameworkManifestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, e := range m.Manifests {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *Agent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Architecture)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.Hasgpu {
		n += 2
	}
	l = len(m.Cpuinfo)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Gpuinfo)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Frameworks) > 0 {
		for _, e := range m.Frameworks {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRegistry(uint64(len(k))) + 1 + len(v) + sovRegistry(uint64(len(v)))
			n += mapEntrySize + 1 + sovRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Agents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *ModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *ModelManifestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, e := range m.Manifests {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func sovRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistry(x uint64) (n int) {
	return sovRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ErrorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorStatus{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerHardware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerHardware{`,
		`Gpu:` + fmt.Sprintf("%v", this.Gpu) + `,`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkManifest) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	s := strings.Join([]string{`&FrameworkManifest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInputs := "[]*ModelManifest_Type{"
	for _, f := range this.Inputs {
		repeatedStringForInputs += strings.Replace(fmt.Sprintf("%v", f), "ModelManifest_Type", "ModelManifest_Type", 1) + ","
	}
	repeatedStringForInputs += "}"
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ModelManifest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Framework:` + strings.Replace(this.Framework.String(), "FrameworkManifest", "FrameworkManifest", 1) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Reference:` + fmt.Sprintf("%v", this.Reference) + `,`,
		`License:` + fmt.Sprintf("%v", this.License) + `,`,
		`Inputs:` + repeatedStringForInputs + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "ModelManifest_Type", "ModelManifest_Type", 1) + `,`,
		`BeforePreprocess:` + fmt.Sprintf("%v", this.BeforePreprocess) + `,`,
		`Preprocess:` + fmt.Sprintf("%v", this.Preprocess) + `,`,
		`AfterPreprocess:` + fmt.Sprintf("%v", this.AfterPreprocess) + `,`,
		`BeforePostprocess:` + fmt.Sprintf("%v", this.BeforePostprocess) + `,`,
		`Postprocess:` + fmt.Sprintf("%v", this.Postprocess) + `,`,
		`AfterPostprocess:` + fmt.Sprintf("%v", this.AfterPostprocess) + `,`,
		`Model:` + strings.Replace(fmt.Sprintf("%v", this.Model), "ModelManifest_Model", "ModelManifest_Model", 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`Hidden:` + fmt.Sprintf("%v", this.Hidden) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Type) String() string {
	if this == nil {
		return "nil"
	}
	keysForParameters := make([]string, 0, len(this.Parameters))
	for k := range this.Parameters {
		keysForParameters = append(keysForParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParameters)
	mapStringForParameters := "map[string]*ModelManifest_Type_Parameter{"
	for _, k := range keysForParameters {
		mapStringForParameters += fmt.Sprintf("%v: %v,", k, this.Parameters[k])
	}
	mapStringForParameters += "}"
	s := strings.Join([]string{`&ModelManifest_Type{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Parameters:` + mapStringForParameters + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Type_Parameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifest_Type_Parameter{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifest_Model{`,
		`BaseUrl:` + fmt.Sprintf("%v", this.BaseUrl) + `,`,
		`WeightsPath:` + fmt.Sprintf("%v", this.WeightsPath) + `,`,
		`GraphPath:` + fmt.Sprintf("%v", this.GraphPath) + `,`,
		`IsArchive:` + fmt.Sprintf("%v", this.IsArchive) + `,`,
		`WeightsChecksum:` + fmt.Sprintf("%v", this.WeightsChecksum) + `,`,
		`GraphChecksum:` + fmt.Sprintf("%v", this.GraphChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameworkRequest{`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkManifestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForManifests := "[]*FrameworkManifest{"
	for _, f := range this.Manifests {
		repeatedStringForManifests += strings.Replace(f.String(), "FrameworkManifest", "FrameworkManifest", 1) + ","
	}
	repeatedStringForManifests += "}"
	s := strings.Join([]string{`&FrameworkManifestsResponse{`,
		`Manifests:` + repeatedStringForManifests + `,`,
		`}`,
	}, "")
	return s
}
func (this *Agent) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFrameworks := "[]*FrameworkManifest{"
	for _, f := range this.Frameworks {
		repeatedStringForFrameworks += strings.Replace(f.String(), "FrameworkManifest", "FrameworkManifest", 1) + ","
	}
	repeatedStringForFrameworks += "}"
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&Agent{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`Architecture:` + fmt.Sprintf("%v", this.Architecture) + `,`,
		`Hasgpu:` + fmt.Sprintf("%v", this.Hasgpu) + `,`,
		`Cpuinfo:` + fmt.Sprintf("%v", this.Cpuinfo) + `,`,
		`Gpuinfo:` + fmt.Sprintf("%v", this.Gpuinfo) + `,`,
		`Frameworks:` + repeatedStringForFrameworks + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *Agents) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAgents := "[]*Agent{"
	for _, f := range this.Agents {
		repeatedStringForAgents += strings.Replace(f.String(), "Agent", "Agent", 1) + ","
	}
	repeatedStringForAgents += "}"
	s := strings.Join([]string{`&Agents{`,
		`Agents:` + repeatedStringForAgents + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelRequest{`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForManifests := "[]*ModelManifest{"
	for _, f := range this.Manifests {
		repeatedStringForManifests += strings.Replace(f.String(), "ModelManifest", "ModelManifest", 1) + ","
	}
	repeatedStringForManifests += "}"
	s := strings.Join([]string{`&ModelManifestsResponse{`,
		`Manifests:` + repeatedStringForManifests + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRegistry(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ErrorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerHardware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerHardware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerHardware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = make(map[string]*ContainerHardware)
			}
			var mapkey string
			var mapvalue *ContainerHardware
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContainerHardware{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Container[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framework", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Framework == nil {
				m.Framework = &FrameworkManifest{}
			}
			if err := m.Framework.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = make(map[string]*ContainerHardware)
			}
			var mapkey string
			var mapvalue *ContainerHardware
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContainerHardware{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Container[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &ModelManifest_Type{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &ModelManifest_Type{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforePreprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforePreprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPreprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterPreprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforePostprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforePostprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPostprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterPostprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelManifest_Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = make(map[string]*ModelManifest_Type_Parameter)
			}
			var mapkey string
			var mapvalue *ModelManifest_Type_Parameter
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModelManifest_Type_Parameter{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Parameters[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Type_Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArchive = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkManifestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkManifestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkManifestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, &FrameworkManifest{})
			if err := m.Manifests[len(m.Manifests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Architecture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Architecture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hasgpu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hasgpu = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpuinfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpuinfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpuinfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpuinfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frameworks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Frameworks = append(m.Frameworks, &FrameworkManifest{})
			if err := m.Frameworks[len(m.Frameworks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelManifestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelManifestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, &ModelManifest{})
			if err := m.Manifests[len(m.Manifests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegistry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRegistry
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegistry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistry   = fmt.Errorf("proto: integer overflow")
)
