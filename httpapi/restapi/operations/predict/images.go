// Code generated by go-swagger; DO NOT EDIT.

package predict

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ImagesHandlerFunc turns a function with the right signature into a images handler
type ImagesHandlerFunc func(ImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImagesHandlerFunc) Handle(params ImagesParams) middleware.Responder {
	return fn(params)
}

// ImagesHandler interface for that can handle valid images params
type ImagesHandler interface {
	Handle(ImagesParams) middleware.Responder
}

// NewImages creates a new http.Handler for the images operation
func NewImages(ctx *middleware.Context, handler ImagesHandler) *Images {
	return &Images{Context: ctx, Handler: handler}
}

/*Images swagger:route POST /predict/images Predict images

Images method receives a list of base64 encoded images and runs
the predictor on all the images.
The result is a prediction feature list for each image.

*/
type Images struct {
	Context *middleware.Context
	Handler ImagesHandler
}

func (o *Images) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewImagesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
