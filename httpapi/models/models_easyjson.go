// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  models

import (
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  json "encoding/json"
  jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
   _ *json.RawMessage
   _ *jlexer.Lexer
   _ *jwriter.Writer
   _ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels(in *jlexer.Lexer, out *UrlsRequestURL) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "data":
      out.Data = string(in.String())
    case "id":
      out.ID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels(out *jwriter.Writer, in UrlsRequestURL) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Data != "" {
    const prefix string = ",\"data\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Data))
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v UrlsRequestURL) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UrlsRequestURL) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *UrlsRequestURL) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UrlsRequestURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels1(in *jlexer.Lexer, out *TypeParameter) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "value":
      out.Value = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels1(out *jwriter.Writer, in TypeParameter) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Value != "" {
    const prefix string = ",\"value\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Value))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v TypeParameter) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels1(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TypeParameter) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels1(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *TypeParameter) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels1(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TypeParameter) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels2(in *jlexer.Lexer, out *ModelManifestModel) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "base_url":
      out.BaseURL = string(in.String())
    case "graph_checksum":
      out.GraphChecksum = string(in.String())
    case "graph_path":
      out.GraphPath = string(in.String())
    case "is_archive":
      out.IsArchive = bool(in.Bool())
    case "weights_checksum":
      out.WeightsChecksum = string(in.String())
    case "weights_path":
      out.WeightsPath = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels2(out *jwriter.Writer, in ModelManifestModel) {
  out.RawByte('{')
  first := true
  _ = first
  if in.BaseURL != "" {
    const prefix string = ",\"base_url\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BaseURL))
  }
  if in.GraphChecksum != "" {
    const prefix string = ",\"graph_checksum\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphChecksum))
  }
  if in.GraphPath != "" {
    const prefix string = ",\"graph_path\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphPath))
  }
  if in.IsArchive {
    const prefix string = ",\"is_archive\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.IsArchive))
  }
  if in.WeightsChecksum != "" {
    const prefix string = ",\"weights_checksum\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.WeightsChecksum))
  }
  if in.WeightsPath != "" {
    const prefix string = ",\"weights_path\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.WeightsPath))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v ModelManifestModel) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels2(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModelManifestModel) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels2(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModelManifestModel) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels2(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModelManifestModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels3(in *jlexer.Lexer, out *ImagesRequestImage) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "data":
      (out.Data).UnmarshalEasyJSON(in)
    case "id":
      out.ID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels3(out *jwriter.Writer, in ImagesRequestImage) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.Data) != 0 {
    const prefix string = ",\"data\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Data).MarshalEasyJSON(out)
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v ImagesRequestImage) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels3(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImagesRequestImage) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels3(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImagesRequestImage) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels3(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImagesRequestImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels4(in *jlexer.Lexer, out *DlframeworkUrlsRequest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "options":
      if in.IsNull() {
        in.Skip()
        out.Options = nil
      } else {
        if out.Options == nil {
          out.Options = new(DlframeworkPredictionOptions)
        }
        (*out.Options).UnmarshalEasyJSON(in)
      }
    case "predictor":
      if in.IsNull() {
        in.Skip()
        out.Predictor = nil
      } else {
        if out.Predictor == nil {
          out.Predictor = new(DlframeworkPredictor)
        }
        (*out.Predictor).UnmarshalEasyJSON(in)
      }
    case "urls":
      if in.IsNull() {
        in.Skip()
        out.Urls = nil
      } else {
        in.Delim('[')
        if out.Urls == nil {
          if !in.IsDelim(']') {
            out.Urls = make([]*UrlsRequestURL, 0, 8)
          } else {
            out.Urls = []*UrlsRequestURL{}
          }
        } else { 
          out.Urls = (out.Urls)[:0]
        }
        for !in.IsDelim(']') {
          var v1 *UrlsRequestURL
          if in.IsNull() {
            in.Skip()
            v1 = nil
          } else {
            if v1 == nil {
              v1 = new(UrlsRequestURL)
            }
            (*v1).UnmarshalEasyJSON(in)
          }
          out.Urls = append(out.Urls, v1)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels4(out *jwriter.Writer, in DlframeworkUrlsRequest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Options != nil {
    const prefix string = ",\"options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Options).MarshalEasyJSON(out)
  }
  if in.Predictor != nil {
    const prefix string = ",\"predictor\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Predictor).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"urls\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Urls == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v2, v3 := range in.Urls {
        if v2 > 0 {
          out.RawByte(',')
        }
        if v3 == nil {
          out.RawString("null")
        } else {
          (*v3).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkUrlsRequest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels4(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkUrlsRequest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels4(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkUrlsRequest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels4(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkUrlsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels5(in *jlexer.Lexer, out *DlframeworkTraceID) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      out.ID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels5(out *jwriter.Writer, in DlframeworkTraceID) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkTraceID) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels5(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkTraceID) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels5(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkTraceID) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels5(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkTraceID) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels6(in *jlexer.Lexer, out *DlframeworkSignupResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "outcome":
      out.Outcome = string(in.String())
    case "username":
      out.Username = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels6(out *jwriter.Writer, in DlframeworkSignupResponse) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Outcome != "" {
    const prefix string = ",\"outcome\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Outcome))
  }
  if in.Username != "" {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkSignupResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels6(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkSignupResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels6(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkSignupResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels6(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkSignupResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels7(in *jlexer.Lexer, out *DlframeworkSignup) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "affiliation":
      out.Affiliation = string(in.String())
    case "first_name":
      out.FirstName = string(in.String())
    case "last_name":
      out.LastName = string(in.String())
    case "password":
      out.Password = string(in.String())
    case "username":
      out.Username = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels7(out *jwriter.Writer, in DlframeworkSignup) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Affiliation != "" {
    const prefix string = ",\"affiliation\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Affiliation))
  }
  if in.FirstName != "" {
    const prefix string = ",\"first_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FirstName))
  }
  if in.LastName != "" {
    const prefix string = ",\"last_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.LastName))
  }
  if in.Password != "" {
    const prefix string = ",\"password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Password))
  }
  if in.Username != "" {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkSignup) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels7(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkSignup) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels7(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkSignup) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels7(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkSignup) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels8(in *jlexer.Lexer, out *DlframeworkResetResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "predictor":
      if in.IsNull() {
        in.Skip()
        out.Predictor = nil
      } else {
        if out.Predictor == nil {
          out.Predictor = new(DlframeworkPredictor)
        }
        (*out.Predictor).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels8(out *jwriter.Writer, in DlframeworkResetResponse) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Predictor != nil {
    const prefix string = ",\"predictor\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Predictor).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkResetResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels8(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkResetResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels8(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkResetResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels8(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkResetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels9(in *jlexer.Lexer, out *DlframeworkResetRequest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      out.ID = string(in.String())
    case "predictor":
      if in.IsNull() {
        in.Skip()
        out.Predictor = nil
      } else {
        if out.Predictor == nil {
          out.Predictor = new(DlframeworkPredictor)
        }
        (*out.Predictor).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels9(out *jwriter.Writer, in DlframeworkResetRequest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  if in.Predictor != nil {
    const prefix string = ",\"predictor\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Predictor).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkResetRequest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels9(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkResetRequest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels9(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkResetRequest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels9(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkResetRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels10(in *jlexer.Lexer, out *DlframeworkPredictorOpenRequest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "options":
      if in.IsNull() {
        in.Skip()
        out.Options = nil
      } else {
        if out.Options == nil {
          out.Options = new(DlframeworkPredictionOptions)
        }
        (*out.Options).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels10(out *jwriter.Writer, in DlframeworkPredictorOpenRequest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.Options != nil {
    const prefix string = ",\"options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Options).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkPredictorOpenRequest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels10(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkPredictorOpenRequest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels10(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkPredictorOpenRequest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels10(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkPredictorOpenRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels11(in *jlexer.Lexer, out *DlframeworkPredictor) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      out.ID = string(in.String())
    case "trace_id":
      if in.IsNull() {
        in.Skip()
        out.TraceID = nil
      } else {
        if out.TraceID == nil {
          out.TraceID = new(DlframeworkTraceID)
        }
        (*out.TraceID).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels11(out *jwriter.Writer, in DlframeworkPredictor) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  if in.TraceID != nil {
    const prefix string = ",\"trace_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.TraceID).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkPredictor) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels11(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkPredictor) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels11(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkPredictor) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels11(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkPredictor) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels12(in *jlexer.Lexer, out *DlframeworkPredictionOptions) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "agent":
      out.Agent = string(in.String())
    case "batch_size":
      out.BatchSize = int32(in.Int32())
    case "execution_options":
      if in.IsNull() {
        in.Skip()
        out.ExecutionOptions = nil
      } else {
        if out.ExecutionOptions == nil {
          out.ExecutionOptions = new(DlframeworkExecutionOptions)
        }
        (*out.ExecutionOptions).UnmarshalEasyJSON(in)
      }
    case "feature_limit":
      out.FeatureLimit = int32(in.Int32())
    case "request_id":
      out.RequestID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels12(out *jwriter.Writer, in DlframeworkPredictionOptions) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Agent != "" {
    const prefix string = ",\"agent\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Agent))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int32(int32(in.BatchSize))
  }
  if in.ExecutionOptions != nil {
    const prefix string = ",\"execution_options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.ExecutionOptions).MarshalEasyJSON(out)
  }
  if in.FeatureLimit != 0 {
    const prefix string = ",\"feature_limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int32(int32(in.FeatureLimit))
  }
  if in.RequestID != "" {
    const prefix string = ",\"request_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RequestID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkPredictionOptions) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels12(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkPredictionOptions) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels12(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkPredictionOptions) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels12(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkPredictionOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels13(in *jlexer.Lexer, out *DlframeworkModelManifestsResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "manifests":
      if in.IsNull() {
        in.Skip()
        out.Manifests = nil
      } else {
        in.Delim('[')
        if out.Manifests == nil {
          if !in.IsDelim(']') {
            out.Manifests = make([]*DlframeworkModelManifest, 0, 8)
          } else {
            out.Manifests = []*DlframeworkModelManifest{}
          }
        } else { 
          out.Manifests = (out.Manifests)[:0]
        }
        for !in.IsDelim(']') {
          var v4 *DlframeworkModelManifest
          if in.IsNull() {
            in.Skip()
            v4 = nil
          } else {
            if v4 == nil {
              v4 = new(DlframeworkModelManifest)
            }
            (*v4).UnmarshalEasyJSON(in)
          }
          out.Manifests = append(out.Manifests, v4)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels13(out *jwriter.Writer, in DlframeworkModelManifestsResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"manifests\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Manifests == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v5, v6 := range in.Manifests {
        if v5 > 0 {
          out.RawByte(',')
        }
        if v6 == nil {
          out.RawString("null")
        } else {
          (*v6).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkModelManifestsResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels13(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkModelManifestsResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels13(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkModelManifestsResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels13(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkModelManifestsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels14(in *jlexer.Lexer, out *DlframeworkModelManifestType) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "description":
      out.Description = string(in.String())
    case "parameters":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Parameters = make(map[string]TypeParameter)
        } else {
        out.Parameters = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v7 TypeParameter
          (v7).UnmarshalEasyJSON(in)
          (out.Parameters)[key] = v7
          in.WantComma()
        }
        in.Delim('}')
      }
    case "type":
      out.Type = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels14(out *jwriter.Writer, in DlframeworkModelManifestType) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Description != "" {
    const prefix string = ",\"description\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Description))
  }
  if len(in.Parameters) != 0 {
    const prefix string = ",\"parameters\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v8First := true
      for v8Name, v8Value := range in.Parameters {
        if v8First { v8First = false } else { out.RawByte(',') }
        out.String(string(v8Name))
        out.RawByte(':')
        (v8Value).MarshalEasyJSON(out)
      }
      out.RawByte('}')
    }
  }
  if in.Type != "" {
    const prefix string = ",\"type\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Type))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkModelManifestType) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels14(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkModelManifestType) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels14(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkModelManifestType) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels14(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkModelManifestType) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels15(in *jlexer.Lexer, out *DlframeworkModelManifest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "after_postprocess":
      out.AfterPostprocess = string(in.String())
    case "after_preprocess":
      out.AfterPreprocess = string(in.String())
    case "attributes":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Attributes = make(map[string]string)
        } else {
        out.Attributes = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v9 string
          v9 = string(in.String())
          (out.Attributes)[key] = v9
          in.WantComma()
        }
        in.Delim('}')
      }
    case "before_postprocess":
      out.BeforePostprocess = string(in.String())
    case "before_preprocess":
      out.BeforePreprocess = string(in.String())
    case "container":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Container = make(map[string]DlframeworkContainerHardware)
        } else {
        out.Container = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v10 DlframeworkContainerHardware
          (v10).UnmarshalEasyJSON(in)
          (out.Container)[key] = v10
          in.WantComma()
        }
        in.Delim('}')
      }
    case "description":
      out.Description = string(in.String())
    case "framework":
      if in.IsNull() {
        in.Skip()
        out.Framework = nil
      } else {
        if out.Framework == nil {
          out.Framework = new(DlframeworkFrameworkManifest)
        }
        (*out.Framework).UnmarshalEasyJSON(in)
      }
    case "hidden":
      out.Hidden = bool(in.Bool())
    case "inputs":
      if in.IsNull() {
        in.Skip()
        out.Inputs = nil
      } else {
        in.Delim('[')
        if out.Inputs == nil {
          if !in.IsDelim(']') {
            out.Inputs = make([]*DlframeworkModelManifestType, 0, 8)
          } else {
            out.Inputs = []*DlframeworkModelManifestType{}
          }
        } else { 
          out.Inputs = (out.Inputs)[:0]
        }
        for !in.IsDelim(']') {
          var v11 *DlframeworkModelManifestType
          if in.IsNull() {
            in.Skip()
            v11 = nil
          } else {
            if v11 == nil {
              v11 = new(DlframeworkModelManifestType)
            }
            (*v11).UnmarshalEasyJSON(in)
          }
          out.Inputs = append(out.Inputs, v11)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "license":
      out.License = string(in.String())
    case "model":
      if in.IsNull() {
        in.Skip()
        out.Model = nil
      } else {
        if out.Model == nil {
          out.Model = new(ModelManifestModel)
        }
        (*out.Model).UnmarshalEasyJSON(in)
      }
    case "name":
      out.Name = string(in.String())
    case "output":
      if in.IsNull() {
        in.Skip()
        out.Output = nil
      } else {
        if out.Output == nil {
          out.Output = new(DlframeworkModelManifestType)
        }
        (*out.Output).UnmarshalEasyJSON(in)
      }
    case "postprocess":
      out.Postprocess = string(in.String())
    case "preprocess":
      out.Preprocess = string(in.String())
    case "reference":
      if in.IsNull() {
        in.Skip()
        out.Reference = nil
      } else {
        in.Delim('[')
        if out.Reference == nil {
          if !in.IsDelim(']') {
            out.Reference = make([]string, 0, 4)
          } else {
            out.Reference = []string{}
          }
        } else { 
          out.Reference = (out.Reference)[:0]
        }
        for !in.IsDelim(']') {
          var v12 string
          v12 = string(in.String())
          out.Reference = append(out.Reference, v12)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "version":
      out.Version = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels15(out *jwriter.Writer, in DlframeworkModelManifest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.AfterPostprocess != "" {
    const prefix string = ",\"after_postprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AfterPostprocess))
  }
  if in.AfterPreprocess != "" {
    const prefix string = ",\"after_preprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AfterPreprocess))
  }
  if len(in.Attributes) != 0 {
    const prefix string = ",\"attributes\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v13First := true
      for v13Name, v13Value := range in.Attributes {
        if v13First { v13First = false } else { out.RawByte(',') }
        out.String(string(v13Name))
        out.RawByte(':')
        out.String(string(v13Value))
      }
      out.RawByte('}')
    }
  }
  if in.BeforePostprocess != "" {
    const prefix string = ",\"before_postprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BeforePostprocess))
  }
  if in.BeforePreprocess != "" {
    const prefix string = ",\"before_preprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BeforePreprocess))
  }
  if len(in.Container) != 0 {
    const prefix string = ",\"container\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v14First := true
      for v14Name, v14Value := range in.Container {
        if v14First { v14First = false } else { out.RawByte(',') }
        out.String(string(v14Name))
        out.RawByte(':')
        (v14Value).MarshalEasyJSON(out)
      }
      out.RawByte('}')
    }
  }
  if in.Description != "" {
    const prefix string = ",\"description\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Description))
  }
  if in.Framework != nil {
    const prefix string = ",\"framework\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Framework).MarshalEasyJSON(out)
  }
  if in.Hidden {
    const prefix string = ",\"hidden\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Hidden))
  }
  {
    const prefix string = ",\"inputs\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Inputs == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v15, v16 := range in.Inputs {
        if v15 > 0 {
          out.RawByte(',')
        }
        if v16 == nil {
          out.RawString("null")
        } else {
          (*v16).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  if in.License != "" {
    const prefix string = ",\"license\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.License))
  }
  if in.Model != nil {
    const prefix string = ",\"model\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Model).MarshalEasyJSON(out)
  }
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if in.Output != nil {
    const prefix string = ",\"output\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Output).MarshalEasyJSON(out)
  }
  if in.Postprocess != "" {
    const prefix string = ",\"postprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Postprocess))
  }
  if in.Preprocess != "" {
    const prefix string = ",\"preprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Preprocess))
  }
  {
    const prefix string = ",\"reference\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Reference == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v17, v18 := range in.Reference {
        if v17 > 0 {
          out.RawByte(',')
        }
        out.String(string(v18))
      }
      out.RawByte(']')
    }
  }
  if in.Version != "" {
    const prefix string = ",\"version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Version))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkModelManifest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels15(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkModelManifest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels15(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkModelManifest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels15(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkModelManifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels16(in *jlexer.Lexer, out *DlframeworkLoginResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "outcome":
      out.Outcome = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels16(out *jwriter.Writer, in DlframeworkLoginResponse) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Outcome != "" {
    const prefix string = ",\"outcome\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Outcome))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkLoginResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels16(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkLoginResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels16(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkLoginResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels16(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkLoginResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels16(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels17(in *jlexer.Lexer, out *DlframeworkLogin) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "password":
      out.Password = string(in.String())
    case "username":
      out.Username = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels17(out *jwriter.Writer, in DlframeworkLogin) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Password != "" {
    const prefix string = ",\"password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Password))
  }
  if in.Username != "" {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkLogin) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels17(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkLogin) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels17(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkLogin) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels17(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels18(in *jlexer.Lexer, out *DlframeworkImagesRequest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "images":
      if in.IsNull() {
        in.Skip()
        out.Images = nil
      } else {
        in.Delim('[')
        if out.Images == nil {
          if !in.IsDelim(']') {
            out.Images = make([]*ImagesRequestImage, 0, 8)
          } else {
            out.Images = []*ImagesRequestImage{}
          }
        } else { 
          out.Images = (out.Images)[:0]
        }
        for !in.IsDelim(']') {
          var v19 *ImagesRequestImage
          if in.IsNull() {
            in.Skip()
            v19 = nil
          } else {
            if v19 == nil {
              v19 = new(ImagesRequestImage)
            }
            (*v19).UnmarshalEasyJSON(in)
          }
          out.Images = append(out.Images, v19)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "options":
      if in.IsNull() {
        in.Skip()
        out.Options = nil
      } else {
        if out.Options == nil {
          out.Options = new(DlframeworkPredictionOptions)
        }
        (*out.Options).UnmarshalEasyJSON(in)
      }
    case "predictor":
      if in.IsNull() {
        in.Skip()
        out.Predictor = nil
      } else {
        if out.Predictor == nil {
          out.Predictor = new(DlframeworkPredictor)
        }
        (*out.Predictor).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels18(out *jwriter.Writer, in DlframeworkImagesRequest) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"images\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Images == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v20, v21 := range in.Images {
        if v20 > 0 {
          out.RawByte(',')
        }
        if v21 == nil {
          out.RawString("null")
        } else {
          (*v21).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  if in.Options != nil {
    const prefix string = ",\"options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Options).MarshalEasyJSON(out)
  }
  if in.Predictor != nil {
    const prefix string = ",\"predictor\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Predictor).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkImagesRequest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels18(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkImagesRequest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels18(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkImagesRequest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels18(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkImagesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels18(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels19(in *jlexer.Lexer, out *DlframeworkGPUOptions) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "allocator_type":
      out.AllocatorType = string(in.String())
    case "force_gpu_compatible":
      out.ForceGpuCompatible = bool(in.Bool())
    case "per_process_gpu_memory_fraction":
      out.PerProcessGpuMemoryFraction = float64(in.Float64())
    case "visible_device_list":
      out.VisibleDeviceList = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels19(out *jwriter.Writer, in DlframeworkGPUOptions) {
  out.RawByte('{')
  first := true
  _ = first
  if in.AllocatorType != "" {
    const prefix string = ",\"allocator_type\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AllocatorType))
  }
  if in.ForceGpuCompatible {
    const prefix string = ",\"force_gpu_compatible\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.ForceGpuCompatible))
  }
  if in.PerProcessGpuMemoryFraction != 0 {
    const prefix string = ",\"per_process_gpu_memory_fraction\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.PerProcessGpuMemoryFraction))
  }
  if in.VisibleDeviceList != "" {
    const prefix string = ",\"visible_device_list\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.VisibleDeviceList))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkGPUOptions) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels19(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkGPUOptions) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels19(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkGPUOptions) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels19(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkGPUOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels19(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels20(in *jlexer.Lexer, out *DlframeworkFrameworkManifestsResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "manifests":
      if in.IsNull() {
        in.Skip()
        out.Manifests = nil
      } else {
        in.Delim('[')
        if out.Manifests == nil {
          if !in.IsDelim(']') {
            out.Manifests = make([]*DlframeworkFrameworkManifest, 0, 8)
          } else {
            out.Manifests = []*DlframeworkFrameworkManifest{}
          }
        } else { 
          out.Manifests = (out.Manifests)[:0]
        }
        for !in.IsDelim(']') {
          var v22 *DlframeworkFrameworkManifest
          if in.IsNull() {
            in.Skip()
            v22 = nil
          } else {
            if v22 == nil {
              v22 = new(DlframeworkFrameworkManifest)
            }
            (*v22).UnmarshalEasyJSON(in)
          }
          out.Manifests = append(out.Manifests, v22)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels20(out *jwriter.Writer, in DlframeworkFrameworkManifestsResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"manifests\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Manifests == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v23, v24 := range in.Manifests {
        if v23 > 0 {
          out.RawByte(',')
        }
        if v24 == nil {
          out.RawString("null")
        } else {
          (*v24).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkFrameworkManifestsResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels20(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkFrameworkManifestsResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels20(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkFrameworkManifestsResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels20(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkFrameworkManifestsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels20(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels21(in *jlexer.Lexer, out *DlframeworkFrameworkManifest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "container":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Container = make(map[string]DlframeworkContainerHardware)
        } else {
        out.Container = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v25 DlframeworkContainerHardware
          (v25).UnmarshalEasyJSON(in)
          (out.Container)[key] = v25
          in.WantComma()
        }
        in.Delim('}')
      }
    case "name":
      out.Name = string(in.String())
    case "version":
      out.Version = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels21(out *jwriter.Writer, in DlframeworkFrameworkManifest) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.Container) != 0 {
    const prefix string = ",\"container\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v26First := true
      for v26Name, v26Value := range in.Container {
        if v26First { v26First = false } else { out.RawByte(',') }
        out.String(string(v26Name))
        out.RawByte(':')
        (v26Value).MarshalEasyJSON(out)
      }
      out.RawByte('}')
    }
  }
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if in.Version != "" {
    const prefix string = ",\"version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Version))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkFrameworkManifest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels21(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkFrameworkManifest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels21(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkFrameworkManifest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels21(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkFrameworkManifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels21(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels22(in *jlexer.Lexer, out *DlframeworkFeaturesResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      out.ID = string(in.String())
    case "responses":
      if in.IsNull() {
        in.Skip()
        out.Responses = nil
      } else {
        in.Delim('[')
        if out.Responses == nil {
          if !in.IsDelim(']') {
            out.Responses = make([]*DlframeworkFeatureResponse, 0, 8)
          } else {
            out.Responses = []*DlframeworkFeatureResponse{}
          }
        } else { 
          out.Responses = (out.Responses)[:0]
        }
        for !in.IsDelim(']') {
          var v27 *DlframeworkFeatureResponse
          if in.IsNull() {
            in.Skip()
            v27 = nil
          } else {
            if v27 == nil {
              v27 = new(DlframeworkFeatureResponse)
            }
            (*v27).UnmarshalEasyJSON(in)
          }
          out.Responses = append(out.Responses, v27)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "trace_id":
      if in.IsNull() {
        in.Skip()
        out.TraceID = nil
      } else {
        if out.TraceID == nil {
          out.TraceID = new(DlframeworkTraceID)
        }
        (*out.TraceID).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels22(out *jwriter.Writer, in DlframeworkFeaturesResponse) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  {
    const prefix string = ",\"responses\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Responses == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v28, v29 := range in.Responses {
        if v28 > 0 {
          out.RawByte(',')
        }
        if v29 == nil {
          out.RawString("null")
        } else {
          (*v29).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  if in.TraceID != nil {
    const prefix string = ",\"trace_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.TraceID).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkFeaturesResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels22(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkFeaturesResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels22(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkFeaturesResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels22(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkFeaturesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels22(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels23(in *jlexer.Lexer, out *DlframeworkFeatureResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "features":
      if in.IsNull() {
        in.Skip()
        out.Features = nil
      } else {
        in.Delim('[')
        if out.Features == nil {
          if !in.IsDelim(']') {
            out.Features = make([]*DlframeworkFeature, 0, 8)
          } else {
            out.Features = []*DlframeworkFeature{}
          }
        } else { 
          out.Features = (out.Features)[:0]
        }
        for !in.IsDelim(']') {
          var v30 *DlframeworkFeature
          if in.IsNull() {
            in.Skip()
            v30 = nil
          } else {
            if v30 == nil {
              v30 = new(DlframeworkFeature)
            }
            (*v30).UnmarshalEasyJSON(in)
          }
          out.Features = append(out.Features, v30)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "id":
      out.ID = string(in.String())
    case "input_id":
      out.InputID = string(in.String())
    case "metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Metadata = make(map[string]string)
        } else {
        out.Metadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v31 string
          v31 = string(in.String())
          (out.Metadata)[key] = v31
          in.WantComma()
        }
        in.Delim('}')
      }
    case "request_id":
      out.RequestID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels23(out *jwriter.Writer, in DlframeworkFeatureResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"features\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Features == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v32, v33 := range in.Features {
        if v32 > 0 {
          out.RawByte(',')
        }
        if v33 == nil {
          out.RawString("null")
        } else {
          (*v33).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  if in.InputID != "" {
    const prefix string = ",\"input_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.InputID))
  }
  if len(in.Metadata) != 0 {
    const prefix string = ",\"metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v34First := true
      for v34Name, v34Value := range in.Metadata {
        if v34First { v34First = false } else { out.RawByte(',') }
        out.String(string(v34Name))
        out.RawByte(':')
        out.String(string(v34Value))
      }
      out.RawByte('}')
    }
  }
  if in.RequestID != "" {
    const prefix string = ",\"request_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RequestID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkFeatureResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels23(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkFeatureResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels23(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkFeatureResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels23(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkFeatureResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels23(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels24(in *jlexer.Lexer, out *DlframeworkFeature) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "index":
      out.Index = int32(in.Int32())
    case "metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Metadata = make(map[string]string)
        } else {
        out.Metadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v35 string
          v35 = string(in.String())
          (out.Metadata)[key] = v35
          in.WantComma()
        }
        in.Delim('}')
      }
    case "name":
      out.Name = string(in.String())
    case "probability":
      out.Probability = float32(in.Float32())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels24(out *jwriter.Writer, in DlframeworkFeature) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Index != 0 {
    const prefix string = ",\"index\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int32(int32(in.Index))
  }
  if len(in.Metadata) != 0 {
    const prefix string = ",\"metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v36First := true
      for v36Name, v36Value := range in.Metadata {
        if v36First { v36First = false } else { out.RawByte(',') }
        out.String(string(v36Name))
        out.RawByte(':')
        out.String(string(v36Value))
      }
      out.RawByte('}')
    }
  }
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if in.Probability != 0 {
    const prefix string = ",\"probability\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float32(float32(in.Probability))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkFeature) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels24(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkFeature) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels24(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkFeature) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels24(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkFeature) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels24(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels25(in *jlexer.Lexer, out *DlframeworkExecutionOptions) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "cpu_options":
      if m, ok := out.CPUOptions.(easyjson.Unmarshaler); ok {
      m.UnmarshalEasyJSON(in)
      } else if m, ok := out.CPUOptions.(json.Unmarshaler); ok {
      _ = m.UnmarshalJSON(in.Raw())
      } else {
        out.CPUOptions = in.Interface()
      }
    case "device_count":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.DeviceCount = make(map[string]int32)
        } else {
        out.DeviceCount = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v37 int32
          v37 = int32(in.Int32())
          (out.DeviceCount)[key] = v37
          in.WantComma()
        }
        in.Delim('}')
      }
    case "gpu_options":
      if in.IsNull() {
        in.Skip()
        out.GpuOptions = nil
      } else {
        if out.GpuOptions == nil {
          out.GpuOptions = new(DlframeworkGPUOptions)
        }
        (*out.GpuOptions).UnmarshalEasyJSON(in)
      }
    case "timeout_in_ms":
      out.TimeoutInMs = string(in.String())
    case "trace_id":
      if in.IsNull() {
        in.Skip()
        out.TraceID = nil
      } else {
        if out.TraceID == nil {
          out.TraceID = new(DlframeworkTraceID)
        }
        (*out.TraceID).UnmarshalEasyJSON(in)
      }
    case "trace_level":
      out.TraceLevel = ExecutionOptionsTraceLevel(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels25(out *jwriter.Writer, in DlframeworkExecutionOptions) {
  out.RawByte('{')
  first := true
  _ = first
  if in.CPUOptions != nil {
    const prefix string = ",\"cpu_options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if m, ok := in.CPUOptions.(easyjson.Marshaler); ok {
      m.MarshalEasyJSON(out)
    } else if m, ok := in.CPUOptions.(json.Marshaler); ok {
      out.Raw(m.MarshalJSON())
    } else {
      out.Raw(json.Marshal(in.CPUOptions))
    }
  }
  if len(in.DeviceCount) != 0 {
    const prefix string = ",\"device_count\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v38First := true
      for v38Name, v38Value := range in.DeviceCount {
        if v38First { v38First = false } else { out.RawByte(',') }
        out.String(string(v38Name))
        out.RawByte(':')
        out.Int32(int32(v38Value))
      }
      out.RawByte('}')
    }
  }
  if in.GpuOptions != nil {
    const prefix string = ",\"gpu_options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.GpuOptions).MarshalEasyJSON(out)
  }
  if in.TimeoutInMs != "" {
    const prefix string = ",\"timeout_in_ms\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TimeoutInMs))
  }
  if in.TraceID != nil {
    const prefix string = ",\"trace_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.TraceID).MarshalEasyJSON(out)
  }
  if in.TraceLevel != "" {
    const prefix string = ",\"trace_level\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TraceLevel))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkExecutionOptions) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels25(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkExecutionOptions) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels25(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkExecutionOptions) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels25(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkExecutionOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels25(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels26(in *jlexer.Lexer, out *DlframeworkDatasetRequest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "dataset":
      if in.IsNull() {
        in.Skip()
        out.Dataset = nil
      } else {
        if out.Dataset == nil {
          out.Dataset = new(DatasetRequestDataset)
        }
        (*out.Dataset).UnmarshalEasyJSON(in)
      }
    case "options":
      if in.IsNull() {
        in.Skip()
        out.Options = nil
      } else {
        if out.Options == nil {
          out.Options = new(DlframeworkPredictionOptions)
        }
        (*out.Options).UnmarshalEasyJSON(in)
      }
    case "predictor":
      if in.IsNull() {
        in.Skip()
        out.Predictor = nil
      } else {
        if out.Predictor == nil {
          out.Predictor = new(DlframeworkPredictor)
        }
        (*out.Predictor).UnmarshalEasyJSON(in)
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels26(out *jwriter.Writer, in DlframeworkDatasetRequest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Dataset != nil {
    const prefix string = ",\"dataset\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Dataset).MarshalEasyJSON(out)
  }
  if in.Options != nil {
    const prefix string = ",\"options\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Options).MarshalEasyJSON(out)
  }
  if in.Predictor != nil {
    const prefix string = ",\"predictor\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.Predictor).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkDatasetRequest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels26(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkDatasetRequest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels26(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkDatasetRequest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels26(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkDatasetRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels26(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels27(in *jlexer.Lexer, out *DlframeworkContainerHardware) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "cpu":
      out.CPU = string(in.String())
    case "gpu":
      out.Gpu = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels27(out *jwriter.Writer, in DlframeworkContainerHardware) {
  out.RawByte('{')
  first := true
  _ = first
  if in.CPU != "" {
    const prefix string = ",\"cpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CPU))
  }
  if in.Gpu != "" {
    const prefix string = ",\"gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Gpu))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkContainerHardware) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels27(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkContainerHardware) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels27(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkContainerHardware) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels27(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkContainerHardware) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels27(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels28(in *jlexer.Lexer, out *DlframeworkAgents) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "agents":
      if in.IsNull() {
        in.Skip()
        out.Agents = nil
      } else {
        in.Delim('[')
        if out.Agents == nil {
          if !in.IsDelim(']') {
            out.Agents = make([]*DlframeworkAgent, 0, 8)
          } else {
            out.Agents = []*DlframeworkAgent{}
          }
        } else { 
          out.Agents = (out.Agents)[:0]
        }
        for !in.IsDelim(']') {
          var v39 *DlframeworkAgent
          if in.IsNull() {
            in.Skip()
            v39 = nil
          } else {
            if v39 == nil {
              v39 = new(DlframeworkAgent)
            }
            (*v39).UnmarshalEasyJSON(in)
          }
          out.Agents = append(out.Agents, v39)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels28(out *jwriter.Writer, in DlframeworkAgents) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"agents\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Agents == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v40, v41 := range in.Agents {
        if v40 > 0 {
          out.RawByte(',')
        }
        if v41 == nil {
          out.RawString("null")
        } else {
          (*v41).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkAgents) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels28(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkAgents) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels28(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkAgents) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels28(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkAgents) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels28(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels29(in *jlexer.Lexer, out *DlframeworkAgent) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "architecture":
      out.Architecture = string(in.String())
    case "cpuinfo":
      out.Cpuinfo = string(in.String())
    case "frameworks":
      if in.IsNull() {
        in.Skip()
        out.Frameworks = nil
      } else {
        in.Delim('[')
        if out.Frameworks == nil {
          if !in.IsDelim(']') {
            out.Frameworks = make([]*DlframeworkFrameworkManifest, 0, 8)
          } else {
            out.Frameworks = []*DlframeworkFrameworkManifest{}
          }
        } else { 
          out.Frameworks = (out.Frameworks)[:0]
        }
        for !in.IsDelim(']') {
          var v42 *DlframeworkFrameworkManifest
          if in.IsNull() {
            in.Skip()
            v42 = nil
          } else {
            if v42 == nil {
              v42 = new(DlframeworkFrameworkManifest)
            }
            (*v42).UnmarshalEasyJSON(in)
          }
          out.Frameworks = append(out.Frameworks, v42)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "gpuinfo":
      out.Gpuinfo = string(in.String())
    case "hasgpu":
      out.Hasgpu = bool(in.Bool())
    case "host":
      out.Host = string(in.String())
    case "hostname":
      out.Hostname = string(in.String())
    case "metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Metadata = make(map[string]string)
        } else {
        out.Metadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v43 string
          v43 = string(in.String())
          (out.Metadata)[key] = v43
          in.WantComma()
        }
        in.Delim('}')
      }
    case "port":
      out.Port = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels29(out *jwriter.Writer, in DlframeworkAgent) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Architecture != "" {
    const prefix string = ",\"architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Architecture))
  }
  if in.Cpuinfo != "" {
    const prefix string = ",\"cpuinfo\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Cpuinfo))
  }
  {
    const prefix string = ",\"frameworks\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Frameworks == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v44, v45 := range in.Frameworks {
        if v44 > 0 {
          out.RawByte(',')
        }
        if v45 == nil {
          out.RawString("null")
        } else {
          (*v45).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  if in.Gpuinfo != "" {
    const prefix string = ",\"gpuinfo\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Gpuinfo))
  }
  if in.Hasgpu {
    const prefix string = ",\"hasgpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Hasgpu))
  }
  if in.Host != "" {
    const prefix string = ",\"host\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Host))
  }
  if in.Hostname != "" {
    const prefix string = ",\"hostname\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Hostname))
  }
  if len(in.Metadata) != 0 {
    const prefix string = ",\"metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v46First := true
      for v46Name, v46Value := range in.Metadata {
        if v46First { v46First = false } else { out.RawByte(',') }
        out.String(string(v46Name))
        out.RawByte(':')
        out.String(string(v46Value))
      }
      out.RawByte('}')
    }
  }
  if in.Port != "" {
    const prefix string = ",\"port\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Port))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DlframeworkAgent) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels29(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DlframeworkAgent) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels29(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DlframeworkAgent) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels29(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DlframeworkAgent) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels29(l, v)
}
func easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels30(in *jlexer.Lexer, out *DatasetRequestDataset) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "category":
      out.Category = string(in.String())
    case "name":
      out.Name = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels30(out *jwriter.Writer, in DatasetRequestDataset) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Category != "" {
    const prefix string = ",\"category\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Category))
  }
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DatasetRequestDataset) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels30(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DatasetRequestDataset) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonD2b7633eEncodeGithubComRaiProjectDlframeworkHttpapiModels30(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DatasetRequestDataset) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels30(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DatasetRequestDataset) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonD2b7633eDecodeGithubComRaiProjectDlframeworkHttpapiModels30(l, v)
}
