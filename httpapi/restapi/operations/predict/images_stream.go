// Code generated by go-swagger; DO NOT EDIT.

package predict

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ImagesStreamHandlerFunc turns a function with the right signature into a images stream handler
type ImagesStreamHandlerFunc func(ImagesStreamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImagesStreamHandlerFunc) Handle(params ImagesStreamParams) middleware.Responder {
	return fn(params)
}

// ImagesStreamHandler interface for that can handle valid images stream params
type ImagesStreamHandler interface {
	Handle(ImagesStreamParams) middleware.Responder
}

// NewImagesStream creates a new http.Handler for the images stream operation
func NewImagesStream(ctx *middleware.Context, handler ImagesStreamHandler) *ImagesStream {
	return &ImagesStream{Context: ctx, Handler: handler}
}

/*ImagesStream swagger:route POST /predict/stream/images Predict imagesStream

ImagesStream method receives a list base64 encoded images and runs
the predictor on all the images.
The result is a prediction feature stream for each image.

*/
type ImagesStream struct {
	Context *middleware.Context
	Handler ImagesStreamHandler
}

func (o *ImagesStream) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewImagesStreamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
