// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DlframeworkTextRequest dlframework text request
// swagger:model dlframeworkTextRequest
type DlframeworkTextRequest struct {

	// options
	Options *DlframeworkPredictionOptions `json:"options,omitempty"`

	// predictor
	Predictor *DlframeworkPredictor `json:"predictor,omitempty"`

	// A list of Base64 encoded texts
	Texts []*DlframeworkText `json:"texts"`
}

// Validate validates this dlframework text request
func (m *DlframeworkTextRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredictor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTexts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DlframeworkTextRequest) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *DlframeworkTextRequest) validatePredictor(formats strfmt.Registry) error {

	if swag.IsZero(m.Predictor) { // not required
		return nil
	}

	if m.Predictor != nil {
		if err := m.Predictor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("predictor")
			}
			return err
		}
	}

	return nil
}

func (m *DlframeworkTextRequest) validateTexts(formats strfmt.Registry) error {

	if swag.IsZero(m.Texts) { // not required
		return nil
	}

	for i := 0; i < len(m.Texts); i++ {
		if swag.IsZero(m.Texts[i]) { // not required
			continue
		}

		if m.Texts[i] != nil {
			if err := m.Texts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("texts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DlframeworkTextRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DlframeworkTextRequest) UnmarshalBinary(b []byte) error {
	var res DlframeworkTextRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
