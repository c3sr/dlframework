// Code generated by codecgen - DO NOT EDIT.

package models

import (
	"errors"
	pkg1_strfmt "github.com/go-openapi/strfmt"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF8364 = 1
	codecSelferCcRAW364  = 0
	// ----- value types used ----
	codecSelferValueTypeArray364  = 10
	codecSelferValueTypeMap364    = 9
	codecSelferValueTypeString364 = 6
	codecSelferValueTypeInt364    = 2
	codecSelferValueTypeUint364   = 3
	codecSelferValueTypeFloat364  = 4
	codecSelferBitsize364         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct364 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer364 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_strfmt.Base64
		_ = v0
	}
}

func (x *DatasetRequestDataset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.Category != "", // Category
				x.Name != "",     // Name
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Category))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"category\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `category`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Category))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DatasetRequestDataset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DatasetRequestDataset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "category":
			if r.TryDecodeAsNil() {
				x.Category = ""
			} else {
				x.Category = (string)(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DatasetRequestDataset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Category = ""
	} else {
		x.Category = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkAgent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [9]bool{     // should field at this index be written?
				x.Architecture != "", // Architecture
				x.Cpuinfo != "",      // Cpuinfo
				true,                 // Frameworks
				x.Gpuinfo != "",      // Gpuinfo
				x.Hasgpu,             // Hasgpu
				x.Host != "",         // Host
				x.Hostname != "",     // Hostname
				len(x.Metadata) != 0, // Metadata
				x.Port != "",         // Port
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(9)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Architecture))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"architecture\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `architecture`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Architecture))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Cpuinfo))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"cpuinfo\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `cpuinfo`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Cpuinfo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Frameworks == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFrameworkManifest(([]*DlframeworkFrameworkManifest)(x.Frameworks), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"frameworks\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `frameworks`)
				}
				r.WriteMapElemValue()
				if x.Frameworks == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFrameworkManifest(([]*DlframeworkFrameworkManifest)(x.Frameworks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Gpuinfo))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"gpuinfo\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `gpuinfo`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Gpuinfo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeBool(bool(x.Hasgpu))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"hasgpu\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `hasgpu`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.Hasgpu))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"host\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `host`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Host))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"hostname\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `hostname`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Hostname))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Port))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"port\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `port`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Port))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkAgent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkAgent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = (string)(r.DecodeString())
			}
		case "cpuinfo":
			if r.TryDecodeAsNil() {
				x.Cpuinfo = ""
			} else {
				x.Cpuinfo = (string)(r.DecodeString())
			}
		case "frameworks":
			if r.TryDecodeAsNil() {
				x.Frameworks = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkFrameworkManifest((*[]*DlframeworkFrameworkManifest)(&x.Frameworks), d)
				}
			}
		case "gpuinfo":
			if r.TryDecodeAsNil() {
				x.Gpuinfo = ""
			} else {
				x.Gpuinfo = (string)(r.DecodeString())
			}
		case "hasgpu":
			if r.TryDecodeAsNil() {
				x.Hasgpu = false
			} else {
				x.Hasgpu = (bool)(r.DecodeBool())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = (string)(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = ""
			} else {
				x.Port = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkAgent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = (string)(r.DecodeString())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Cpuinfo = ""
	} else {
		x.Cpuinfo = (string)(r.DecodeString())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Frameworks = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkFrameworkManifest((*[]*DlframeworkFrameworkManifest)(&x.Frameworks), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Gpuinfo = ""
	} else {
		x.Gpuinfo = (string)(r.DecodeString())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hasgpu = false
	} else {
		x.Hasgpu = (bool)(r.DecodeBool())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = (string)(r.DecodeString())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = (string)(r.DecodeString())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Port = ""
	} else {
		x.Port = (string)(r.DecodeString())
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkAgents) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Agents == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkAgent(([]*DlframeworkAgent)(x.Agents), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"agents\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `agents`)
				}
				r.WriteMapElemValue()
				if x.Agents == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkAgent(([]*DlframeworkAgent)(x.Agents), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkAgents) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkAgents) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "agents":
			if r.TryDecodeAsNil() {
				x.Agents = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkAgent((*[]*DlframeworkAgent)(&x.Agents), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkAgents) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Agents = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkAgent((*[]*DlframeworkAgent)(&x.Agents), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkContainerHardware) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.CPU != "", // CPU
				x.Gpu != "", // Gpu
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.CPU))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"cpu\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `cpu`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.CPU))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Gpu))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"gpu\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `gpu`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Gpu))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkContainerHardware) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkContainerHardware) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "cpu":
			if r.TryDecodeAsNil() {
				x.CPU = ""
			} else {
				x.CPU = (string)(r.DecodeString())
			}
		case "gpu":
			if r.TryDecodeAsNil() {
				x.Gpu = ""
			} else {
				x.Gpu = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkContainerHardware) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CPU = ""
	} else {
		x.CPU = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Gpu = ""
	} else {
		x.Gpu = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkDatasetRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				x.Dataset != nil,   // Dataset
				x.Options != nil,   // Options
				x.Predictor != nil, // Predictor
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			var yyn3 bool
			if x.Dataset == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[0] {
						if x.Dataset == nil {
							r.EncodeNil()
						} else {
							x.Dataset.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"dataset\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `dataset`)
					}
					r.WriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if x.Dataset == nil {
							r.EncodeNil()
						} else {
							x.Dataset.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn6 bool
			if x.Options == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[1] {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"options\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `options`)
					}
					r.WriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn9 bool
			if x.Predictor == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[2] {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"predictor\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `predictor`)
					}
					r.WriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkDatasetRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkDatasetRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "dataset":
			if r.TryDecodeAsNil() {
				if true && x.Dataset != nil {
					x.Dataset = nil
				}
			} else {
				if x.Dataset == nil {
					x.Dataset = new(DatasetRequestDataset)
				}

				x.Dataset.CodecDecodeSelf(d)
			}
		case "options":
			if r.TryDecodeAsNil() {
				if true && x.Options != nil {
					x.Options = nil
				}
			} else {
				if x.Options == nil {
					x.Options = new(DlframeworkPredictionOptions)
				}

				x.Options.CodecDecodeSelf(d)
			}
		case "predictor":
			if r.TryDecodeAsNil() {
				if true && x.Predictor != nil {
					x.Predictor = nil
				}
			} else {
				if x.Predictor == nil {
					x.Predictor = new(DlframeworkPredictor)
				}

				x.Predictor.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkDatasetRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Dataset != nil {
			x.Dataset = nil
		}
	} else {
		if x.Dataset == nil {
			x.Dataset = new(DatasetRequestDataset)
		}

		x.Dataset.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Options != nil {
			x.Options = nil
		}
	} else {
		if x.Options == nil {
			x.Options = new(DlframeworkPredictionOptions)
		}

		x.Options.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Predictor != nil {
			x.Predictor = nil
		}
	} else {
		if x.Predictor == nil {
			x.Predictor = new(DlframeworkPredictor)
		}

		x.Predictor.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkExecutionOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [6]bool{     // should field at this index be written?
				x.CPUOptions != nil,     // CPUOptions
				len(x.DeviceCount) != 0, // DeviceCount
				x.GpuOptions != nil,     // GpuOptions
				x.TimeoutInMs != "",     // TimeoutInMs
				x.TraceID != nil,        // TraceID
				x.TraceLevel != "",      // TraceLevel
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if x.CPUOptions == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.EncFallback(x.CPUOptions)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `cpu_options`)
					r.WriteMapElemValue()
					if x.CPUOptions == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.EncFallback(x.CPUOptions)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if x.DeviceCount == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringInt32V(x.DeviceCount, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `device_count`)
					r.WriteMapElemValue()
					if x.DeviceCount == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringInt32V(x.DeviceCount, e)
						}
					}
				}
			}
			var yyn9 bool
			if x.GpuOptions == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[2] {
						if x.GpuOptions == nil {
							r.EncodeNil()
						} else {
							x.GpuOptions.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `gpu_options`)
					r.WriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.GpuOptions == nil {
							r.EncodeNil()
						} else {
							x.GpuOptions.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.TimeoutInMs))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `timeout_in_ms`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.TimeoutInMs))
					}
				}
			}
			var yyn15 bool
			if x.TraceID == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[4] {
						if x.TraceID == nil {
							r.EncodeNil()
						} else {
							x.TraceID.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `trace_id`)
					r.WriteMapElemValue()
					if yyn15 {
						r.EncodeNil()
					} else {
						if x.TraceID == nil {
							r.EncodeNil()
						} else {
							x.TraceID.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					x.TraceLevel.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `trace_level`)
					r.WriteMapElemValue()
					x.TraceLevel.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkExecutionOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkExecutionOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "cpu_options":
			if r.TryDecodeAsNil() {
				x.CPUOptions = nil
			} else {
				if false {
				} else {
					z.DecFallback(&x.CPUOptions, true)
				}
			}
		case "device_count":
			if r.TryDecodeAsNil() {
				x.DeviceCount = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringInt32X(&x.DeviceCount, d)
				}
			}
		case "gpu_options":
			if r.TryDecodeAsNil() {
				if true && x.GpuOptions != nil {
					x.GpuOptions = nil
				}
			} else {
				if x.GpuOptions == nil {
					x.GpuOptions = new(DlframeworkGPUOptions)
				}

				x.GpuOptions.CodecDecodeSelf(d)
			}
		case "timeout_in_ms":
			if r.TryDecodeAsNil() {
				x.TimeoutInMs = ""
			} else {
				x.TimeoutInMs = (string)(r.DecodeString())
			}
		case "trace_id":
			if r.TryDecodeAsNil() {
				if true && x.TraceID != nil {
					x.TraceID = nil
				}
			} else {
				if x.TraceID == nil {
					x.TraceID = new(DlframeworkTraceID)
				}

				x.TraceID.CodecDecodeSelf(d)
			}
		case "trace_level":
			if r.TryDecodeAsNil() {
				x.TraceLevel = ""
			} else {
				x.TraceLevel.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkExecutionOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CPUOptions = nil
	} else {
		if false {
		} else {
			z.DecFallback(&x.CPUOptions, true)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DeviceCount = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringInt32X(&x.DeviceCount, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.GpuOptions != nil {
			x.GpuOptions = nil
		}
	} else {
		if x.GpuOptions == nil {
			x.GpuOptions = new(DlframeworkGPUOptions)
		}

		x.GpuOptions.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TimeoutInMs = ""
	} else {
		x.TimeoutInMs = (string)(r.DecodeString())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.TraceID != nil {
			x.TraceID = nil
		}
	} else {
		if x.TraceID == nil {
			x.TraceID = new(DlframeworkTraceID)
		}

		x.TraceID.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TraceLevel = ""
	} else {
		x.TraceLevel.CodecDecodeSelf(d)
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkFeature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				x.Index != 0,         // Index
				len(x.Metadata) != 0, // Metadata
				x.Name != "",         // Name
				x.Probability != 0,   // Probability
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeInt(int64(x.Index))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"index\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `index`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.Index))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeFloat32(float32(x.Probability))
					}
				} else {
					r.EncodeFloat32(0)
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"probability\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `probability`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeFloat32(float32(x.Probability))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkFeature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkFeature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				x.Index = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "probability":
			if r.TryDecodeAsNil() {
				x.Probability = 0
			} else {
				x.Probability = (float32)(r.DecodeFloat32As64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkFeature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		x.Index = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Probability = 0
	} else {
		x.Probability = (float32)(r.DecodeFloat32As64())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkFeatureResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				true,                 // Features
				x.ID != "",           // ID
				x.InputID != "",      // InputID
				len(x.Metadata) != 0, // Metadata
				x.RequestID != "",    // RequestID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Features == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFeature(([]*DlframeworkFeature)(x.Features), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"features\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `features`)
				}
				r.WriteMapElemValue()
				if x.Features == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFeature(([]*DlframeworkFeature)(x.Features), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.InputID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `input_id`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.InputID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.RequestID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `request_id`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.RequestID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkFeatureResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkFeatureResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "features":
			if r.TryDecodeAsNil() {
				x.Features = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkFeature((*[]*DlframeworkFeature)(&x.Features), d)
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "input_id":
			if r.TryDecodeAsNil() {
				x.InputID = ""
			} else {
				x.InputID = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "request_id":
			if r.TryDecodeAsNil() {
				x.RequestID = ""
			} else {
				x.RequestID = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkFeatureResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Features = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkFeature((*[]*DlframeworkFeature)(&x.Features), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.InputID = ""
	} else {
		x.InputID = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestID = ""
	} else {
		x.RequestID = (string)(r.DecodeString())
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkFeaturesResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				x.ID != "",       // ID
				true,             // Responses
				x.TraceID != nil, // TraceID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Responses == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFeatureResponse(([]*DlframeworkFeatureResponse)(x.Responses), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"responses\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `responses`)
				}
				r.WriteMapElemValue()
				if x.Responses == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFeatureResponse(([]*DlframeworkFeatureResponse)(x.Responses), e)
					}
				}
			}
			var yyn9 bool
			if x.TraceID == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[2] {
						if x.TraceID == nil {
							r.EncodeNil()
						} else {
							x.TraceID.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `trace_id`)
					r.WriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.TraceID == nil {
							r.EncodeNil()
						} else {
							x.TraceID.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkFeaturesResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkFeaturesResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "responses":
			if r.TryDecodeAsNil() {
				x.Responses = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkFeatureResponse((*[]*DlframeworkFeatureResponse)(&x.Responses), d)
				}
			}
		case "trace_id":
			if r.TryDecodeAsNil() {
				if true && x.TraceID != nil {
					x.TraceID = nil
				}
			} else {
				if x.TraceID == nil {
					x.TraceID = new(DlframeworkTraceID)
				}

				x.TraceID.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkFeaturesResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Responses = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkFeatureResponse((*[]*DlframeworkFeatureResponse)(&x.Responses), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.TraceID != nil {
			x.TraceID = nil
		}
	} else {
		if x.TraceID == nil {
			x.TraceID = new(DlframeworkTraceID)
		}

		x.TraceID.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkFrameworkManifest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				len(x.Container) != 0, // Container
				x.Name != "",          // Name
				x.Version != "",       // Version
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if x.Container == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringDlframeworkContainerHardware((map[string]DlframeworkContainerHardware)(x.Container), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"container\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `container`)
					}
					r.WriteMapElemValue()
					if x.Container == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringDlframeworkContainerHardware((map[string]DlframeworkContainerHardware)(x.Container), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Version))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"version\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `version`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Version))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkFrameworkManifest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkFrameworkManifest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = nil
			} else {
				if false {
				} else {
					h.decMapstringDlframeworkContainerHardware((*map[string]DlframeworkContainerHardware)(&x.Container), d)
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "version":
			if r.TryDecodeAsNil() {
				x.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkFrameworkManifest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Container = nil
	} else {
		if false {
		} else {
			h.decMapstringDlframeworkContainerHardware((*map[string]DlframeworkContainerHardware)(&x.Container), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkFrameworkManifestsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Manifests == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFrameworkManifest(([]*DlframeworkFrameworkManifest)(x.Manifests), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"manifests\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `manifests`)
				}
				r.WriteMapElemValue()
				if x.Manifests == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkFrameworkManifest(([]*DlframeworkFrameworkManifest)(x.Manifests), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkFrameworkManifestsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkFrameworkManifestsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "manifests":
			if r.TryDecodeAsNil() {
				x.Manifests = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkFrameworkManifest((*[]*DlframeworkFrameworkManifest)(&x.Manifests), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkFrameworkManifestsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Manifests = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkFrameworkManifest((*[]*DlframeworkFrameworkManifest)(&x.Manifests), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkGPUOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				x.AllocatorType != "",              // AllocatorType
				x.ForceGpuCompatible,               // ForceGpuCompatible
				x.PerProcessGpuMemoryFraction != 0, // PerProcessGpuMemoryFraction
				x.VisibleDeviceList != "",          // VisibleDeviceList
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.AllocatorType))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `allocator_type`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.AllocatorType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeBool(bool(x.ForceGpuCompatible))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `force_gpu_compatible`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.ForceGpuCompatible))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeFloat64(float64(x.PerProcessGpuMemoryFraction))
					}
				} else {
					r.EncodeFloat64(0)
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `per_process_gpu_memory_fraction`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeFloat64(float64(x.PerProcessGpuMemoryFraction))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.VisibleDeviceList))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `visible_device_list`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.VisibleDeviceList))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkGPUOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkGPUOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "allocator_type":
			if r.TryDecodeAsNil() {
				x.AllocatorType = ""
			} else {
				x.AllocatorType = (string)(r.DecodeString())
			}
		case "force_gpu_compatible":
			if r.TryDecodeAsNil() {
				x.ForceGpuCompatible = false
			} else {
				x.ForceGpuCompatible = (bool)(r.DecodeBool())
			}
		case "per_process_gpu_memory_fraction":
			if r.TryDecodeAsNil() {
				x.PerProcessGpuMemoryFraction = 0
			} else {
				x.PerProcessGpuMemoryFraction = (float64)(r.DecodeFloat64())
			}
		case "visible_device_list":
			if r.TryDecodeAsNil() {
				x.VisibleDeviceList = ""
			} else {
				x.VisibleDeviceList = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkGPUOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AllocatorType = ""
	} else {
		x.AllocatorType = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ForceGpuCompatible = false
	} else {
		x.ForceGpuCompatible = (bool)(r.DecodeBool())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PerProcessGpuMemoryFraction = 0
	} else {
		x.PerProcessGpuMemoryFraction = (float64)(r.DecodeFloat64())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VisibleDeviceList = ""
	} else {
		x.VisibleDeviceList = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkImagesRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				true,               // Images
				x.Options != nil,   // Options
				x.Predictor != nil, // Predictor
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Images == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoImagesRequestImage(([]*ImagesRequestImage)(x.Images), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"images\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `images`)
				}
				r.WriteMapElemValue()
				if x.Images == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoImagesRequestImage(([]*ImagesRequestImage)(x.Images), e)
					}
				}
			}
			var yyn6 bool
			if x.Options == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[1] {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"options\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `options`)
					}
					r.WriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn9 bool
			if x.Predictor == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[2] {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"predictor\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `predictor`)
					}
					r.WriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkImagesRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkImagesRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoImagesRequestImage((*[]*ImagesRequestImage)(&x.Images), d)
				}
			}
		case "options":
			if r.TryDecodeAsNil() {
				if true && x.Options != nil {
					x.Options = nil
				}
			} else {
				if x.Options == nil {
					x.Options = new(DlframeworkPredictionOptions)
				}

				x.Options.CodecDecodeSelf(d)
			}
		case "predictor":
			if r.TryDecodeAsNil() {
				if true && x.Predictor != nil {
					x.Predictor = nil
				}
			} else {
				if x.Predictor == nil {
					x.Predictor = new(DlframeworkPredictor)
				}

				x.Predictor.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkImagesRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoImagesRequestImage((*[]*ImagesRequestImage)(&x.Images), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Options != nil {
			x.Options = nil
		}
	} else {
		if x.Options == nil {
			x.Options = new(DlframeworkPredictionOptions)
		}

		x.Options.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Predictor != nil {
			x.Predictor = nil
		}
	} else {
		if x.Predictor == nil {
			x.Predictor = new(DlframeworkPredictor)
		}

		x.Predictor.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkLogin) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.Password != "", // Password
				x.Username != "", // Username
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Password))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"password\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `password`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Password))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Username))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"username\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `username`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Username))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkLogin) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkLogin) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "password":
			if r.TryDecodeAsNil() {
				x.Password = ""
			} else {
				x.Password = (string)(r.DecodeString())
			}
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkLogin) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Password = ""
	} else {
		x.Password = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkLoginResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [1]bool{     // should field at this index be written?
				x.Outcome != "", // Outcome
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Outcome))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"outcome\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `outcome`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Outcome))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkLoginResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkLoginResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "outcome":
			if r.TryDecodeAsNil() {
				x.Outcome = ""
			} else {
				x.Outcome = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkLoginResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Outcome = ""
	} else {
		x.Outcome = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkModelManifest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [18]bool{    // should field at this index be written?
				x.AfterPostprocess != "",  // AfterPostprocess
				x.AfterPreprocess != "",   // AfterPreprocess
				len(x.Attributes) != 0,    // Attributes
				x.BeforePostprocess != "", // BeforePostprocess
				x.BeforePreprocess != "",  // BeforePreprocess
				len(x.Container) != 0,     // Container
				x.Description != "",       // Description
				x.Framework != nil,        // Framework
				x.Hidden,                  // Hidden
				true,                      // Inputs
				x.License != "",           // License
				x.Model != nil,            // Model
				x.Name != "",              // Name
				x.Output != nil,           // Output
				x.Postprocess != "",       // Postprocess
				x.Preprocess != "",        // Preprocess
				true,                      // Reference
				x.Version != "",           // Version
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(18)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.AfterPostprocess))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `after_postprocess`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.AfterPostprocess))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.AfterPreprocess))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `after_preprocess`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.AfterPreprocess))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if x.Attributes == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Attributes, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"attributes\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `attributes`)
					}
					r.WriteMapElemValue()
					if x.Attributes == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Attributes, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.BeforePostprocess))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `before_postprocess`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.BeforePostprocess))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.BeforePreprocess))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `before_preprocess`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.BeforePreprocess))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Container == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringDlframeworkContainerHardware((map[string]DlframeworkContainerHardware)(x.Container), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"container\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `container`)
					}
					r.WriteMapElemValue()
					if x.Container == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringDlframeworkContainerHardware((map[string]DlframeworkContainerHardware)(x.Container), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"description\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `description`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Description))
					}
				}
			}
			var yyn24 bool
			if x.Framework == nil {
				yyn24 = true
				goto LABEL24
			}
		LABEL24:
			if yyr2 || yy2arr2 {
				if yyn24 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[7] {
						if x.Framework == nil {
							r.EncodeNil()
						} else {
							x.Framework.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"framework\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `framework`)
					}
					r.WriteMapElemValue()
					if yyn24 {
						r.EncodeNil()
					} else {
						if x.Framework == nil {
							r.EncodeNil()
						} else {
							x.Framework.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if false {
					} else {
						r.EncodeBool(bool(x.Hidden))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"hidden\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `hidden`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.Hidden))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Inputs == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkModelManifestType(([]*DlframeworkModelManifestType)(x.Inputs), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"inputs\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `inputs`)
				}
				r.WriteMapElemValue()
				if x.Inputs == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkModelManifestType(([]*DlframeworkModelManifestType)(x.Inputs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.License))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"license\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `license`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.License))
					}
				}
			}
			var yyn36 bool
			if x.Model == nil {
				yyn36 = true
				goto LABEL36
			}
		LABEL36:
			if yyr2 || yy2arr2 {
				if yyn36 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[11] {
						if x.Model == nil {
							r.EncodeNil()
						} else {
							x.Model.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"model\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `model`)
					}
					r.WriteMapElemValue()
					if yyn36 {
						r.EncodeNil()
					} else {
						if x.Model == nil {
							r.EncodeNil()
						} else {
							x.Model.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Name))
					}
				}
			}
			var yyn42 bool
			if x.Output == nil {
				yyn42 = true
				goto LABEL42
			}
		LABEL42:
			if yyr2 || yy2arr2 {
				if yyn42 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[13] {
						if x.Output == nil {
							r.EncodeNil()
						} else {
							x.Output.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"output\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `output`)
					}
					r.WriteMapElemValue()
					if yyn42 {
						r.EncodeNil()
					} else {
						if x.Output == nil {
							r.EncodeNil()
						} else {
							x.Output.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[14] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Postprocess))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[14] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"postprocess\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `postprocess`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Postprocess))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[15] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Preprocess))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[15] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"preprocess\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `preprocess`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Preprocess))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Reference == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.Reference, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"reference\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `reference`)
				}
				r.WriteMapElemValue()
				if x.Reference == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.Reference, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[17] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Version))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[17] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"version\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `version`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Version))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkModelManifest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkModelManifest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "after_postprocess":
			if r.TryDecodeAsNil() {
				x.AfterPostprocess = ""
			} else {
				x.AfterPostprocess = (string)(r.DecodeString())
			}
		case "after_preprocess":
			if r.TryDecodeAsNil() {
				x.AfterPreprocess = ""
			} else {
				x.AfterPreprocess = (string)(r.DecodeString())
			}
		case "attributes":
			if r.TryDecodeAsNil() {
				x.Attributes = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Attributes, d)
				}
			}
		case "before_postprocess":
			if r.TryDecodeAsNil() {
				x.BeforePostprocess = ""
			} else {
				x.BeforePostprocess = (string)(r.DecodeString())
			}
		case "before_preprocess":
			if r.TryDecodeAsNil() {
				x.BeforePreprocess = ""
			} else {
				x.BeforePreprocess = (string)(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = nil
			} else {
				if false {
				} else {
					h.decMapstringDlframeworkContainerHardware((*map[string]DlframeworkContainerHardware)(&x.Container), d)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = (string)(r.DecodeString())
			}
		case "framework":
			if r.TryDecodeAsNil() {
				if true && x.Framework != nil {
					x.Framework = nil
				}
			} else {
				if x.Framework == nil {
					x.Framework = new(DlframeworkFrameworkManifest)
				}

				x.Framework.CodecDecodeSelf(d)
			}
		case "hidden":
			if r.TryDecodeAsNil() {
				x.Hidden = false
			} else {
				x.Hidden = (bool)(r.DecodeBool())
			}
		case "inputs":
			if r.TryDecodeAsNil() {
				x.Inputs = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkModelManifestType((*[]*DlframeworkModelManifestType)(&x.Inputs), d)
				}
			}
		case "license":
			if r.TryDecodeAsNil() {
				x.License = ""
			} else {
				x.License = (string)(r.DecodeString())
			}
		case "model":
			if r.TryDecodeAsNil() {
				if true && x.Model != nil {
					x.Model = nil
				}
			} else {
				if x.Model == nil {
					x.Model = new(ModelManifestModel)
				}

				x.Model.CodecDecodeSelf(d)
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "output":
			if r.TryDecodeAsNil() {
				if true && x.Output != nil {
					x.Output = nil
				}
			} else {
				if x.Output == nil {
					x.Output = new(DlframeworkModelManifestType)
				}

				x.Output.CodecDecodeSelf(d)
			}
		case "postprocess":
			if r.TryDecodeAsNil() {
				x.Postprocess = ""
			} else {
				x.Postprocess = (string)(r.DecodeString())
			}
		case "preprocess":
			if r.TryDecodeAsNil() {
				x.Preprocess = ""
			} else {
				x.Preprocess = (string)(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Reference, d)
				}
			}
		case "version":
			if r.TryDecodeAsNil() {
				x.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkModelManifest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AfterPostprocess = ""
	} else {
		x.AfterPostprocess = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AfterPreprocess = ""
	} else {
		x.AfterPreprocess = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Attributes = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Attributes, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BeforePostprocess = ""
	} else {
		x.BeforePostprocess = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BeforePreprocess = ""
	} else {
		x.BeforePreprocess = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Container = nil
	} else {
		if false {
		} else {
			h.decMapstringDlframeworkContainerHardware((*map[string]DlframeworkContainerHardware)(&x.Container), d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Framework != nil {
			x.Framework = nil
		}
	} else {
		if x.Framework == nil {
			x.Framework = new(DlframeworkFrameworkManifest)
		}

		x.Framework.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hidden = false
	} else {
		x.Hidden = (bool)(r.DecodeBool())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Inputs = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkModelManifestType((*[]*DlframeworkModelManifestType)(&x.Inputs), d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.License = ""
	} else {
		x.License = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Model != nil {
			x.Model = nil
		}
	} else {
		if x.Model == nil {
			x.Model = new(ModelManifestModel)
		}

		x.Model.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Output != nil {
			x.Output = nil
		}
	} else {
		if x.Output == nil {
			x.Output = new(DlframeworkModelManifestType)
		}

		x.Output.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Postprocess = ""
	} else {
		x.Postprocess = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Preprocess = ""
	} else {
		x.Preprocess = (string)(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Reference = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Reference, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkModelManifestType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				x.Description != "",    // Description
				len(x.Parameters) != 0, // Parameters
				x.Type != "",           // Type
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"description\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `description`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Description))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringTypeParameter((map[string]TypeParameter)(x.Parameters), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"parameters\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `parameters`)
					}
					r.WriteMapElemValue()
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringTypeParameter((map[string]TypeParameter)(x.Parameters), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"type\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `type`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Type))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkModelManifestType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkModelManifestType) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = (string)(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				x.Parameters = nil
			} else {
				if false {
				} else {
					h.decMapstringTypeParameter((*map[string]TypeParameter)(&x.Parameters), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkModelManifestType) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Parameters = nil
	} else {
		if false {
		} else {
			h.decMapstringTypeParameter((*map[string]TypeParameter)(&x.Parameters), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkModelManifestsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Manifests == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkModelManifest(([]*DlframeworkModelManifest)(x.Manifests), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"manifests\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `manifests`)
				}
				r.WriteMapElemValue()
				if x.Manifests == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDlframeworkModelManifest(([]*DlframeworkModelManifest)(x.Manifests), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkModelManifestsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkModelManifestsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "manifests":
			if r.TryDecodeAsNil() {
				x.Manifests = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDlframeworkModelManifest((*[]*DlframeworkModelManifest)(&x.Manifests), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkModelManifestsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Manifests = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDlframeworkModelManifest((*[]*DlframeworkModelManifest)(&x.Manifests), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkPredictionOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.Agent != "",             // Agent
				x.BatchSize != 0,          // BatchSize
				x.ExecutionOptions != nil, // ExecutionOptions
				x.FeatureLimit != 0,       // FeatureLimit
				x.RequestID != "",         // RequestID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Agent))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"agent\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `agent`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Agent))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeInt(int64(x.BatchSize))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `batch_size`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.BatchSize))
					}
				}
			}
			var yyn9 bool
			if x.ExecutionOptions == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[2] {
						if x.ExecutionOptions == nil {
							r.EncodeNil()
						} else {
							x.ExecutionOptions.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `execution_options`)
					r.WriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.ExecutionOptions == nil {
							r.EncodeNil()
						} else {
							x.ExecutionOptions.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeInt(int64(x.FeatureLimit))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `feature_limit`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.FeatureLimit))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.RequestID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `request_id`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.RequestID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkPredictionOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkPredictionOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "agent":
			if r.TryDecodeAsNil() {
				x.Agent = ""
			} else {
				x.Agent = (string)(r.DecodeString())
			}
		case "batch_size":
			if r.TryDecodeAsNil() {
				x.BatchSize = 0
			} else {
				x.BatchSize = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "execution_options":
			if r.TryDecodeAsNil() {
				if true && x.ExecutionOptions != nil {
					x.ExecutionOptions = nil
				}
			} else {
				if x.ExecutionOptions == nil {
					x.ExecutionOptions = new(DlframeworkExecutionOptions)
				}

				x.ExecutionOptions.CodecDecodeSelf(d)
			}
		case "feature_limit":
			if r.TryDecodeAsNil() {
				x.FeatureLimit = 0
			} else {
				x.FeatureLimit = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "request_id":
			if r.TryDecodeAsNil() {
				x.RequestID = ""
			} else {
				x.RequestID = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkPredictionOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Agent = ""
	} else {
		x.Agent = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BatchSize = 0
	} else {
		x.BatchSize = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.ExecutionOptions != nil {
			x.ExecutionOptions = nil
		}
	} else {
		if x.ExecutionOptions == nil {
			x.ExecutionOptions = new(DlframeworkExecutionOptions)
		}

		x.ExecutionOptions.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FeatureLimit = 0
	} else {
		x.FeatureLimit = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestID = ""
	} else {
		x.RequestID = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkPredictor) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.ID != "",       // ID
				x.TraceID != nil, // TraceID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			var yyn6 bool
			if x.TraceID == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[1] {
						if x.TraceID == nil {
							r.EncodeNil()
						} else {
							x.TraceID.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `trace_id`)
					r.WriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.TraceID == nil {
							r.EncodeNil()
						} else {
							x.TraceID.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkPredictor) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkPredictor) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "trace_id":
			if r.TryDecodeAsNil() {
				if true && x.TraceID != nil {
					x.TraceID = nil
				}
			} else {
				if x.TraceID == nil {
					x.TraceID = new(DlframeworkTraceID)
				}

				x.TraceID.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkPredictor) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.TraceID != nil {
			x.TraceID = nil
		}
	} else {
		if x.TraceID == nil {
			x.TraceID = new(DlframeworkTraceID)
		}

		x.TraceID.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkPredictorOpenRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.FrameworkName != "",    // FrameworkName
				x.FrameworkVersion != "", // FrameworkVersion
				x.ModelName != "",        // ModelName
				x.ModelVersion != "",     // ModelVersion
				x.Options != nil,         // Options
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.FrameworkName))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `framework_name`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.FrameworkName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.FrameworkVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `framework_version`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.FrameworkVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ModelName))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `model_name`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ModelName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ModelVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `model_version`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ModelVersion))
					}
				}
			}
			var yyn15 bool
			if x.Options == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[4] {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"options\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `options`)
					}
					r.WriteMapElemValue()
					if yyn15 {
						r.EncodeNil()
					} else {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkPredictorOpenRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkPredictorOpenRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "framework_name":
			if r.TryDecodeAsNil() {
				x.FrameworkName = ""
			} else {
				x.FrameworkName = (string)(r.DecodeString())
			}
		case "framework_version":
			if r.TryDecodeAsNil() {
				x.FrameworkVersion = ""
			} else {
				x.FrameworkVersion = (string)(r.DecodeString())
			}
		case "model_name":
			if r.TryDecodeAsNil() {
				x.ModelName = ""
			} else {
				x.ModelName = (string)(r.DecodeString())
			}
		case "model_version":
			if r.TryDecodeAsNil() {
				x.ModelVersion = ""
			} else {
				x.ModelVersion = (string)(r.DecodeString())
			}
		case "options":
			if r.TryDecodeAsNil() {
				if true && x.Options != nil {
					x.Options = nil
				}
			} else {
				if x.Options == nil {
					x.Options = new(DlframeworkPredictionOptions)
				}

				x.Options.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkPredictorOpenRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FrameworkName = ""
	} else {
		x.FrameworkName = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FrameworkVersion = ""
	} else {
		x.FrameworkVersion = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ModelName = ""
	} else {
		x.ModelName = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ModelVersion = ""
	} else {
		x.ModelVersion = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Options != nil {
			x.Options = nil
		}
	} else {
		if x.Options == nil {
			x.Options = new(DlframeworkPredictionOptions)
		}

		x.Options.CodecDecodeSelf(d)
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkResetRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.ID != "",         // ID
				x.Predictor != nil, // Predictor
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			var yyn6 bool
			if x.Predictor == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[1] {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"predictor\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `predictor`)
					}
					r.WriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkResetRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkResetRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "predictor":
			if r.TryDecodeAsNil() {
				if true && x.Predictor != nil {
					x.Predictor = nil
				}
			} else {
				if x.Predictor == nil {
					x.Predictor = new(DlframeworkPredictor)
				}

				x.Predictor.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkResetRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Predictor != nil {
			x.Predictor = nil
		}
	} else {
		if x.Predictor == nil {
			x.Predictor = new(DlframeworkPredictor)
		}

		x.Predictor.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkResetResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [1]bool{     // should field at this index be written?
				x.Predictor != nil, // Predictor
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			var yyn3 bool
			if x.Predictor == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[0] {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"predictor\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `predictor`)
					}
					r.WriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkResetResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkResetResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "predictor":
			if r.TryDecodeAsNil() {
				if true && x.Predictor != nil {
					x.Predictor = nil
				}
			} else {
				if x.Predictor == nil {
					x.Predictor = new(DlframeworkPredictor)
				}

				x.Predictor.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkResetResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Predictor != nil {
			x.Predictor = nil
		}
	} else {
		if x.Predictor == nil {
			x.Predictor = new(DlframeworkPredictor)
		}

		x.Predictor.CodecDecodeSelf(d)
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkSignup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.Affiliation != "", // Affiliation
				x.FirstName != "",   // FirstName
				x.LastName != "",    // LastName
				x.Password != "",    // Password
				x.Username != "",    // Username
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Affiliation))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"affiliation\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `affiliation`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Affiliation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.FirstName))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `first_name`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.FirstName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.LastName))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `last_name`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.LastName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Password))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"password\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `password`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Password))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Username))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"username\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `username`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Username))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkSignup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkSignup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "affiliation":
			if r.TryDecodeAsNil() {
				x.Affiliation = ""
			} else {
				x.Affiliation = (string)(r.DecodeString())
			}
		case "first_name":
			if r.TryDecodeAsNil() {
				x.FirstName = ""
			} else {
				x.FirstName = (string)(r.DecodeString())
			}
		case "last_name":
			if r.TryDecodeAsNil() {
				x.LastName = ""
			} else {
				x.LastName = (string)(r.DecodeString())
			}
		case "password":
			if r.TryDecodeAsNil() {
				x.Password = ""
			} else {
				x.Password = (string)(r.DecodeString())
			}
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkSignup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Affiliation = ""
	} else {
		x.Affiliation = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FirstName = ""
	} else {
		x.FirstName = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LastName = ""
	} else {
		x.LastName = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Password = ""
	} else {
		x.Password = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkSignupResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.Outcome != "",  // Outcome
				x.Username != "", // Username
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Outcome))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"outcome\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `outcome`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Outcome))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Username))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"username\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `username`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Username))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkSignupResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkSignupResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "outcome":
			if r.TryDecodeAsNil() {
				x.Outcome = ""
			} else {
				x.Outcome = (string)(r.DecodeString())
			}
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkSignupResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Outcome = ""
	} else {
		x.Outcome = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkTraceID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [1]bool{     // should field at this index be written?
				x.ID != "", // ID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkTraceID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkTraceID) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkTraceID) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DlframeworkUrlsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				x.Options != nil,   // Options
				x.Predictor != nil, // Predictor
				true,               // Urls
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			var yyn3 bool
			if x.Options == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[0] {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"options\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `options`)
					}
					r.WriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if x.Options == nil {
							r.EncodeNil()
						} else {
							x.Options.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn6 bool
			if x.Predictor == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[1] {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"predictor\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `predictor`)
					}
					r.WriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.Predictor == nil {
							r.EncodeNil()
						} else {
							x.Predictor.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Urls == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoUrlsRequestURL(([]*UrlsRequestURL)(x.Urls), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"urls\"")
				} else {
					r.EncodeString(codecSelferCcUTF8364, `urls`)
				}
				r.WriteMapElemValue()
				if x.Urls == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoUrlsRequestURL(([]*UrlsRequestURL)(x.Urls), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DlframeworkUrlsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *DlframeworkUrlsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "options":
			if r.TryDecodeAsNil() {
				if true && x.Options != nil {
					x.Options = nil
				}
			} else {
				if x.Options == nil {
					x.Options = new(DlframeworkPredictionOptions)
				}

				x.Options.CodecDecodeSelf(d)
			}
		case "predictor":
			if r.TryDecodeAsNil() {
				if true && x.Predictor != nil {
					x.Predictor = nil
				}
			} else {
				if x.Predictor == nil {
					x.Predictor = new(DlframeworkPredictor)
				}

				x.Predictor.CodecDecodeSelf(d)
			}
		case "urls":
			if r.TryDecodeAsNil() {
				x.Urls = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoUrlsRequestURL((*[]*UrlsRequestURL)(&x.Urls), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DlframeworkUrlsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Options != nil {
			x.Options = nil
		}
	} else {
		if x.Options == nil {
			x.Options = new(DlframeworkPredictionOptions)
		}

		x.Options.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Predictor != nil {
			x.Predictor = nil
		}
	} else {
		if x.Predictor == nil {
			x.Predictor = new(DlframeworkPredictor)
		}

		x.Predictor.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Urls = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoUrlsRequestURL((*[]*UrlsRequestURL)(&x.Urls), d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x ExecutionOptionsTraceLevel) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else {
		r.EncodeString(codecSelferCcUTF8364, string(x))
	}
}

func (x *ExecutionOptionsTraceLevel) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else {
		*x = (ExecutionOptionsTraceLevel)(r.DecodeString())
	}
}

func (x *ImagesRequestImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				len(x.Data) != 0, // Data
				x.ID != "",       // ID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Data)
						} else {
							h.encstrfmt_Base64((pkg1_strfmt.Base64)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"data\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `data`)
					}
					r.WriteMapElemValue()
					if x.Data == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Data)
						} else {
							h.encstrfmt_Base64((pkg1_strfmt.Base64)(x.Data), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ImagesRequestImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *ImagesRequestImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				if false {
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.Data)
				} else {
					h.decstrfmt_Base64((*pkg1_strfmt.Base64)(&x.Data), d)
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ImagesRequestImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		if false {
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.Data)
		} else {
			h.decstrfmt_Base64((*pkg1_strfmt.Base64)(&x.Data), d)
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ModelManifestModel) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [6]bool{     // should field at this index be written?
				x.BaseURL != "",         // BaseURL
				x.GraphChecksum != "",   // GraphChecksum
				x.GraphPath != "",       // GraphPath
				x.IsArchive,             // IsArchive
				x.WeightsChecksum != "", // WeightsChecksum
				x.WeightsPath != "",     // WeightsPath
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.BaseURL))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `base_url`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.BaseURL))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.GraphChecksum))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `graph_checksum`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.GraphChecksum))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.GraphPath))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `graph_path`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.GraphPath))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeBool(bool(x.IsArchive))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `is_archive`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.IsArchive))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.WeightsChecksum))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `weights_checksum`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.WeightsChecksum))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.WeightsPath))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF8364, `weights_path`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.WeightsPath))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ModelManifestModel) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *ModelManifestModel) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "base_url":
			if r.TryDecodeAsNil() {
				x.BaseURL = ""
			} else {
				x.BaseURL = (string)(r.DecodeString())
			}
		case "graph_checksum":
			if r.TryDecodeAsNil() {
				x.GraphChecksum = ""
			} else {
				x.GraphChecksum = (string)(r.DecodeString())
			}
		case "graph_path":
			if r.TryDecodeAsNil() {
				x.GraphPath = ""
			} else {
				x.GraphPath = (string)(r.DecodeString())
			}
		case "is_archive":
			if r.TryDecodeAsNil() {
				x.IsArchive = false
			} else {
				x.IsArchive = (bool)(r.DecodeBool())
			}
		case "weights_checksum":
			if r.TryDecodeAsNil() {
				x.WeightsChecksum = ""
			} else {
				x.WeightsChecksum = (string)(r.DecodeString())
			}
		case "weights_path":
			if r.TryDecodeAsNil() {
				x.WeightsPath = ""
			} else {
				x.WeightsPath = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ModelManifestModel) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BaseURL = ""
	} else {
		x.BaseURL = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GraphChecksum = ""
	} else {
		x.GraphChecksum = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GraphPath = ""
	} else {
		x.GraphPath = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.IsArchive = false
	} else {
		x.IsArchive = (bool)(r.DecodeBool())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WeightsChecksum = ""
	} else {
		x.WeightsChecksum = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WeightsPath = ""
	} else {
		x.WeightsPath = (string)(r.DecodeString())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *TypeParameter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [1]bool{     // should field at this index be written?
				x.Value != "", // Value
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"value\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `value`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Value))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *TypeParameter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *TypeParameter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *TypeParameter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *UrlsRequestURL) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if z.EncBinary() {
			z.EncBinaryMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.Data != "", // Data
				x.ID != "",   // ID
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Data))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"data\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `data`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.Data))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF8364, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"id\"")
					} else {
						r.EncodeString(codecSelferCcUTF8364, `id`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF8364, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UrlsRequestURL) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap364 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray364 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct364)
		}
	}
}

func (x *UrlsRequestURL) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = ""
			} else {
				x.Data = (string)(r.DecodeString())
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UrlsRequestURL) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Data = ""
	} else {
		x.Data = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer364) encSlicePtrtoDlframeworkFrameworkManifest(v []*DlframeworkFrameworkManifest, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoDlframeworkFrameworkManifest(v *[]*DlframeworkFrameworkManifest, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DlframeworkFrameworkManifest{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DlframeworkFrameworkManifest, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DlframeworkFrameworkManifest, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DlframeworkFrameworkManifest)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DlframeworkFrameworkManifest, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encSlicePtrtoDlframeworkAgent(v []*DlframeworkAgent, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoDlframeworkAgent(v *[]*DlframeworkAgent, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DlframeworkAgent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DlframeworkAgent, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DlframeworkAgent, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DlframeworkAgent)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DlframeworkAgent, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encSlicePtrtoDlframeworkFeature(v []*DlframeworkFeature, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoDlframeworkFeature(v *[]*DlframeworkFeature, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DlframeworkFeature{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DlframeworkFeature, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DlframeworkFeature, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DlframeworkFeature)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DlframeworkFeature, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encSlicePtrtoDlframeworkFeatureResponse(v []*DlframeworkFeatureResponse, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoDlframeworkFeatureResponse(v *[]*DlframeworkFeatureResponse, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DlframeworkFeatureResponse{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DlframeworkFeatureResponse, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DlframeworkFeatureResponse, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DlframeworkFeatureResponse)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DlframeworkFeatureResponse, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encMapstringDlframeworkContainerHardware(v map[string]DlframeworkContainerHardware, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeString(codecSelferCcUTF8364, string(yyk1))
		}
		r.WriteMapElemValue()
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	r.WriteMapEnd()
}

func (x codecSelfer364) decMapstringDlframeworkContainerHardware(v *map[string]DlframeworkContainerHardware, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 48)
		yyv1 = make(map[string]DlframeworkContainerHardware, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 DlframeworkContainerHardware
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = DlframeworkContainerHardware{}
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1.CodecDecodeSelf(d)
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = DlframeworkContainerHardware{}
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer364) encSlicePtrtoImagesRequestImage(v []*ImagesRequestImage, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoImagesRequestImage(v *[]*ImagesRequestImage, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ImagesRequestImage{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ImagesRequestImage, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*ImagesRequestImage, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ImagesRequestImage)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*ImagesRequestImage, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encSlicePtrtoDlframeworkModelManifestType(v []*DlframeworkModelManifestType, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoDlframeworkModelManifestType(v *[]*DlframeworkModelManifestType, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DlframeworkModelManifestType{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DlframeworkModelManifestType, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DlframeworkModelManifestType, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DlframeworkModelManifestType)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DlframeworkModelManifestType, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encMapstringTypeParameter(v map[string]TypeParameter, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeString(codecSelferCcUTF8364, string(yyk1))
		}
		r.WriteMapElemValue()
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	r.WriteMapEnd()
}

func (x codecSelfer364) decMapstringTypeParameter(v *map[string]TypeParameter, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[string]TypeParameter, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 TypeParameter
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TypeParameter{}
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1.CodecDecodeSelf(d)
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = TypeParameter{}
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer364) encSlicePtrtoDlframeworkModelManifest(v []*DlframeworkModelManifest, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoDlframeworkModelManifest(v *[]*DlframeworkModelManifest, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DlframeworkModelManifest{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DlframeworkModelManifest, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DlframeworkModelManifest, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DlframeworkModelManifest)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DlframeworkModelManifest, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encSlicePtrtoUrlsRequestURL(v []*UrlsRequestURL, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer364) decSlicePtrtoUrlsRequestURL(v *[]*UrlsRequestURL, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*UrlsRequestURL{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*UrlsRequestURL, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*UrlsRequestURL, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(UrlsRequestURL)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*UrlsRequestURL, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer364) encstrfmt_Base64(v pkg1_strfmt.Base64, e *codec1978.Encoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferCcRAW364, []byte(v))
}

func (x codecSelfer364) decstrfmt_Base64(v *pkg1_strfmt.Base64, d *codec1978.Decoder) {
	var h codecSelfer364
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*v = r.DecodeBytes(*((*[]byte)(v)), false)
}
