// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: features.proto

package dlframework

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FeatureType int32

const (
	FeatureType_UNKNOWN        FeatureType = 0
	FeatureType_IMAGE          FeatureType = 1
	FeatureType_CLASSIFICATION FeatureType = 2
	FeatureType_GEOLOCATION    FeatureType = 3
	FeatureType_REGION         FeatureType = 4
	FeatureType_TEXT           FeatureType = 5
	FeatureType_AUDIO          FeatureType = 6
	FeatureType_RAW            FeatureType = 100
)

var FeatureType_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "IMAGE",
	2:   "CLASSIFICATION",
	3:   "GEOLOCATION",
	4:   "REGION",
	5:   "TEXT",
	6:   "AUDIO",
	100: "RAW",
}
var FeatureType_value = map[string]int32{
	"UNKNOWN":        0,
	"IMAGE":          1,
	"CLASSIFICATION": 2,
	"GEOLOCATION":    3,
	"REGION":         4,
	"TEXT":           5,
	"AUDIO":          6,
	"RAW":            100,
}

func (x FeatureType) String() string {
	return proto.EnumName(FeatureType_name, int32(x))
}
func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{0}
}

type Image struct {
	// An id used to identify the output feature: maps to input_id for output
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	// The image is base64 encoded
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *Image) Reset()      { *m = Image{} }
func (*Image) ProtoMessage() {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Classification struct {
	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
}

func (m *Classification) Reset()      { *m = Classification{} }
func (*Classification) ProtoMessage() {}
func (*Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{1}
}
func (m *Classification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Classification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Classification.Merge(dst, src)
}
func (m *Classification) XXX_Size() int {
	return m.Size()
}
func (m *Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_Classification proto.InternalMessageInfo

func (m *Classification) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Classification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GeoLocation struct {
	Index     int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty" yaml:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty" yaml:"longitude,omitempty"`
}

func (m *GeoLocation) Reset()      { *m = GeoLocation{} }
func (*GeoLocation) ProtoMessage() {}
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{2}
}
func (m *GeoLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GeoLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoLocation.Merge(dst, src)
}
func (m *GeoLocation) XXX_Size() int {
	return m.Size()
}
func (m *GeoLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GeoLocation proto.InternalMessageInfo

func (m *GeoLocation) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GeoLocation) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoLocation) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Region struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" yaml:"format,omitempty"`
}

func (m *Region) Reset()      { *m = Region{} }
func (*Region) ProtoMessage() {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{3}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(dst, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Region) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type Text struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *Text) Reset()      { *m = Text{} }
func (*Text) ProtoMessage() {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{4}
}
func (m *Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(dst, src)
}
func (m *Text) XXX_Size() int {
	return m.Size()
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Audio struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" yaml:"format,omitempty"`
}

func (m *Audio) Reset()      { *m = Audio{} }
func (*Audio) ProtoMessage() {}
func (*Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{5}
}
func (m *Audio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audio.Merge(dst, src)
}
func (m *Audio) XXX_Size() int {
	return m.Size()
}
func (m *Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_Audio proto.InternalMessageInfo

func (m *Audio) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Audio) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type Raw struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" yaml:"format,omitempty"`
}

func (m *Raw) Reset()      { *m = Raw{} }
func (*Raw) ProtoMessage() {}
func (*Raw) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{6}
}
func (m *Raw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Raw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Raw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Raw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Raw.Merge(dst, src)
}
func (m *Raw) XXX_Size() int {
	return m.Size()
}
func (m *Raw) XXX_DiscardUnknown() {
	xxx_messageInfo_Raw.DiscardUnknown(m)
}

var xxx_messageInfo_Raw proto.InternalMessageInfo

func (m *Raw) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Raw) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type Feature struct {
	ID          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Type        FeatureType       `protobuf:"varint,3,opt,name=type,proto3,enum=mlmodelscope.org.dlframework.FeatureType" json:"type,omitempty" yaml:"type,omitempty"`
	Probability float32           `protobuf:"fixed32,4,opt,name=probability,proto3" json:"probability,omitempty" yaml:"probability,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" yaml:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Feature:
	//	*Feature_Classification
	//	*Feature_Image
	//	*Feature_Text
	//	*Feature_Region
	//	*Feature_Audio
	//	*Feature_Geolocation
	//	*Feature_Raw
	Feature isFeature_Feature `protobuf_oneof:"feature"`
}

func (m *Feature) Reset()      { *m = Feature{} }
func (*Feature) ProtoMessage() {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_features_08907a536a68b978, []int{7}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(dst, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

type isFeature_Feature interface {
	isFeature_Feature()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type Feature_Classification struct {
	Classification *Classification `protobuf:"bytes,6,opt,name=classification,oneof"`
}
type Feature_Image struct {
	Image *Image `protobuf:"bytes,7,opt,name=image,oneof"`
}
type Feature_Text struct {
	Text *Text `protobuf:"bytes,8,opt,name=text,oneof"`
}
type Feature_Region struct {
	Region *Region `protobuf:"bytes,9,opt,name=region,oneof"`
}
type Feature_Audio struct {
	Audio *Audio `protobuf:"bytes,10,opt,name=audio,oneof"`
}
type Feature_Geolocation struct {
	Geolocation *GeoLocation `protobuf:"bytes,11,opt,name=geolocation,oneof"`
}
type Feature_Raw struct {
	Raw *Raw `protobuf:"bytes,1000,opt,name=raw,oneof"`
}

func (*Feature_Classification) isFeature_Feature() {}
func (*Feature_Image) isFeature_Feature()          {}
func (*Feature_Text) isFeature_Feature()           {}
func (*Feature_Region) isFeature_Feature()         {}
func (*Feature_Audio) isFeature_Feature()          {}
func (*Feature_Geolocation) isFeature_Feature()    {}
func (*Feature_Raw) isFeature_Feature()            {}

func (m *Feature) GetFeature() isFeature_Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *Feature) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Feature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return FeatureType_UNKNOWN
}

func (m *Feature) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *Feature) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Feature) GetClassification() *Classification {
	if x, ok := m.GetFeature().(*Feature_Classification); ok {
		return x.Classification
	}
	return nil
}

func (m *Feature) GetImage() *Image {
	if x, ok := m.GetFeature().(*Feature_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Feature) GetText() *Text {
	if x, ok := m.GetFeature().(*Feature_Text); ok {
		return x.Text
	}
	return nil
}

func (m *Feature) GetRegion() *Region {
	if x, ok := m.GetFeature().(*Feature_Region); ok {
		return x.Region
	}
	return nil
}

func (m *Feature) GetAudio() *Audio {
	if x, ok := m.GetFeature().(*Feature_Audio); ok {
		return x.Audio
	}
	return nil
}

func (m *Feature) GetGeolocation() *GeoLocation {
	if x, ok := m.GetFeature().(*Feature_Geolocation); ok {
		return x.Geolocation
	}
	return nil
}

func (m *Feature) GetRaw() *Raw {
	if x, ok := m.GetFeature().(*Feature_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Feature) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Feature_OneofMarshaler, _Feature_OneofUnmarshaler, _Feature_OneofSizer, []interface{}{
		(*Feature_Classification)(nil),
		(*Feature_Image)(nil),
		(*Feature_Text)(nil),
		(*Feature_Region)(nil),
		(*Feature_Audio)(nil),
		(*Feature_Geolocation)(nil),
		(*Feature_Raw)(nil),
	}
}

func _Feature_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Feature)
	// feature
	switch x := m.Feature.(type) {
	case *Feature_Classification:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Classification); err != nil {
			return err
		}
	case *Feature_Image:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Feature_Text:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *Feature_Region:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Region); err != nil {
			return err
		}
	case *Feature_Audio:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case *Feature_Geolocation:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Geolocation); err != nil {
			return err
		}
	case *Feature_Raw:
		_ = b.EncodeVarint(1000<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Raw); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Feature.Feature has unexpected type %T", x)
	}
	return nil
}

func _Feature_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Feature)
	switch tag {
	case 6: // feature.classification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Classification)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Classification{msg}
		return true, err
	case 7: // feature.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Image)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Image{msg}
		return true, err
	case 8: // feature.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Text)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Text{msg}
		return true, err
	case 9: // feature.region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Region)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Region{msg}
		return true, err
	case 10: // feature.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Audio)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Audio{msg}
		return true, err
	case 11: // feature.geolocation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeoLocation)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Geolocation{msg}
		return true, err
	case 1000: // feature.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Raw)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Raw{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Feature_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Feature)
	// feature
	switch x := m.Feature.(type) {
	case *Feature_Classification:
		s := proto.Size(x.Classification)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Image:
		s := proto.Size(x.Image)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Text:
		s := proto.Size(x.Text)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Region:
		s := proto.Size(x.Region)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Audio:
		s := proto.Size(x.Audio)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Geolocation:
		s := proto.Size(x.Geolocation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Raw:
		s := proto.Size(x.Raw)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Image)(nil), "mlmodelscope.org.dlframework.Image")
	golang_proto.RegisterType((*Image)(nil), "mlmodelscope.org.dlframework.Image")
	proto.RegisterType((*Classification)(nil), "mlmodelscope.org.dlframework.Classification")
	golang_proto.RegisterType((*Classification)(nil), "mlmodelscope.org.dlframework.Classification")
	proto.RegisterType((*GeoLocation)(nil), "mlmodelscope.org.dlframework.GeoLocation")
	golang_proto.RegisterType((*GeoLocation)(nil), "mlmodelscope.org.dlframework.GeoLocation")
	proto.RegisterType((*Region)(nil), "mlmodelscope.org.dlframework.Region")
	golang_proto.RegisterType((*Region)(nil), "mlmodelscope.org.dlframework.Region")
	proto.RegisterType((*Text)(nil), "mlmodelscope.org.dlframework.Text")
	golang_proto.RegisterType((*Text)(nil), "mlmodelscope.org.dlframework.Text")
	proto.RegisterType((*Audio)(nil), "mlmodelscope.org.dlframework.Audio")
	golang_proto.RegisterType((*Audio)(nil), "mlmodelscope.org.dlframework.Audio")
	proto.RegisterType((*Raw)(nil), "mlmodelscope.org.dlframework.Raw")
	golang_proto.RegisterType((*Raw)(nil), "mlmodelscope.org.dlframework.Raw")
	proto.RegisterType((*Feature)(nil), "mlmodelscope.org.dlframework.Feature")
	golang_proto.RegisterType((*Feature)(nil), "mlmodelscope.org.dlframework.Feature")
	proto.RegisterMapType((map[string]string)(nil), "mlmodelscope.org.dlframework.Feature.MetadataEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "mlmodelscope.org.dlframework.Feature.MetadataEntry")
	proto.RegisterEnum("mlmodelscope.org.dlframework.FeatureType", FeatureType_name, FeatureType_value)
	golang_proto.RegisterEnum("mlmodelscope.org.dlframework.FeatureType", FeatureType_name, FeatureType_value)
}
func (this *Classification) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *GeoLocation) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Region) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Text) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Audio) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Raw) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Feature) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func FeaturesDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 7552 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x7d, 0x90, 0x1c, 0xc7,
		0x75, 0x1f, 0x66, 0xbf, 0x6e, 0xf7, 0xed, 0xdd, 0xde, 0x5c, 0xdf, 0x11, 0x58, 0x1c, 0xc1, 0x5b,
		0x70, 0x49, 0x0a, 0x20, 0x48, 0x1c, 0x10, 0x90, 0x04, 0x89, 0x85, 0x49, 0x66, 0xf7, 0x6e, 0x71,
		0x5c, 0xe8, 0xbe, 0x34, 0x77, 0x27, 0x7e, 0x58, 0xce, 0x64, 0x6e, 0xb6, 0x6f, 0x6f, 0x88, 0xdd,
		0x99, 0xe1, 0xcc, 0x2c, 0xc0, 0xa3, 0xe5, 0x2a, 0x5a, 0xf2, 0x47, 0x29, 0xae, 0x58, 0x8e, 0x9d,
		0x2a, 0xdb, 0x8a, 0xac, 0x48, 0x4e, 0x29, 0x72, 0x9c, 0x38, 0xb1, 0xf3, 0xa1, 0x58, 0x4e, 0xca,
		0x56, 0x52, 0x71, 0xe2, 0xe4, 0x8f, 0x44, 0xaa, 0xfc, 0xe3, 0x4a, 0xa5, 0x2e, 0x12, 0xa8, 0x2a,
		0x3b, 0x0e, 0x13, 0x2b, 0x17, 0xfe, 0xe1, 0x2a, 0xfd, 0x93, 0xea, 0xaf, 0xd9, 0x9e, 0xdd, 0xbd,
		0xdb, 0x39, 0x90, 0x80, 0xca, 0x7f, 0xe1, 0xe6, 0xf5, 0x7b, 0xbf, 0x7e, 0xfd, 0xfa, 0xf5, 0x7b,
		0xaf, 0xbb, 0x67, 0x16, 0xf0, 0x87, 0x69, 0x78, 0xa8, 0xe5, 0x38, 0xad, 0x36, 0xbe, 0x64, 0xb8,
		0xd6, 0xa5, 0xdd, 0x20, 0x70, 0xe7, 0x5d, 0xcf, 0x09, 0x1c, 0x04, 0x8c, 0x3c, 0x6f, 0xb8, 0x56,
		0x79, 0x0f, 0x52, 0xaf, 0x04, 0x81, 0x8b, 0x2e, 0x40, 0xda, 0xeb, 0xb6, 0xb1, 0x5f, 0x54, 0xce,
		0x26, 0xcf, 0xe7, 0xaf, 0xcc, 0xcc, 0xf7, 0x78, 0xe6, 0x09, 0x83, 0xd6, 0x6d, 0x63, 0x8d, 0xb1,
		0xa0, 0x3a, 0x94, 0x76, 0xba, 0xed, 0xf6, 0x9e, 0xde, 0xc4, 0xa6, 0xd3, 0xc4, 0xba, 0x87, 0x7d,
		0xec, 0xdd, 0xc6, 0x4d, 0x1d, 0xbf, 0xed, 0x1a, 0xb6, 0x6f, 0x39, 0x76, 0x31, 0x71, 0x56, 0x39,
		0x9f, 0xd5, 0xce, 0x50, 0xb6, 0x45, 0xca, 0xa5, 0x71, 0xa6, 0xba, 0xe0, 0x29, 0xff, 0xb7, 0x04,
		0x64, 0x05, 0x34, 0x9a, 0x85, 0xac, 0x8f, 0xdb, 0xd8, 0x0c, 0x1c, 0xaf, 0xa8, 0x9c, 0x55, 0xce,
		0xe7, 0xb4, 0xf0, 0x19, 0x21, 0x48, 0xb6, 0x70, 0x40, 0x31, 0x73, 0xaf, 0x9c, 0xd0, 0xc8, 0x03,
		0xa1, 0xb9, 0xdd, 0xa0, 0x98, 0x14, 0x34, 0xb7, 0x1b, 0xa0, 0x19, 0x48, 0xb9, 0x8e, 0x1f, 0x14,
		0x53, 0x9c, 0x48, 0x9f, 0x50, 0x11, 0x32, 0x4d, 0xdc, 0xc6, 0x01, 0x2e, 0xa6, 0x39, 0x9d, 0x3f,
		0xa3, 0x93, 0x90, 0x76, 0x8d, 0xc0, 0xdc, 0x2d, 0x66, 0x78, 0x03, 0x7b, 0x44, 0x08, 0x52, 0xdb,
		0x4e, 0x73, 0xaf, 0x38, 0x46, 0xf5, 0xa0, 0x7f, 0xa3, 0xe7, 0x21, 0x63, 0x76, 0xfd, 0xc0, 0xe9,
		0x14, 0xb3, 0x67, 0x95, 0xf3, 0xf9, 0x2b, 0x8f, 0xc8, 0x06, 0x5a, 0xa0, 0x2d, 0x64, 0x2c, 0xeb,
		0x46, 0x10, 0x60, 0xcf, 0x26, 0x9d, 0x30, 0x76, 0x54, 0x87, 0x69, 0xa3, 0xd9, 0xb4, 0x02, 0xcb,
		0xb1, 0x8d, 0xb6, 0xbe, 0x6d, 0xd9, 0x4d, 0xcb, 0x6e, 0xf9, 0xc5, 0xfc, 0x11, 0x66, 0x46, 0x3d,
		0x81, 0x1a, 0xe7, 0x47, 0x8f, 0xc1, 0x84, 0x87, 0x7d, 0xd7, 0xb1, 0x7d, 0xac, 0x53, 0xe5, 0xc6,
		0xa9, 0x72, 0xe3, 0x82, 0x58, 0x73, 0x9a, 0x7b, 0xb5, 0x1c, 0x8c, 0xb9, 0x4c, 0x81, 0xf2, 0x75,
		0x98, 0x1a, 0xd0, 0x8a, 0x0c, 0xec, 0x96, 0x65, 0x37, 0xb9, 0x81, 0xe9, 0xdf, 0x84, 0xe6, 0x1a,
		0xc1, 0x2e, 0xb3, 0xae, 0x46, 0xff, 0xae, 0x7d, 0x46, 0xf9, 0xa3, 0xbb, 0x73, 0xca, 0xb7, 0xee,
		0xce, 0x29, 0xdf, 0xb9, 0x3b, 0xa7, 0xfc, 0xc2, 0x7b, 0x73, 0x27, 0xbe, 0xf5, 0xde, 0xdc, 0x89,
		0x3f, 0x7e, 0x6f, 0xee, 0x04, 0x14, 0x4c, 0xa7, 0x23, 0x29, 0x5d, 0xcb, 0x51, 0x7c, 0xe2, 0x56,
		0xeb, 0xca, 0x1b, 0x55, 0xde, 0xd0, 0x72, 0xda, 0x86, 0xdd, 0x9a, 0x77, 0xbc, 0xd6, 0xa5, 0x16,
		0xb6, 0xa9, 0xd3, 0x5d, 0x62, 0x4d, 0x86, 0x6b, 0xf9, 0xd4, 0x1d, 0x0d, 0xdb, 0x76, 0x02, 0x83,
		0x0c, 0xd2, 0xbf, 0x2e, 0xfd, 0xfd, 0x17, 0x8a, 0xf2, 0xeb, 0x89, 0xd4, 0x52, 0x75, 0xbd, 0xb1,
		0x9d, 0xa1, 0x72, 0xcf, 0xc0, 0xbf, 0xad, 0xc0, 0x59, 0xee, 0xc7, 0x94, 0xb2, 0xdd, 0xdd, 0xb9,
		0xd4, 0xc4, 0xbe, 0xe9, 0x59, 0x6e, 0xe0, 0x78, 0xdc, 0xa5, 0x27, 0x79, 0xcf, 0x82, 0xa3, 0xbc,
		0x02, 0x53, 0x37, 0xac, 0x36, 0x5e, 0x0c, 0x19, 0x37, 0x70, 0x80, 0x5e, 0x80, 0xd4, 0x8e, 0xd5,
		0xc6, 0xdc, 0xc7, 0x1f, 0x9f, 0xef, 0x13, 0x9a, 0x8f, 0x4a, 0xd0, 0x51, 0x69, 0x54, 0xa2, 0xfc,
		0xbd, 0x14, 0x4c, 0x0f, 0x69, 0x25, 0xd6, 0xb3, 0x8d, 0x0e, 0x16, 0x16, 0x25, 0x7f, 0xa3, 0x22,
		0x99, 0x05, 0xf3, 0x96, 0xd1, 0xc2, 0xdc, 0xa8, 0xe2, 0x11, 0xcd, 0x01, 0x34, 0xb1, 0x8b, 0xed,
		0x26, 0xb6, 0xcd, 0xbd, 0x62, 0xf2, 0x6c, 0xf2, 0x7c, 0x4e, 0x93, 0x28, 0xe8, 0x29, 0x98, 0x72,
		0xbb, 0xdb, 0x6d, 0xcb, 0xd4, 0x25, 0x36, 0x38, 0x9b, 0x3c, 0x9f, 0xd6, 0x54, 0xd6, 0xb0, 0xd8,
		0x63, 0x3e, 0x07, 0x93, 0x77, 0xb0, 0x71, 0x4b, 0x66, 0xcd, 0x53, 0xd6, 0x02, 0x21, 0x4b, 0x8c,
		0x0b, 0x30, 0xde, 0xc1, 0xbe, 0x6f, 0xb4, 0xb0, 0x1e, 0xec, 0xb9, 0xb8, 0x98, 0xa2, 0xa3, 0x3f,
		0x3b, 0x30, 0xfa, 0xfe, 0x91, 0xe7, 0xb9, 0xd4, 0xe6, 0x9e, 0x8b, 0x51, 0x15, 0x72, 0xd8, 0xee,
		0x76, 0x18, 0x42, 0xfa, 0x10, 0xfb, 0xd5, 0xed, 0x6e, 0xa7, 0x1f, 0x25, 0x4b, 0xc4, 0x38, 0xc4,
		0x18, 0x09, 0x01, 0x96, 0x89, 0x8b, 0x19, 0x0a, 0x70, 0x6e, 0x00, 0x60, 0x83, 0xb5, 0xf7, 0x63,
		0x08, 0x39, 0xb4, 0x00, 0x39, 0xfc, 0x76, 0x80, 0x59, 0x8c, 0x19, 0xa3, 0x20, 0x4f, 0x0c, 0x99,
		0x45, 0xdc, 0x6e, 0xf6, 0x43, 0xf4, 0xe4, 0xd0, 0x55, 0x18, 0x73, 0x5c, 0xea, 0x6d, 0x7c, 0x2d,
		0x9f, 0x19, 0xea, 0x08, 0x6b, 0x8c, 0x47, 0x13, 0xcc, 0xa8, 0x01, 0xaa, 0xef, 0x74, 0x3d, 0x13,
		0xeb, 0x34, 0xea, 0x59, 0xf6, 0x8e, 0x53, 0xcc, 0x51, 0x80, 0xd2, 0xe0, 0x40, 0x28, 0xe3, 0x82,
		0xd3, 0xc4, 0x0d, 0x7b, 0xc7, 0xd1, 0x0a, 0x7e, 0xe4, 0x19, 0x9d, 0x84, 0x8c, 0xbf, 0x67, 0x07,
		0xc6, 0xdb, 0x7c, 0x19, 0xf3, 0xa7, 0xf2, 0x37, 0x32, 0x30, 0x19, 0xc7, 0xc5, 0xae, 0x43, 0x7a,
		0x87, 0x8c, 0xb2, 0x98, 0x38, 0x8e, 0x0d, 0x98, 0x4c, 0xd4, 0x88, 0x99, 0x7b, 0x34, 0x62, 0x15,
		0xf2, 0x36, 0xf6, 0x03, 0xdc, 0x64, 0x1e, 0x91, 0x8c, 0xe9, 0x53, 0xc0, 0x84, 0x06, 0x5d, 0x2a,
		0x75, 0x4f, 0x2e, 0xf5, 0x1a, 0x4c, 0x86, 0x2a, 0xe9, 0x9e, 0x61, 0xb7, 0x84, 0x6f, 0x5e, 0x1a,
		0xa5, 0xc9, 0x7c, 0x5d, 0xc8, 0x69, 0x44, 0x4c, 0x2b, 0xe0, 0xc8, 0x33, 0x5a, 0x04, 0x70, 0x6c,
		0xec, 0xec, 0x90, 0x1c, 0xd7, 0x2e, 0x66, 0x0f, 0xb1, 0xd2, 0x1a, 0x61, 0x19, 0xb0, 0x92, 0xc3,
		0xa8, 0x66, 0x1b, 0x5d, 0xeb, 0xb9, 0xda, 0xd8, 0x21, 0x9e, 0xb2, 0xc2, 0x16, 0xd9, 0x80, 0xb7,
		0x6d, 0x41, 0x21, 0xcc, 0xab, 0x6c, 0x64, 0x39, 0xaa, 0xc4, 0xfc, 0xc8, 0x91, 0x89, 0x4c, 0xcb,
		0x06, 0x36, 0xe1, 0xc9, 0x8f, 0x3c, 0x8f, 0x30, 0x58, 0xea, 0x56, 0x40, 0xa3, 0xd0, 0xb8, 0x20,
		0xae, 0x1a, 0x1d, 0x3c, 0xfb, 0x0e, 0x14, 0xa2, 0xe6, 0x41, 0x33, 0x90, 0xf6, 0x03, 0xc3, 0x0b,
		0xa8, 0x17, 0xa6, 0x35, 0xf6, 0x80, 0x54, 0x48, 0x62, 0xbb, 0x49, 0xa3, 0x5c, 0x5a, 0x23, 0x7f,
		0xa2, 0xbf, 0xda, 0x1b, 0x70, 0x92, 0x0e, 0xf8, 0x63, 0x83, 0x33, 0x1a, 0x41, 0xee, 0x1f, 0xf7,
		0xec, 0xf3, 0x30, 0x11, 0x19, 0x40, 0xdc, 0xae, 0xcb, 0x9f, 0x86, 0x87, 0x86, 0x42, 0xa3, 0xd7,
		0x60, 0xa6, 0x6b, 0x5b, 0x76, 0x80, 0x3d, 0xd7, 0xc3, 0xc4, 0x63, 0x59, 0x57, 0xc5, 0x3f, 0x19,
		0x3b, 0xc4, 0xe7, 0xb6, 0x64, 0x6e, 0x86, 0xa2, 0x4d, 0x77, 0x07, 0x89, 0x17, 0x72, 0xd9, 0x3f,
		0x1d, 0x53, 0xdf, 0x7d, 0xf7, 0xdd, 0x77, 0x13, 0xe5, 0x5f, 0xc9, 0xc0, 0xcc, 0xb0, 0x35, 0x33,
		0x74, 0xf9, 0x9e, 0x84, 0x8c, 0xdd, 0xed, 0x6c, 0x63, 0x8f, 0x1a, 0x29, 0xad, 0xf1, 0x27, 0x54,
		0x85, 0x74, 0xdb, 0xd8, 0xc6, 0x6d, 0x5a, 0xc1, 0x14, 0xae, 0x3c, 0x15, 0x6b, 0x55, 0xce, 0x2f,
		0x13, 0x11, 0x8d, 0x49, 0xa2, 0x97, 0x20, 0xc5, 0x43, 0x34, 0x41, 0xb8, 0x10, 0x0f, 0x81, 0xac,
		0x25, 0x8d, 0xca, 0xa1, 0x87, 0x21, 0x47, 0xfe, 0x65, 0xbe, 0x91, 0x61, 0x85, 0x18, 0x21, 0x10,
		0xbf, 0x20, 0x45, 0x1a, 0x5d, 0x26, 0x4d, 0x2c, 0x52, 0x5b, 0xf8, 0x4c, 0x1c, 0xab, 0x89, 0x77,
		0x8c, 0x6e, 0x3b, 0xd0, 0x6f, 0x1b, 0xed, 0x2e, 0xe6, 0xd5, 0xd3, 0x38, 0x27, 0x7e, 0x92, 0xd0,
		0x50, 0x09, 0xf2, 0x6c, 0x55, 0x59, 0x76, 0x13, 0xbf, 0x4d, 0xa3, 0x67, 0x5a, 0x63, 0x0b, 0xad,
		0x41, 0x28, 0xa4, 0xfb, 0x37, 0x7d, 0xc7, 0x16, 0xae, 0x49, 0xbb, 0x20, 0x04, 0xda, 0xfd, 0xf3,
		0xfd, 0x81, 0xfb, 0x91, 0xe1, 0xc3, 0xeb, 0xf7, 0xa9, 0xf2, 0xd7, 0x13, 0x90, 0xa2, 0xf1, 0x62,
		0x12, 0xf2, 0x9b, 0xaf, 0xaf, 0xd7, 0xf5, 0xc5, 0xb5, 0xad, 0xda, 0x72, 0x5d, 0x55, 0x50, 0x01,
		0x80, 0x12, 0x6e, 0x2c, 0xaf, 0x55, 0x37, 0xd5, 0x44, 0xf8, 0xdc, 0x58, 0xdd, 0xbc, 0xfa, 0xac,
		0x9a, 0x0c, 0x05, 0xb6, 0x18, 0x21, 0x25, 0x33, 0x3c, 0x73, 0x45, 0x4d, 0x23, 0x15, 0xc6, 0x19,
		0x40, 0xe3, 0xb5, 0xfa, 0xe2, 0xd5, 0x67, 0xd5, 0x4c, 0x94, 0xf2, 0xcc, 0x15, 0x75, 0x0c, 0x4d,
		0x40, 0x8e, 0x52, 0x6a, 0x6b, 0x6b, 0xcb, 0x6a, 0x36, 0xc4, 0xdc, 0xd8, 0xd4, 0x1a, 0xab, 0x4b,
		0x6a, 0x2e, 0xc4, 0x5c, 0xd2, 0xd6, 0xb6, 0xd6, 0x55, 0x08, 0x11, 0x56, 0xea, 0x1b, 0x1b, 0xd5,
		0xa5, 0xba, 0x9a, 0x0f, 0x39, 0x6a, 0xaf, 0x6f, 0xd6, 0x37, 0xd4, 0xf1, 0x88, 0x5a, 0xcf, 0x5c,
		0x51, 0x27, 0xc2, 0x2e, 0xea, 0xab, 0x5b, 0x2b, 0x6a, 0x01, 0x4d, 0xc1, 0x04, 0xeb, 0x42, 0x28,
		0x31, 0xd9, 0x47, 0xba, 0xfa, 0xac, 0xaa, 0xf6, 0x14, 0x61, 0x28, 0x53, 0x11, 0xc2, 0xd5, 0x67,
		0x55, 0x54, 0x5e, 0x80, 0x34, 0xf5, 0x2e, 0x84, 0xa0, 0xb0, 0x5c, 0xad, 0xd5, 0x97, 0xf5, 0xb5,
		0xf5, 0xcd, 0xc6, 0xda, 0x6a, 0x75, 0x59, 0x55, 0x7a, 0x34, 0xad, 0xfe, 0x89, 0xad, 0x86, 0x56,
		0x5f, 0x54, 0x13, 0x32, 0x6d, 0xbd, 0x5e, 0xdd, 0xac, 0x2f, 0xaa, 0xc9, 0xb2, 0x09, 0x33, 0xc3,
		0xe2, 0xe4, 0xd0, 0x95, 0x21, 0x4d, 0x71, 0xe2, 0x90, 0x29, 0xa6, 0x58, 0x03, 0x53, 0xfc, 0x5e,
		0x02, 0xa6, 0x87, 0xe4, 0x8a, 0xa1, 0x9d, 0xbc, 0x0c, 0x69, 0xe6, 0xa2, 0x2c, 0x7b, 0x3e, 0x39,
		0x34, 0xe9, 0x50, 0x87, 0x1d, 0xc8, 0xa0, 0x54, 0x4e, 0xae, 0x20, 0x92, 0x87, 0x54, 0x10, 0x04,
		0x62, 0x20, 0xa6, 0xff, 0xd8, 0x40, 0x4c, 0x67, 0x69, 0xef, 0x6a, 0x9c, 0xb4, 0x47, 0x69, 0xc7,
		0x8b, 0xed, 0xe9, 0x21, 0xb1, 0xfd, 0x3a, 0x4c, 0x0d, 0x00, 0xc5, 0x8e, 0xb1, 0x9f, 0x55, 0xa0,
		0x78, 0x98, 0x71, 0x46, 0x44, 0xba, 0x44, 0x24, 0xd2, 0x5d, 0xef, 0xb7, 0xe0, 0xa3, 0x87, 0x4f,
		0xc2, 0xc0, 0x5c, 0x7f, 0x4d, 0x81, 0x93, 0xc3, 0x2b, 0xc5, 0xa1, 0x3a, 0xbc, 0x04, 0x99, 0x0e,
		0x0e, 0x76, 0x1d, 0x51, 0x2d, 0x7d, 0x6c, 0x48, 0x0e, 0x26, 0xcd, 0xfd, 0x93, 0xcd, 0xa5, 0xe4,
		0x24, 0x9e, 0x3c, 0xac, 0xdc, 0x63, 0xda, 0x0c, 0x68, 0xfa, 0xb9, 0x04, 0x3c, 0x34, 0x14, 0x7c,
		0xa8, 0xa2, 0x8f, 0x00, 0x58, 0xb6, 0xdb, 0x0d, 0x58, 0x45, 0xc4, 0x02, 0x6c, 0x8e, 0x52, 0x68,
		0xf0, 0x22, 0xc1, 0xb3, 0x1b, 0x84, 0xed, 0x74, 0xeb, 0xab, 0x01, 0x23, 0x51, 0x86, 0x17, 0x7a,
		0x8a, 0xa6, 0xa8, 0xa2, 0x73, 0x87, 0x8c, 0x74, 0xc0, 0x31, 0x2f, 0x83, 0x6a, 0xb6, 0x2d, 0x6c,
		0x07, 0xba, 0x1f, 0x78, 0xd8, 0xe8, 0x58, 0x76, 0x8b, 0x66, 0x90, 0x6c, 0x25, 0xbd, 0x63, 0xb4,
		0x7d, 0xac, 0x4d, 0xb2, 0xe6, 0x0d, 0xd1, 0x4a, 0x24, 0xa8, 0x03, 0x79, 0x92, 0x44, 0x26, 0x22,
		0xc1, 0x9a, 0x43, 0x89, 0xf2, 0x37, 0xb2, 0x90, 0x97, 0xea, 0x6a, 0xf4, 0x28, 0x8c, 0xbf, 0x69,
		0xdc, 0x36, 0x74, 0xb1, 0x57, 0x62, 0x96, 0xc8, 0x13, 0xda, 0x3a, 0xdf, 0x2f, 0x5d, 0x86, 0x19,
		0xca, 0xe2, 0x74, 0x03, 0xec, 0xe9, 0x66, 0xdb, 0xf0, 0x7d, 0x6a, 0xb4, 0x2c, 0x65, 0x45, 0xa4,
		0x6d, 0x8d, 0x34, 0x2d, 0x88, 0x16, 0xf4, 0x1c, 0x4c, 0x53, 0x89, 0x4e, 0xb7, 0x1d, 0x58, 0x6e,
		0x1b, 0xeb, 0x64, 0xf7, 0xe6, 0xd3, 0x4c, 0x12, 0x6a, 0x36, 0x45, 0x38, 0x56, 0x38, 0x03, 0xd1,
		0xc8, 0x47, 0x8b, 0xf0, 0x08, 0x15, 0x6b, 0x61, 0x1b, 0x7b, 0x46, 0x80, 0x75, 0xfc, 0x56, 0xd7,
		0x68, 0xfb, 0xba, 0x61, 0x37, 0xf5, 0x5d, 0xc3, 0xdf, 0x2d, 0xce, 0x10, 0x80, 0x5a, 0xa2, 0xa8,
		0x68, 0xa7, 0x09, 0xe3, 0x12, 0xe7, 0xab, 0x53, 0xb6, 0xaa, 0xdd, 0x7c, 0xc5, 0xf0, 0x77, 0x51,
		0x05, 0x4e, 0x52, 0x14, 0x3f, 0xf0, 0x2c, 0xbb, 0xa5, 0x9b, 0xbb, 0xd8, 0xbc, 0xa5, 0x77, 0x83,
		0x9d, 0x17, 0x8a, 0x0f, 0xcb, 0xfd, 0x53, 0x0d, 0x37, 0x28, 0xcf, 0x02, 0x61, 0xd9, 0x0a, 0x76,
		0x5e, 0x40, 0x1b, 0x30, 0x4e, 0x26, 0xa3, 0x63, 0xbd, 0x83, 0xf5, 0x1d, 0xc7, 0xa3, 0xa9, 0xb1,
		0x30, 0x24, 0x34, 0x49, 0x16, 0x9c, 0x5f, 0xe3, 0x02, 0x2b, 0x4e, 0x13, 0x57, 0xd2, 0x1b, 0xeb,
		0xf5, 0xfa, 0xa2, 0x96, 0x17, 0x28, 0x37, 0x1c, 0x8f, 0x38, 0x54, 0xcb, 0x09, 0x0d, 0x9c, 0x67,
		0x0e, 0xd5, 0x72, 0x84, 0x79, 0x9f, 0x83, 0x69, 0xd3, 0x64, 0x63, 0xb6, 0x4c, 0x9d, 0xef, 0xb1,
		0xfc, 0xa2, 0x1a, 0x31, 0x96, 0x69, 0x2e, 0x31, 0x06, 0xee, 0xe3, 0x3e, 0xba, 0x06, 0x0f, 0xf5,
		0x8c, 0x25, 0x0b, 0x4e, 0x0d, 0x8c, 0xb2, 0x5f, 0xf4, 0x39, 0x98, 0x76, 0xf7, 0x06, 0x05, 0x51,
		0xa4, 0x47, 0x77, 0xaf, 0x5f, 0xec, 0x79, 0x98, 0x71, 0x77, 0xdd, 0x41, 0xb9, 0x0b, 0xb2, 0x1c,
		0x72, 0x77, 0xdd, 0x7e, 0xc1, 0x27, 0xe8, 0x86, 0xdb, 0xc3, 0xa6, 0x11, 0xe0, 0x66, 0xf1, 0x94,
		0xcc, 0x2e, 0x35, 0xa0, 0x4b, 0xa0, 0x9a, 0xa6, 0x8e, 0x6d, 0x63, 0xbb, 0x8d, 0x75, 0xc3, 0xc3,
		0xb6, 0xe1, 0x17, 0x4b, 0x32, 0x73, 0xc1, 0x34, 0xeb, 0xb4, 0xb5, 0x4a, 0x1b, 0xd1, 0x05, 0x98,
		0x72, 0xb6, 0xdf, 0x34, 0x99, 0x4b, 0xea, 0xae, 0x87, 0x77, 0xac, 0xb7, 0x8b, 0x8f, 0x53, 0xfb,
		0x4e, 0x92, 0x06, 0xea, 0x90, 0xeb, 0x94, 0x8c, 0x9e, 0x04, 0xd5, 0xf4, 0x77, 0x0d, 0xcf, 0xa5,
		0x31, 0xd9, 0x77, 0x0d, 0x13, 0x17, 0x9f, 0x60, 0xac, 0x8c, 0xbe, 0x2a, 0xc8, 0x64, 0x49, 0xf8,
		0x77, 0xac, 0x9d, 0x40, 0x20, 0x9e, 0x63, 0x4b, 0x82, 0xd2, 0x38, 0xda, 0x79, 0x50, 0x89, 0x29,
		0x22, 0x1d, 0x9f, 0xa7, 0x6c, 0x05, 0x77, 0xd7, 0x95, 0xfb, 0x7d, 0x0c, 0x26, 0x08, 0x67, 0xaf,
		0xd3, 0x27, 0x59, 0x41, 0xe6, 0xee, 0x4a, 0x3d, 0xde, 0xb7, 0xda, 0xb8, 0x5c, 0x81, 0x71, 0xd9,
		0x3f, 0x51, 0x0e, 0x98, 0x87, 0xaa, 0x0a, 0x29, 0x56, 0x16, 0xd6, 0x16, 0x49, 0x99, 0xf1, 0x46,
		0x5d, 0x4d, 0x90, 0x72, 0x67, 0xb9, 0xb1, 0x59, 0xd7, 0xb5, 0xad, 0xd5, 0xcd, 0xc6, 0x4a, 0x5d,
		0x4d, 0x4a, 0x75, 0xf5, 0xcd, 0x54, 0xf6, 0x63, 0xea, 0xb9, 0xf2, 0xb7, 0x13, 0x50, 0x88, 0x6e,
		0x94, 0xd0, 0x8f, 0xc0, 0x29, 0x71, 0xaa, 0xe1, 0xe3, 0x40, 0xbf, 0x63, 0x79, 0x74, 0xe1, 0x74,
		0x0c, 0x96, 0xc4, 0xc2, 0xa9, 0x9b, 0xe1, 0x5c, 0x1b, 0x38, 0x78, 0xd5, 0xf2, 0xc8, 0xb2, 0xe8,
		0x18, 0x01, 0x5a, 0x86, 0x92, 0xed, 0xe8, 0x7e, 0x60, 0xd8, 0x4d, 0xc3, 0x6b, 0xea, 0xbd, 0xf3,
		0x24, 0xdd, 0x30, 0x4d, 0xec, 0xfb, 0x0e, 0x4b, 0x58, 0x21, 0xca, 0x19, 0xdb, 0xd9, 0xe0, 0xcc,
		0xbd, 0x48, 0x5e, 0xe5, 0xac, 0x7d, 0x6e, 0x96, 0x3c, 0xcc, 0xcd, 0x1e, 0x86, 0x5c, 0xc7, 0x70,
		0x75, 0x6c, 0x07, 0x1e, 0x3b, 0x5c, 0xcc, 0x6a, 0xd9, 0x8e, 0xe1, 0xd6, 0xc9, 0xf3, 0x03, 0xd9,
		0xa5, 0xdc, 0x4c, 0x65, 0xb3, 0x6a, 0xee, 0x66, 0x2a, 0x9b, 0x53, 0xa1, 0x7c, 0x37, 0x09, 0xe3,
		0x72, 0xb9, 0x4c, 0x76, 0x1f, 0x26, 0xcd, 0x2c, 0x0a, 0x8d, 0x3d, 0x8f, 0x1d, 0x59, 0x5c, 0xcf,
		0x2f, 0x90, 0x94, 0x53, 0xc9, 0xb0, 0x22, 0x56, 0x63, 0x92, 0x24, 0xdd, 0x93, 0x68, 0x83, 0x9b,
		0xfc, 0x00, 0x98, 0x3f, 0xa1, 0x25, 0xc8, 0xbc, 0xe9, 0x53, 0xec, 0x0c, 0xc5, 0x7e, 0xfc, 0x68,
		0xec, 0x9b, 0x1b, 0x14, 0x3c, 0x77, 0x73, 0x43, 0x5f, 0x5d, 0xd3, 0x56, 0xaa, 0xcb, 0x1a, 0x17,
		0x47, 0xa7, 0x21, 0xd5, 0x36, 0xde, 0xd9, 0x8b, 0x26, 0x27, 0x4a, 0x8a, 0x3b, 0x09, 0xa7, 0x21,
		0x75, 0x07, 0x1b, 0xb7, 0xa2, 0x29, 0x81, 0x92, 0xee, 0xe3, 0x62, 0xb8, 0x04, 0x69, 0x6a, 0x2f,
		0x04, 0xc0, 0x2d, 0xa6, 0x9e, 0x40, 0x59, 0x48, 0x2d, 0xac, 0x69, 0x64, 0x41, 0xa8, 0x30, 0xce,
		0xa8, 0xfa, 0x7a, 0xa3, 0xbe, 0x50, 0x57, 0x13, 0xe5, 0xe7, 0x20, 0xc3, 0x8c, 0x40, 0x16, 0x4b,
		0x68, 0x06, 0xf5, 0x04, 0x7f, 0xe4, 0x18, 0x8a, 0x68, 0xdd, 0x5a, 0xa9, 0xd5, 0x35, 0x35, 0x11,
		0x9d, 0xea, 0x94, 0x9a, 0x2e, 0xfb, 0x30, 0x2e, 0xd7, 0xcb, 0x0f, 0x66, 0x2f, 0xfc, 0x4d, 0x05,
		0xf2, 0x52, 0xfd, 0x4b, 0x0a, 0x17, 0xa3, 0xdd, 0x76, 0xee, 0xe8, 0x46, 0xdb, 0x32, 0x7c, 0xee,
		0x1a, 0x40, 0x49, 0x55, 0x42, 0x89, 0x3b, 0x75, 0x0f, 0x68, 0x89, 0xa4, 0xd5, 0x4c, 0xf9, 0x4b,
		0x0a, 0xa8, 0xfd, 0x05, 0x68, 0x9f, 0x9a, 0xca, 0x0f, 0x53, 0xcd, 0xf2, 0x17, 0x15, 0x28, 0x44,
		0xab, 0xce, 0x3e, 0xf5, 0x1e, 0xfd, 0xa1, 0xaa, 0xf7, 0x9d, 0x04, 0x4c, 0x44, 0x6a, 0xcd, 0xb8,
		0xda, 0xbd, 0x05, 0x53, 0x56, 0x13, 0x77, 0x5c, 0x27, 0xc0, 0xb6, 0xb9, 0xa7, 0xb7, 0xf1, 0x6d,
		0xdc, 0x2e, 0x96, 0x69, 0xd0, 0xb8, 0x74, 0x74, 0x35, 0x3b, 0xdf, 0xe8, 0xc9, 0x2d, 0x13, 0xb1,
		0xca, 0x74, 0x63, 0xb1, 0xbe, 0xb2, 0xbe, 0xb6, 0x59, 0x5f, 0x5d, 0x78, 0x5d, 0xdf, 0x5a, 0xfd,
		0xf8, 0xea, 0xda, 0xab, 0xab, 0x9a, 0x6a, 0xf5, 0xb1, 0xdd, 0xc7, 0x65, 0xbf, 0x0e, 0x6a, 0xbf,
		0x52, 0xe8, 0x14, 0x0c, 0x53, 0x4b, 0x3d, 0x81, 0xa6, 0x61, 0x72, 0x75, 0x4d, 0xdf, 0x68, 0x2c,
		0xd6, 0xf5, 0xfa, 0x8d, 0x1b, 0xf5, 0x85, 0xcd, 0x0d, 0x76, 0x3e, 0x11, 0x72, 0x6f, 0x46, 0x16,
		0x78, 0xf9, 0x0b, 0x49, 0x98, 0x1e, 0xa2, 0x09, 0xaa, 0xf2, 0x9d, 0x05, 0xdb, 0xec, 0x5c, 0x8c,
		0xa3, 0xfd, 0x3c, 0x29, 0x08, 0xd6, 0x0d, 0x2f, 0xe0, 0x1b, 0x91, 0x27, 0x81, 0x58, 0xc9, 0x0e,
		0xac, 0x1d, 0x0b, 0x7b, 0xfc, 0x38, 0x87, 0x6d, 0x37, 0x26, 0x7b, 0x74, 0x76, 0xa2, 0xf3, 0x34,
		0x20, 0xd7, 0xf1, 0xad, 0xc0, 0xba, 0x8d, 0x75, 0xcb, 0x16, 0x67, 0x3f, 0x64, 0xfb, 0x91, 0xd2,
		0x54, 0xd1, 0xd2, 0xb0, 0x83, 0x90, 0xdb, 0xc6, 0x2d, 0xa3, 0x8f, 0x9b, 0x04, 0xf3, 0xa4, 0xa6,
		0x8a, 0x96, 0x90, 0xfb, 0x51, 0x18, 0x6f, 0x3a, 0x5d, 0x52, 0x93, 0x31, 0x3e, 0x92, 0x3b, 0x14,
		0x2d, 0xcf, 0x68, 0x21, 0x0b, 0xaf, 0xb6, 0x7b, 0x87, 0x4e, 0xe3, 0x5a, 0x9e, 0xd1, 0x18, 0xcb,
		0x39, 0x98, 0x34, 0x5a, 0x2d, 0x8f, 0x80, 0x0b, 0x20, 0xb6, 0x7f, 0x28, 0x84, 0x64, 0xca, 0x38,
		0x7b, 0x13, 0xb2, 0xc2, 0x0e, 0x24, 0x55, 0x13, 0x4b, 0xe8, 0x2e, 0xdb, 0x14, 0x27, 0xce, 0xe7,
		0xb4, 0xac, 0x2d, 0x1a, 0x1f, 0x85, 0x71, 0xcb, 0xd7, 0x7b, 0x67, 0xe8, 0x89, 0xb3, 0x89, 0xf3,
		0x59, 0x2d, 0x6f, 0xf9, 0xe1, 0xf9, 0x63, 0xf9, 0x6b, 0x09, 0x28, 0x44, 0xef, 0x00, 0xd0, 0x22,
		0x64, 0xdb, 0x8e, 0x49, 0xaf, 0xb9, 0xf8, 0x05, 0xd4, 0xf9, 0x11, 0xd7, 0x06, 0xf3, 0xcb, 0x9c,
		0x5f, 0x0b, 0x25, 0x67, 0xff, 0xb3, 0x02, 0x59, 0x41, 0x46, 0x27, 0xf9, 0xdd, 0x1d, 0x81, 0x4b,
		0xd7, 0x12, 0xaa, 0xc2, 0xee, 0xef, 0x08, 0xdd, 0x77, 0x0d, 0x9b, 0xba, 0x00, 0xa7, 0x93, 0x67,
		0x32, 0xaf, 0x6d, 0x6c, 0x34, 0xe9, 0xe6, 0xc4, 0xe9, 0x74, 0xb0, 0x1d, 0xf8, 0x62, 0x5e, 0x39,
		0x7d, 0x81, 0x93, 0xd1, 0x53, 0x30, 0x15, 0x78, 0x86, 0xd5, 0x8e, 0xf0, 0xd2, 0x8b, 0x55, 0x4d,
		0x15, 0x0d, 0x21, 0x73, 0x05, 0x4e, 0x0b, 0xdc, 0x26, 0x0e, 0x0c, 0x73, 0x17, 0x37, 0x7b, 0x42,
		0x19, 0x7a, 0x08, 0x71, 0x8a, 0x33, 0x2c, 0xf2, 0x76, 0x21, 0x5b, 0xfe, 0xb6, 0x02, 0x53, 0x62,
		0x3b, 0xd5, 0x0c, 0x8d, 0xb5, 0x02, 0xd0, 0xbb, 0x15, 0xe4, 0xe6, 0x1a, 0x74, 0xe5, 0x01, 0xb9,
		0xf9, 0x6a, 0x28, 0xa4, 0x49, 0x00, 0xb3, 0x1d, 0x80, 0x5e, 0xcb, 0xa1, 0x66, 0x2b, 0x41, 0x9e,
		0x5f, 0xf0, 0xd0, 0x5b, 0x42, 0xb6, 0x01, 0x07, 0x46, 0x22, 0xfb, 0x2e, 0x34, 0x03, 0xe9, 0x6d,
		0xdc, 0xb2, 0x6c, 0x7e, 0x6c, 0xcb, 0x1e, 0xc4, 0x31, 0x49, 0x2a, 0x3c, 0x26, 0xa9, 0x7d, 0x5e,
		0x81, 0x69, 0xe9, 0x9e, 0x54, 0xe8, 0x5b, 0x53, 0xfb, 0x4e, 0x01, 0xfc, 0x57, 0x94, 0x37, 0x5e,
		0x6a, 0x59, 0xc1, 0x6e, 0x77, 0x7b, 0xde, 0x74, 0x3a, 0x97, 0xd8, 0xbd, 0x69, 0xef, 0x9a, 0x93,
		0xfe, 0x61, 0x5e, 0x6c, 0x61, 0xfb, 0x62, 0xcb, 0x91, 0x2e, 0x3d, 0xaf, 0xf7, 0xfe, 0xa4, 0x17,
		0xa6, 0xc9, 0xa5, 0xf5, 0xda, 0x6f, 0x26, 0x66, 0x97, 0x58, 0x77, 0xeb, 0xc2, 0x3c, 0x1a, 0xde,
		0x69, 0x63, 0x93, 0x0c, 0x19, 0xfe, 0x4d, 0x02, 0xce, 0x48, 0x2f, 0x03, 0x48, 0x37, 0xae, 0x83,
		0xef, 0x04, 0xcc, 0x0e, 0x7f, 0x6d, 0x60, 0x76, 0xe4, 0x2d, 0x6c, 0xe5, 0xe3, 0x90, 0x22, 0xfc,
		0x68, 0xc4, 0xb9, 0x43, 0xf1, 0xb7, 0xff, 0xd3, 0xbf, 0x2e, 0xd3, 0x03, 0x8a, 0xe1, 0xf7, 0xdf,
		0x14, 0xa4, 0xf6, 0x33, 0xf1, 0x2f, 0xa1, 0xd5, 0xde, 0xe4, 0xfa, 0x1f, 0xdd, 0x5d, 0x74, 0xff,
		0x45, 0xf4, 0xef, 0x3f, 0x05, 0x17, 0x23, 0x93, 0xd5, 0x72, 0x7a, 0xb6, 0x20, 0x4f, 0x02, 0xbc,
		0xe5, 0x70, 0xa3, 0xe6, 0x42, 0x6a, 0x0c, 0xe3, 0xad, 0xc2, 0x34, 0x67, 0xd6, 0xe9, 0xb5, 0x18,
		0xdb, 0xdc, 0xa1, 0x23, 0x8f, 0x16, 0x8b, 0xbf, 0xf3, 0x3d, 0x5a, 0x2d, 0x69, 0x53, 0x5c, 0x94,
		0xb4, 0xb1, 0xfd, 0x5f, 0x45, 0x83, 0x87, 0x22, 0x78, 0x2c, 0x26, 0x62, 0x6f, 0x04, 0xe2, 0x1f,
		0x72, 0xc4, 0x69, 0x09, 0x71, 0x83, 0x8b, 0x56, 0x16, 0x60, 0xe2, 0x38, 0x58, 0xff, 0x9e, 0x63,
		0x8d, 0x63, 0x19, 0x64, 0x09, 0x26, 0x29, 0x08, 0x7b, 0x41, 0x82, 0x26, 0x9c, 0xa3, 0x61, 0xfe,
		0xc3, 0xf7, 0x58, 0x90, 0x2a, 0x10, 0xb1, 0x85, 0x50, 0xaa, 0x52, 0x01, 0x7a, 0x13, 0xd8, 0xc4,
		0x66, 0x7b, 0x04, 0xc2, 0x1f, 0x71, 0x45, 0x42, 0xfe, 0xca, 0x27, 0x61, 0x86, 0xfc, 0x4d, 0xf3,
		0x81, 0xac, 0xc9, 0xe8, 0x73, 0xc8, 0xe2, 0xb7, 0x3f, 0xcb, 0xe2, 0xe0, 0x74, 0x08, 0x20, 0xe9,
		0x24, 0xcd, 0x62, 0x0b, 0x07, 0x01, 0xf6, 0x7c, 0xdd, 0x68, 0x0f, 0x53, 0x4f, 0x3a, 0xc8, 0x29,
		0xfe, 0xea, 0xfb, 0xd1, 0x59, 0x5c, 0x62, 0x92, 0xd5, 0x76, 0xbb, 0xb2, 0x05, 0xa7, 0x86, 0x78,
		0x45, 0x0c, 0xcc, 0x2f, 0x70, 0xcc, 0x99, 0x01, 0xcf, 0x20, 0xb0, 0xeb, 0x20, 0xe8, 0xe1, 0x5c,
		0xc6, 0xc0, 0xfc, 0x3b, 0x1c, 0x13, 0x71, 0x59, 0x31, 0xa5, 0x04, 0xf1, 0x26, 0x4c, 0xdd, 0xc6,
		0xde, 0xb6, 0xe3, 0xf3, 0xc3, 0xb3, 0x18, 0x70, 0x5f, 0xe4, 0x70, 0x93, 0x5c, 0x90, 0x9e, 0xa6,
		0x11, 0xac, 0x6b, 0x90, 0xdd, 0x31, 0x4c, 0x1c, 0x03, 0xe2, 0xd7, 0x38, 0xc4, 0x18, 0xe1, 0x27,
		0xa2, 0x55, 0x18, 0x6f, 0x39, 0xbc, 0x24, 0x18, 0x2d, 0xfe, 0x25, 0x2e, 0x9e, 0x17, 0x32, 0x1c,
		0xc2, 0x75, 0xdc, 0x6e, 0x9b, 0xd4, 0x0b, 0xa3, 0x21, 0xfe, 0xae, 0x80, 0x10, 0x32, 0x1c, 0xe2,
		0x18, 0x66, 0xfd, 0xb2, 0x80, 0xf0, 0x25, 0x7b, 0xbe, 0x0c, 0x79, 0xc7, 0x6e, 0xef, 0x39, 0x76,
		0x1c, 0x25, 0xbe, 0xc2, 0x11, 0x80, 0x8b, 0x10, 0x80, 0xeb, 0x90, 0x8b, 0x3b, 0x11, 0x5f, 0x7d,
		0x5f, 0x2c, 0x0f, 0x31, 0x03, 0x4b, 0x30, 0x29, 0x02, 0x94, 0xe5, 0xd8, 0x31, 0x20, 0xfe, 0x3e,
		0x87, 0x28, 0x48, 0x62, 0x7c, 0x18, 0x01, 0xf6, 0x83, 0x16, 0x8e, 0x03, 0xf2, 0x35, 0x31, 0x0c,
		0x2e, 0xc2, 0x4d, 0xb9, 0x8d, 0x6d, 0x73, 0x37, 0x1e, 0xc2, 0x6f, 0x08, 0x53, 0x0a, 0x19, 0x02,
		0xb1, 0x00, 0x13, 0x1d, 0xc3, 0xf3, 0x77, 0x8d, 0x76, 0xac, 0xe9, 0xf8, 0x07, 0x1c, 0x63, 0x3c,
		0x14, 0xe2, 0x16, 0xe9, 0xda, 0xc7, 0x81, 0xf9, 0x4d, 0x61, 0x11, 0x49, 0x8c, 0x2f, 0x3d, 0x3f,
		0xa0, 0x27, 0x8d, 0xc7, 0x41, 0xfb, 0x87, 0x62, 0xe9, 0x31, 0xd9, 0x15, 0x19, 0xf1, 0x3a, 0xe4,
		0x7c, 0xeb, 0x9d, 0x58, 0x30, 0xff, 0x48, 0xcc, 0x34, 0x15, 0x20, 0xc2, 0xaf, 0xc3, 0xe9, 0xa1,
		0x69, 0x22, 0x06, 0xd8, 0x6f, 0x71, 0xb0, 0x93, 0x43, 0x52, 0x05, 0x0f, 0x09, 0xc7, 0x85, 0xfc,
		0xc7, 0x22, 0x24, 0xe0, 0x3e, 0xac, 0x75, 0xb2, 0x49, 0xf3, 0x8d, 0x9d, 0xe3, 0x59, 0xed, 0x9f,
		0x08, 0xab, 0x31, 0xd9, 0x88, 0xd5, 0x36, 0xe1, 0x24, 0x47, 0x3c, 0xde, 0xbc, 0xfe, 0xb6, 0x08,
		0xac, 0x4c, 0x7a, 0x2b, 0x3a, 0xbb, 0x3f, 0x0a, 0xb3, 0xa1, 0x39, 0xc5, 0x6e, 0xc0, 0xd7, 0x3b,
		0x86, 0x1b, 0x03, 0xf9, 0x77, 0x38, 0xb2, 0x88, 0xf8, 0xe1, 0x76, 0xc2, 0x5f, 0x31, 0x5c, 0x02,
		0xfe, 0x1a, 0x14, 0x05, 0x78, 0xd7, 0xf6, 0xb0, 0xe9, 0xb4, 0x6c, 0xeb, 0x1d, 0xdc, 0x8c, 0x01,
		0xfd, 0x4f, 0xfb, 0xa6, 0x6a, 0x4b, 0x12, 0x27, 0xc8, 0x0d, 0x50, 0xc3, 0x5a, 0x45, 0xb7, 0x3a,
		0xae, 0xe3, 0x05, 0x23, 0x10, 0xff, 0x99, 0x98, 0xa9, 0x50, 0xae, 0x41, 0xc5, 0x2a, 0x75, 0x28,
		0xd0, 0xc7, 0xb8, 0x2e, 0xf9, 0xcf, 0x39, 0xd0, 0x44, 0x4f, 0x8a, 0x07, 0x0e, 0xd3, 0xe9, 0xb8,
		0x86, 0x17, 0x27, 0xfe, 0xfd, 0x0b, 0x11, 0x38, 0xb8, 0x08, 0x0f, 0x1c, 0xc1, 0x9e, 0x8b, 0x49,
		0xb6, 0x8f, 0x81, 0xf0, 0x75, 0x11, 0x38, 0x84, 0x0c, 0x87, 0x10, 0x05, 0x43, 0x0c, 0x88, 0x7f,
		0x29, 0x20, 0x84, 0x0c, 0x81, 0xf8, 0x44, 0x2f, 0xd1, 0x7a, 0xb8, 0x65, 0xf9, 0x81, 0xc7, 0xf6,
		0x20, 0x47, 0x43, 0xfd, 0xee, 0xfb, 0xd1, 0x22, 0x4c, 0x93, 0x44, 0x49, 0x24, 0xe2, 0x67, 0xda,
		0x74, 0x8b, 0x3a, 0x5a, 0xb1, 0x6f, 0x88, 0x48, 0x24, 0x89, 0x11, 0xdd, 0xa4, 0x0a, 0x91, 0x98,
		0xdd, 0x24, 0x1b, 0xb3, 0x18, 0x70, 0xbf, 0xd7, 0xa7, 0xdc, 0x86, 0x90, 0x25, 0x98, 0x52, 0xfd,
		0xd3, 0xb5, 0x6f, 0xe1, 0xbd, 0x58, 0xde, 0xf9, 0xaf, 0xfa, 0xea, 0x9f, 0x2d, 0x26, 0xc9, 0x62,
		0xc8, 0x64, 0x5f, 0x3d, 0x85, 0x46, 0xbd, 0x43, 0x55, 0xfc, 0xc9, 0x0f, 0xf8, 0x78, 0xa3, 0xe5,
		0x54, 0x65, 0x99, 0x38, 0x79, 0xb4, 0xe8, 0x19, 0x0d, 0xf6, 0xd9, 0x0f, 0x42, 0x3f, 0x8f, 0xd4,
		0x3c, 0x95, 0x1b, 0x30, 0x11, 0x29, 0x78, 0x46, 0x43, 0xfd, 0x14, 0x87, 0x1a, 0x97, 0xeb, 0x9d,
		0xca, 0x73, 0x90, 0x22, 0xc5, 0xcb, 0x68, 0xf1, 0x9f, 0xe6, 0xe2, 0x94, 0xbd, 0xf2, 0x22, 0x64,
		0x45, 0xd1, 0x32, 0x5a, 0xf4, 0x67, 0xb8, 0x68, 0x28, 0x42, 0xc4, 0x45, 0xc1, 0x32, 0x5a, 0xfc,
		0x67, 0x85, 0xb8, 0x10, 0x21, 0xe2, 0xf1, 0x4d, 0xf8, 0xcd, 0x9f, 0x4b, 0xf1, 0xa4, 0x23, 0x6c,
		0x77, 0x1d, 0xc6, 0x78, 0xa5, 0x32, 0x5a, 0xfa, 0x73, 0xbc, 0x73, 0x21, 0x51, 0x79, 0x1e, 0xd2,
		0x31, 0x0d, 0xfe, 0x37, 0xb9, 0x28, 0xe3, 0xaf, 0x2c, 0x40, 0x5e, 0xaa, 0x4e, 0x46, 0x8b, 0xff,
		0x3c, 0x17, 0x97, 0xa5, 0x88, 0xea, 0xbc, 0x3a, 0x19, 0x0d, 0xf0, 0x79, 0xa1, 0x3a, 0x97, 0x20,
		0x66, 0x13, 0x85, 0xc9, 0x68, 0xe9, 0x5f, 0x10, 0x56, 0x17, 0x22, 0x95, 0x97, 0x21, 0x17, 0x26,
		0x9b, 0xd1, 0xf2, 0x7f, 0x8b, 0xcb, 0xf7, 0x64, 0x88, 0x05, 0xa4, 0x64, 0x37, 0x1a, 0xe2, 0x17,
		0x85, 0x05, 0x24, 0x29, 0xb2, 0x8c, 0xfa, 0x0b, 0x98, 0xd1, 0x48, 0xbf, 0x24, 0x96, 0x51, 0x5f,
		0xfd, 0x42, 0x66, 0x93, 0xc6, 0xfc, 0xd1, 0x10, 0x7f, 0x5b, 0xcc, 0x26, 0xe5, 0x27, 0x6a, 0xf4,
		0x57, 0x04, 0xa3, 0x31, 0x7e, 0x59, 0xa8, 0xd1, 0x57, 0x10, 0x54, 0xd6, 0x01, 0x0d, 0x56, 0x03,
		0xa3, 0xf1, 0x7e, 0x85, 0xe3, 0x4d, 0x0d, 0x14, 0x03, 0x95, 0x57, 0xe1, 0xe4, 0xf0, 0x4a, 0x60,
		0x34, 0xea, 0xaf, 0x7e, 0xd0, 0xb7, 0x77, 0x93, 0x0b, 0x81, 0xca, 0x66, 0x2f, 0xa5, 0xc8, 0x55,
		0xc0, 0x68, 0xd8, 0x2f, 0x7c, 0x10, 0x0d, 0xdc, 0x72, 0x11, 0x50, 0xa9, 0x02, 0xf4, 0x12, 0xf0,
		0x68, 0xac, 0x2f, 0x72, 0x2c, 0x49, 0x88, 0x2c, 0x0d, 0x9e, 0x7f, 0x47, 0xcb, 0xff, 0x9a, 0x58,
		0x1a, 0x5c, 0x82, 0x2c, 0x0d, 0x91, 0x7a, 0x47, 0x4b, 0x7f, 0x49, 0x2c, 0x0d, 0x21, 0x42, 0x3c,
		0x5b, 0xca, 0x6e, 0xa3, 0x11, 0xbe, 0x22, 0x3c, 0x5b, 0x92, 0xaa, 0xac, 0xc2, 0xd4, 0x40, 0x42,
		0x1c, 0x0d, 0xf5, 0xeb, 0x1c, 0x4a, 0xed, 0xcf, 0x87, 0x72, 0xf2, 0xe2, 0xc9, 0x70, 0x34, 0xda,
		0xdf, 0xeb, 0x4b, 0x5e, 0x3c, 0x17, 0x56, 0xae, 0x43, 0xd6, 0xee, 0xb6, 0xdb, 0x64, 0xf1, 0xa0,
		0xa3, 0xdf, 0x7b, 0x2c, 0xfe, 0xcf, 0x1f, 0x70, 0xeb, 0x08, 0x81, 0xca, 0x73, 0x90, 0xc6, 0x9d,
		0x6d, 0xdc, 0x1c, 0x25, 0xf9, 0x67, 0x3f, 0x10, 0x01, 0x93, 0x70, 0x57, 0x5e, 0x06, 0x60, 0x47,
		0x23, 0xf4, 0xee, 0x75, 0x84, 0xec, 0xff, 0xfa, 0x01, 0x7f, 0x23, 0xa9, 0x27, 0xd2, 0x03, 0x60,
		0xef, 0x37, 0x1d, 0x0d, 0xf0, 0x7e, 0x14, 0x80, 0xce, 0xc8, 0x35, 0x18, 0x7b, 0xd3, 0x77, 0xec,
		0xc0, 0x68, 0x8d, 0x92, 0xfe, 0xdf, 0x5c, 0x5a, 0xf0, 0x13, 0x83, 0x75, 0x1c, 0x0f, 0x07, 0x46,
		0xcb, 0x1f, 0x25, 0xfb, 0x7f, 0xb8, 0x6c, 0x28, 0x40, 0x84, 0x4d, 0xc3, 0x0f, 0xe2, 0x8c, 0xfb,
		0xcf, 0x85, 0xb0, 0x10, 0x20, 0x4a, 0x93, 0xbf, 0x6f, 0xe1, 0xbd, 0x51, 0xb2, 0xdf, 0x17, 0x4a,
		0x73, 0xfe, 0xca, 0x8b, 0x90, 0x23, 0x7f, 0xb2, 0xd7, 0x0c, 0x47, 0x08, 0xff, 0x5f, 0x2e, 0xdc,
		0x93, 0x20, 0x3d, 0xfb, 0x41, 0x33, 0xb0, 0x46, 0x1b, 0xfb, 0x80, 0xcf, 0xb4, 0xe0, 0xaf, 0x54,
		0x21, 0xef, 0x07, 0xcd, 0x66, 0x97, 0xd7, 0xa7, 0x23, 0xc4, 0xff, 0xdf, 0x0f, 0xc2, 0x23, 0x8b,
		0x50, 0x86, 0xcc, 0xf6, 0x9d, 0x5b, 0x81, 0xeb, 0xd0, 0xfb, 0xa5, 0x51, 0x08, 0x1f, 0x70, 0x04,
		0x49, 0xa4, 0xf6, 0x63, 0x87, 0x9e, 0xf8, 0x0e, 0x3d, 0x4e, 0x87, 0x25, 0x67, 0xc9, 0x61, 0x07,
		0xe9, 0x6f, 0x94, 0x47, 0x9f, 0xcc, 0xc2, 0x9f, 0x3f, 0x09, 0x05, 0x5e, 0x84, 0xef, 0xf1, 0x13,
		0xda, 0x87, 0x4c, 0xc3, 0xeb, 0xb4, 0xe7, 0x1d, 0xaf, 0x35, 0xdf, 0x6c, 0xef, 0x78, 0x46, 0x07,
		0xdf, 0x71, 0xbc, 0x5b, 0xb3, 0x47, 0x9e, 0x95, 0xcf, 0x1e, 0xef, 0x14, 0xb8, 0x1c, 0x40, 0xbe,
		0xee, 0x79, 0x8e, 0xb7, 0x11, 0x18, 0x41, 0xd7, 0x47, 0xe7, 0x20, 0xe1, 0xdc, 0x62, 0xb7, 0xc7,
		0xb5, 0x53, 0x07, 0xfb, 0xa5, 0xe9, 0x3d, 0xa3, 0xd3, 0xae, 0x94, 0x9d, 0x5b, 0x4f, 0x3b, 0x1d,
		0x2b, 0xc0, 0x1d, 0x37, 0xd8, 0x2b, 0x6b, 0x09, 0xe7, 0x16, 0xba, 0x0a, 0x63, 0x3c, 0x38, 0xb1,
		0xab, 0x88, 0xda, 0x99, 0x83, 0xfd, 0x52, 0x91, 0x71, 0xf3, 0x06, 0x59, 0x44, 0x30, 0x57, 0x52,
		0xdf, 0xff, 0x72, 0x49, 0x29, 0xbf, 0x05, 0x53, 0x0b, 0x64, 0x21, 0x58, 0x36, 0xf6, 0x5e, 0x31,
		0xbc, 0xe6, 0x1d, 0x12, 0x96, 0x2f, 0x40, 0xb2, 0xe5, 0x76, 0xd9, 0xab, 0x76, 0xb5, 0xe2, 0xc1,
		0x7e, 0x69, 0x86, 0xc1, 0xb5, 0xdc, 0xae, 0x0c, 0x45, 0x98, 0x08, 0xaf, 0xe9, 0x76, 0x79, 0xd7,
		0x12, 0xaf, 0xd9, 0xc7, 0x6b, 0xba, 0x5d, 0xde, 0xe5, 0xff, 0x48, 0xc0, 0xd4, 0x0d, 0x61, 0xc3,
		0x15, 0xc3, 0xb6, 0x76, 0xb0, 0x1f, 0xa0, 0x8b, 0xf2, 0x9b, 0x8e, 0xb5, 0xd3, 0x07, 0xfb, 0xa5,
		0x87, 0x18, 0x10, 0xa1, 0xca, 0x48, 0xec, 0xee, 0xf1, 0x2a, 0x8c, 0xdd, 0xc6, 0x5e, 0xf8, 0x11,
		0x61, 0x64, 0xd4, 0xbc, 0x21, 0x32, 0x6a, 0x4e, 0x43, 0x5d, 0xc8, 0x99, 0x62, 0xbc, 0xfc, 0x73,
		0x94, 0xe7, 0xe7, 0x87, 0xce, 0xee, 0xfc, 0x80, 0x8e, 0xf3, 0xa1, 0xa5, 0xe8, 0xbb, 0x38, 0xb5,
		0xb9, 0x83, 0xfd, 0xd2, 0x2c, 0x1f, 0xad, 0x68, 0x91, 0x3b, 0xed, 0xf5, 0x34, 0xbb, 0x03, 0x85,
		0xa8, 0x30, 0x52, 0x21, 0x79, 0x0b, 0xef, 0xf1, 0xd7, 0x19, 0xc9, 0x9f, 0xe8, 0xa5, 0xde, 0xfb,
		0xc6, 0x0a, 0xbd, 0xf6, 0x1b, 0xae, 0xd6, 0xc0, 0x74, 0xf1, 0xd7, 0x8d, 0x2b, 0x89, 0x17, 0x14,
		0x6e, 0xe1, 0xaf, 0x4c, 0xc3, 0xc4, 0x8a, 0xd3, 0xc4, 0xed, 0x07, 0x6d, 0xdd, 0x1d, 0xc8, 0x85,
		0x8a, 0xf2, 0xb7, 0x60, 0xcf, 0xc7, 0xb5, 0xae, 0x6c, 0xce, 0x90, 0x2d, 0x62, 0xce, 0x90, 0x8a,
		0xde, 0x92, 0x67, 0x91, 0xbd, 0x1c, 0xfd, 0xcc, 0x21, 0xfd, 0x44, 0xec, 0x70, 0xef, 0x33, 0x88,
		0x6a, 0x91, 0x5d, 0x01, 0xfb, 0x48, 0xb4, 0x76, 0xf6, 0x60, 0xbf, 0x74, 0x86, 0xc9, 0x4b, 0x8d,
		0x32, 0x42, 0x64, 0x2b, 0xf1, 0x22, 0xe4, 0x3c, 0xbc, 0x83, 0x3d, 0x6c, 0xf3, 0x8f, 0xdb, 0x72,
		0xb5, 0xd2, 0xc1, 0x7e, 0xe9, 0x61, 0x86, 0x10, 0x36, 0xf9, 0x11, 0x15, 0x42, 0x32, 0x99, 0x95,
		0xb6, 0x65, 0x62, 0xdb, 0xe7, 0x5f, 0x4d, 0xc8, 0xb3, 0xc2, 0x1b, 0x22, 0xb3, 0xc2, 0x69, 0xe8,
		0xaf, 0x41, 0x86, 0xbe, 0x1e, 0xec, 0xf3, 0x0f, 0x94, 0x9e, 0x8c, 0x65, 0xaa, 0xcd, 0x3d, 0x17,
		0xd7, 0x1e, 0x3e, 0xd8, 0x2f, 0x9d, 0x62, 0x3d, 0x30, 0x08, 0xb9, 0x03, 0x8e, 0x4a, 0xf0, 0xd9,
		0xeb, 0xc5, 0xfc, 0x3b, 0xb7, 0x7b, 0xc3, 0x67, 0x10, 0x11, 0x7c, 0x46, 0x42, 0x1b, 0x30, 0xb5,
		0x8d, 0x77, 0x1c, 0x0f, 0xeb, 0xae, 0x87, 0x5d, 0xcf, 0x31, 0xb1, 0xcf, 0xde, 0xd5, 0xcd, 0xd5,
		0x3e, 0x76, 0xb0, 0x5f, 0x2a, 0x33, 0xf9, 0x01, 0x16, 0x19, 0x4a, 0x65, 0xad, 0xeb, 0x61, 0x23,
		0x7a, 0x99, 0x14, 0xb2, 0x21, 0x1a, 0x7d, 0xe9, 0x55, 0x9e, 0x8c, 0xe1, 0x30, 0x92, 0x08, 0x5a,
		0x07, 0xd5, 0xd8, 0x09, 0xb0, 0x27, 0x2b, 0x45, 0x3f, 0xd3, 0xab, 0x3d, 0x71, 0xb0, 0x5f, 0x7a,
		0x94, 0xc1, 0xf4, 0x73, 0xc8, 0x60, 0x93, 0xb4, 0x51, 0x52, 0xe9, 0x93, 0x80, 0xc4, 0x20, 0x1c,
		0x3f, 0x10, 0x98, 0x13, 0x14, 0xf3, 0xdc, 0xc1, 0x7e, 0xe9, 0xb1, 0xe8, 0x40, 0x7b, 0x3c, 0x32,
		0x2a, 0x37, 0xd5, 0x7a, 0xaf, 0x95, 0xb8, 0xae, 0x0c, 0x58, 0xe8, 0x77, 0xdd, 0x43, 0x90, 0x64,
		0x21, 0x32, 0x07, 0x7c, 0x2c, 0x12, 0xd2, 0x64, 0xff, 0x1c, 0x0c, 0xb0, 0x44, 0xe6, 0x80, 0x8d,
		0x57, 0x02, 0xfd, 0x14, 0xa4, 0x3b, 0xc4, 0x27, 0xe8, 0xbb, 0xc4, 0xf9, 0x2b, 0x17, 0x62, 0xf9,
		0x0d, 0x7d, 0xaa, 0xcd, 0x1e, 0xec, 0x97, 0x4e, 0xf2, 0x24, 0x47, 0x08, 0x72, 0x47, 0x0c, 0x14,
		0x75, 0x01, 0x8c, 0x20, 0xf0, 0xac, 0xed, 0x6e, 0x40, 0xdf, 0x3a, 0x26, 0xae, 0xff, 0x6c, 0xac,
		0x2e, 0xaa, 0xa1, 0x18, 0x0b, 0x13, 0x92, 0x5f, 0xf4, 0x10, 0x23, 0x7e, 0xd1, 0x23, 0xa3, 0x67,
		0x20, 0xb3, 0x6b, 0x35, 0x9b, 0xd8, 0x66, 0xef, 0x2b, 0xcb, 0x2e, 0xce, 0xe8, 0x11, 0x17, 0x67,
		0xa4, 0xd9, 0x2f, 0x27, 0xf9, 0xa7, 0x47, 0x17, 0xf9, 0x87, 0x59, 0x03, 0x81, 0x9a, 0x50, 0x23,
		0x81, 0x9a, 0x16, 0x9d, 0x7d, 0x51, 0x29, 0x71, 0x2f, 0x51, 0xe9, 0x1d, 0x00, 0xd7, 0x20, 0x96,
		0x08, 0xb0, 0xe7, 0xf3, 0x9c, 0x78, 0x2d, 0xf6, 0x12, 0x9e, 0x5f, 0x0f, 0x65, 0x07, 0x8c, 0xd5,
		0x83, 0x8d, 0x2e, 0xa2, 0x90, 0x3c, 0xfb, 0x1c, 0xe4, 0x42, 0x79, 0x74, 0x5e, 0x24, 0x40, 0x36,
		0x78, 0x74, 0xb0, 0x5f, 0x2a, 0x30, 0xa0, 0xa7, 0x2d, 0xbb, 0x6d, 0xd9, 0xb8, 0xcc, 0x53, 0xdd,
		0xac, 0x07, 0x93, 0x7d, 0xdd, 0x0e, 0xc9, 0xa7, 0x8d, 0x68, 0x3e, 0x7d, 0xe6, 0x1e, 0x86, 0x24,
		0xa5, 0xd6, 0xd9, 0xaf, 0x26, 0x21, 0x4d, 0x79, 0xd1, 0x0b, 0x90, 0xdd, 0x36, 0x7c, 0xac, 0x77,
		0xbd, 0x36, 0x57, 0xf5, 0x91, 0x83, 0xfd, 0xd2, 0x69, 0xbe, 0x3a, 0x79, 0x4b, 0x24, 0x12, 0x13,
		0xe2, 0x96, 0xd7, 0x46, 0x8b, 0x30, 0x7e, 0x07, 0x5b, 0xad, 0xdd, 0xc0, 0xd7, 0x7b, 0x5f, 0xd3,
		0xd7, 0x1e, 0x3d, 0xd8, 0x2f, 0x3d, 0xc2, 0xa4, 0xe5, 0xd6, 0xc8, 0x84, 0xf1, 0x86, 0x75, 0x23,
		0xd8, 0x45, 0x2f, 0x01, 0xb4, 0x3c, 0xc3, 0xdd, 0x65, 0x18, 0xc9, 0xfe, 0xd0, 0xd5, 0x6b, 0x8b,
		0xe4, 0x11, 0x4a, 0x16, 0xf2, 0x96, 0xaf, 0x1b, 0x9e, 0xb9, 0x6b, 0xdd, 0x66, 0x2f, 0x61, 0x65,
		0x65, 0xf9, 0x5e, 0x5b, 0x44, 0xde, 0xf2, 0xab, 0x8c, 0x4a, 0x22, 0x9f, 0xd0, 0x93, 0x7e, 0xbc,
		0xe0, 0x77, 0x3b, 0x3c, 0x1f, 0x4a, 0x91, 0xaf, 0x9f, 0x23, 0x12, 0xf9, 0x78, 0xe3, 0x02, 0x6f,
		0x43, 0x37, 0xa1, 0xc0, 0xb4, 0x0e, 0xf1, 0xe8, 0x37, 0x85, 0xb5, 0xc7, 0x0e, 0xf6, 0x4b, 0x25,
		0x79, 0x54, 0xc3, 0xd0, 0x26, 0x68, 0x93, 0xc0, 0x7a, 0x50, 0xa5, 0xd6, 0xec, 0x8b, 0x30, 0xd9,
		0x17, 0x27, 0x86, 0x74, 0x34, 0x23, 0x77, 0x94, 0x93, 0xc4, 0xcb, 0xdf, 0x50, 0x40, 0x0d, 0x6b,
		0x20, 0x0d, 0xbf, 0xd5, 0x25, 0x65, 0xda, 0x4d, 0x28, 0x84, 0xbd, 0xeb, 0x52, 0xc1, 0x26, 0xd9,
		0x21, 0xda, 0x1e, 0xb1, 0x43, 0xd8, 0x44, 0x3f, 0x83, 0xdc, 0x80, 0xa9, 0x1e, 0x6f, 0xb4, 0x9a,
		0x93, 0x22, 0xf6, 0x00, 0x4b, 0x24, 0x62, 0x87, 0xad, 0x9f, 0x64, 0x8d, 0xbc, 0xbe, 0xfc, 0x1b,
		0x0a, 0xcc, 0x0e, 0xd4, 0x6f, 0xbe, 0xc6, 0x7f, 0x63, 0x82, 0x54, 0x81, 0x1d, 0x41, 0x0c, 0xdf,
		0x61, 0xbb, 0x87, 0x2a, 0x30, 0x04, 0x89, 0xf8, 0x61, 0x48, 0x15, 0xc5, 0x6e, 0x1a, 0xd2, 0xd5,
		0x16, 0xb6, 0x69, 0x91, 0xbb, 0xeb, 0xf8, 0xc1, 0x60, 0xec, 0x24, 0xd4, 0x48, 0xec, 0x24, 0x04,
		0xc2, 0xee, 0x3a, 0x1e, 0xff, 0xc1, 0x10, 0x99, 0x9d, 0x50, 0x23, 0xec, 0xf4, 0x9e, 0xeb, 0x1a,
		0x64, 0x89, 0x18, 0x9d, 0x95, 0x64, 0xff, 0xaa, 0x17, 0x2d, 0xb2, 0x58, 0xc8, 0x8e, 0xea, 0x30,
		0x4e, 0x57, 0x54, 0x80, 0xcd, 0xa0, 0xeb, 0xb1, 0x25, 0x17, 0x59, 0xf6, 0x72, 0xab, 0x0c, 0x11,
		0x11, 0xa3, 0x99, 0xc5, 0xf0, 0xc9, 0xce, 0x2c, 0x3d, 0x90, 0x59, 0x28, 0x3d, 0x9a, 0x59, 0x28,
		0x89, 0x14, 0x8d, 0xa6, 0xdb, 0xa5, 0xbf, 0x42, 0x90, 0xe9, 0x2f, 0x1a, 0x79, 0x43, 0x24, 0x54,
		0x71, 0x1a, 0x91, 0x6b, 0x71, 0xb9, 0x81, 0x62, 0xb3, 0x35, 0x44, 0x8e, 0xd3, 0x90, 0x05, 0x10,
		0x4e, 0xaf, 0x28, 0x38, 0xe3, 0xcf, 0xbe, 0x14, 0x86, 0x7a, 0x28, 0x91, 0xe4, 0xd1, 0x23, 0x23,
		0x0c, 0xd9, 0x0e, 0x0e, 0x8c, 0xa6, 0x11, 0x18, 0xfc, 0xab, 0xf7, 0xc3, 0x2a, 0x08, 0xea, 0x1f,
		0xf3, 0x2b, 0x9c, 0x99, 0xe5, 0x29, 0x69, 0xf6, 0x04, 0x4a, 0x64, 0xf6, 0x04, 0x71, 0xf6, 0x3a,
		0x7d, 0x47, 0xb9, 0x27, 0x79, 0x9c, 0x65, 0xce, 0x7d, 0xd4, 0x80, 0x0c, 0x55, 0xc1, 0x47, 0x9f,
		0x80, 0x8c, 0x41, 0xff, 0xe2, 0x0b, 0xe3, 0xcc, 0x51, 0x1a, 0xcb, 0x33, 0xcc, 0xa4, 0x22, 0x33,
		0xcc, 0x48, 0xbc, 0x8b, 0xdf, 0x4f, 0xc0, 0x38, 0x4d, 0x4f, 0x7f, 0x59, 0x62, 0x09, 0x49, 0x43,
		0xb4, 0x50, 0xd3, 0xa5, 0x25, 0x25, 0xcd, 0x7f, 0xaf, 0x2d, 0xba, 0xfc, 0x09, 0x99, 0x2a, 0xb5,
		0x04, 0x13, 0x8c, 0x47, 0x28, 0xc4, 0x96, 0x55, 0xf9, 0x60, 0xbf, 0x34, 0x27, 0x43, 0x0c, 0x51,
		0x66, 0x9c, 0xb6, 0x44, 0x83, 0xda, 0x67, 0x14, 0x38, 0x19, 0xa9, 0x05, 0x7a, 0x01, 0x6d, 0x7b,
		0x30, 0xa0, 0x3d, 0x1e, 0xa7, 0x9a, 0x38, 0x76, 0x30, 0xbb, 0xf2, 0xe5, 0x14, 0x64, 0xf9, 0x2d,
		0xee, 0x1e, 0xfa, 0x65, 0x05, 0xd0, 0x60, 0x98, 0x45, 0xe7, 0x46, 0xad, 0x26, 0xee, 0x01, 0xb3,
		0x7f, 0x25, 0xee, 0xb2, 0x0b, 0x47, 0x5a, 0x7e, 0xe2, 0x33, 0xff, 0xf5, 0x7b, 0xbf, 0x94, 0x28,
		0xa1, 0x47, 0x2e, 0x89, 0x13, 0xb0, 0x4b, 0xbd, 0x05, 0x77, 0x49, 0x68, 0x8b, 0x7e, 0x02, 0x26,
		0x43, 0x10, 0xee, 0xd8, 0xb1, 0xb5, 0x7a, 0xe4, 0x28, 0x8f, 0xf7, 0xcb, 0x65, 0xaa, 0xc1, 0x19,
		0x34, 0x3b, 0x54, 0x03, 0xea, 0xf2, 0xe8, 0x67, 0x15, 0x28, 0x44, 0xa7, 0x0a, 0x3d, 0x76, 0xd4,
		0x7c, 0x88, 0xae, 0x2f, 0xc6, 0x99, 0xb4, 0x9e, 0x31, 0x1e, 0xa5, 0xaa, 0x3c, 0x8c, 0x4e, 0xf7,
		0x54, 0xa1, 0x7e, 0x23, 0x19, 0xe2, 0x2d, 0xc8, 0x53, 0x61, 0x6e, 0x84, 0x58, 0x5a, 0x8c, 0x30,
		0xc0, 0x1c, 0xed, 0xb5, 0x88, 0x4e, 0x0e, 0xf4, 0x4a, 0x07, 0x5f, 0x6b, 0xfc, 0xf1, 0x77, 0xe7,
		0x4e, 0x7c, 0xe7, 0xbb, 0x73, 0xca, 0xf7, 0xbf, 0x3b, 0xa7, 0xfc, 0xc5, 0x77, 0xe7, 0x94, 0x77,
		0xef, 0xce, 0x29, 0xbf, 0x71, 0x77, 0x4e, 0xf9, 0xdd, 0xbb, 0x73, 0xca, 0x37, 0xef, 0xce, 0x0d,
		0xbc, 0x0f, 0xfb, 0xcd, 0xf7, 0xe6, 0x14, 0x71, 0x42, 0xfa, 0x46, 0x5e, 0xea, 0x31, 0x7c, 0x65,
		0xf5, 0xbf, 0x4f, 0x41, 0x61, 0x07, 0x1b, 0x24, 0xc9, 0x88, 0x17, 0x7d, 0xcf, 0x74, 0xda, 0xac,
		0x57, 0xd3, 0x71, 0xf1, 0xfd, 0x3d, 0xf8, 0xec, 0x42, 0xba, 0xd1, 0x31, 0x5a, 0x18, 0xbd, 0x08,
		0x09, 0x8b, 0xff, 0xea, 0x54, 0xed, 0xe2, 0xdd, 0xfd, 0x52, 0xa2, 0xb1, 0xf8, 0x67, 0xfb, 0xa5,
		0x71, 0xab, 0xd9, 0x5b, 0x32, 0xbd, 0x83, 0x50, 0x99, 0x5a, 0xd6, 0x12, 0x56, 0x93, 0xe4, 0x73,
		0x9a, 0x0a, 0x48, 0x5c, 0x1a, 0x97, 0xf3, 0x79, 0x7f, 0x68, 0xa7, 0x6c, 0xe5, 0x3b, 0x50, 0xa0,
		0xdf, 0x41, 0x5a, 0x3b, 0x16, 0x7f, 0x4f, 0xfe, 0x32, 0xa4, 0xd9, 0x0f, 0x4e, 0xd0, 0xcf, 0xdb,
		0xe5, 0x2d, 0x26, 0x25, 0x47, 0xb6, 0x98, 0x94, 0x12, 0x1e, 0xab, 0x25, 0x62, 0x1d, 0xab, 0x89,
		0x48, 0xad, 0x40, 0x7e, 0x09, 0x3b, 0xe1, 0xeb, 0xf9, 0xc7, 0xef, 0xf6, 0x1a, 0x64, 0xdb, 0x46,
		0x60, 0x05, 0xdd, 0x26, 0xeb, 0x5a, 0x91, 0x93, 0x99, 0x68, 0x89, 0x24, 0x33, 0x41, 0x44, 0x3f,
		0x02, 0xb9, 0xb6, 0x63, 0xb7, 0x98, 0x6c, 0x92, 0xca, 0x4a, 0x41, 0x2a, 0x6c, 0x8a, 0x04, 0xa9,
		0x90, 0xca, 0x07, 0xe0, 0x41, 0x86, 0xc4, 0x28, 0xc7, 0x0e, 0x4d, 0xae, 0xc4, 0x32, 0x39, 0x29,
		0x60, 0xf8, 0xb7, 0x97, 0xcc, 0x60, 0x52, 0x7a, 0x63, 0xf4, 0x48, 0x7a, 0x63, 0x24, 0xde, 0xe7,
		0x75, 0x48, 0x6d, 0xe2, 0xb7, 0x83, 0x63, 0x4e, 0x72, 0x78, 0xc8, 0x9d, 0xae, 0x76, 0x9b, 0x96,
		0xf3, 0x00, 0xf5, 0x75, 0x20, 0xa9, 0x19, 0x77, 0x1e, 0x60, 0x87, 0xff, 0x25, 0x0b, 0x63, 0x37,
		0xd8, 0x1a, 0xfe, 0xb0, 0x0b, 0xe9, 0x35, 0x7e, 0x06, 0x91, 0xe4, 0x1f, 0x97, 0x1f, 0x15, 0x0a,
		0xe6, 0x79, 0x9f, 0xf4, 0x34, 0x2f, 0xce, 0x71, 0x85, 0xeb, 0x39, 0xdb, 0xc6, 0xb6, 0xd5, 0xb6,
		0x82, 0x3d, 0x9a, 0xb0, 0x13, 0x91, 0x93, 0xa8, 0x5e, 0x63, 0xf4, 0x24, 0xaa, 0x47, 0x47, 0xb6,
		0x54, 0xf5, 0xa5, 0xf9, 0xd1, 0x6f, 0x1c, 0x0d, 0xef, 0xb1, 0xfc, 0x43, 0x9f, 0x86, 0x82, 0x19,
		0x89, 0x13, 0xb4, 0x8e, 0xce, 0x5f, 0x79, 0xfa, 0xe8, 0x5e, 0xa3, 0xb1, 0xa5, 0xf6, 0xf8, 0xc1,
		0x7e, 0xe9, 0x6c, 0x14, 0x67, 0x70, 0x7d, 0xbf, 0x72, 0x42, 0xeb, 0xeb, 0x0b, 0xbd, 0x06, 0x69,
		0x8b, 0x04, 0x47, 0xfe, 0xc3, 0x50, 0x8f, 0x1d, 0xdd, 0x29, 0x8d, 0xa3, 0xcc, 0x6b, 0xa8, 0xd4,
		0xd0, 0x2e, 0x18, 0x20, 0xda, 0x84, 0x54, 0x80, 0xdf, 0x0e, 0xf8, 0x6f, 0xe4, 0x94, 0x8f, 0x06,
		0x26, 0x6b, 0x8f, 0x45, 0x26, 0x22, 0x33, 0x14, 0x96, 0xa2, 0xa1, 0x4f, 0x41, 0xc6, 0xa3, 0xb1,
		0x81, 0x9f, 0x05, 0x3f, 0x7e, 0x34, 0x2e, 0x8b, 0x23, 0x6c, 0x6f, 0xc1, 0xe4, 0x86, 0x62, 0x73,
		0x4c, 0x62, 0x0d, 0x83, 0x2c, 0x64, 0x7a, 0xfa, 0x3b, 0xd2, 0x1a, 0x74, 0xcd, 0x33, 0x6b, 0x50,
		0xa9, 0xe1, 0xd6, 0xa0, 0x4d, 0xc8, 0x85, 0x7c, 0x0b, 0x3b, 0xe1, 0x97, 0x57, 0x79, 0x7e, 0x90,
		0x7d, 0x24, 0xbe, 0x14, 0xc4, 0xd9, 0x66, 0x4e, 0x42, 0x18, 0xda, 0x97, 0xdc, 0x05, 0xfa, 0x04,
		0x24, 0x3d, 0xe3, 0x4e, 0xf1, 0x4f, 0xc7, 0xf8, 0x0f, 0x9b, 0x1c, 0x6d, 0x27, 0xe3, 0x0e, 0x5b,
		0x5d, 0x7c, 0x20, 0x9e, 0x71, 0x27, 0x0a, 0x4d, 0xb0, 0x3e, 0x82, 0x9d, 0x4a, 0x2d, 0x07, 0x63,
		0xbc, 0x12, 0xb8, 0x10, 0x40, 0x5e, 0x5a, 0xdc, 0x28, 0x0f, 0x63, 0xbd, 0xaf, 0x10, 0x73, 0x90,
		0x6e, 0xac, 0x54, 0x97, 0xea, 0xec, 0xf7, 0x7d, 0x16, 0x96, 0xab, 0x1b, 0x1b, 0x8d, 0x1b, 0x8d,
		0x85, 0xea, 0x66, 0x63, 0x6d, 0x55, 0x4d, 0xa0, 0x49, 0xc8, 0x2f, 0xd5, 0xd7, 0x96, 0xd7, 0x38,
		0x21, 0x89, 0x00, 0x32, 0x5a, 0x7d, 0x89, 0xfc, 0x9d, 0x42, 0x59, 0x48, 0x6d, 0xd6, 0x5f, 0xdb,
		0x54, 0xd3, 0x04, 0xa5, 0xba, 0xb5, 0xd8, 0x58, 0x53, 0x33, 0x68, 0x0c, 0x92, 0x5a, 0xf5, 0x55,
		0xb5, 0x79, 0x5f, 0xca, 0x9b, 0xcb, 0x30, 0xe9, 0x7a, 0xb8, 0x69, 0x99, 0xbd, 0x5f, 0x82, 0x3c,
		0xba, 0xbe, 0xe9, 0xab, 0x86, 0x3e, 0xda, 0x7a, 0x67, 0x1c, 0x60, 0x61, 0x7d, 0x8b, 0x5f, 0x70,
		0x97, 0x7f, 0x2e, 0x09, 0xb0, 0x14, 0x3e, 0xa2, 0x77, 0xa0, 0xe4, 0xd2, 0x1b, 0x03, 0x7a, 0x42,
		0xae, 0xb7, 0xdc, 0xae, 0xde, 0xc1, 0x1d, 0xc7, 0xdb, 0xd3, 0x77, 0x3c, 0xc3, 0xe4, 0x9f, 0xb9,
		0x91, 0xac, 0xfd, 0xec, 0xc1, 0x7e, 0xe9, 0x32, 0x8f, 0x9a, 0x47, 0x0b, 0xc8, 0x61, 0xed, 0x61,
		0x17, 0x7b, 0xeb, 0x8c, 0x75, 0xc9, 0xed, 0xae, 0x50, 0xc6, 0x1b, 0x9c, 0x8f, 0xec, 0x18, 0x8d,
		0x36, 0xf5, 0x4f, 0xc7, 0x93, 0x7e, 0x5c, 0x46, 0xde, 0x31, 0x46, 0xdb, 0x23, 0x3b, 0xc6, 0xb0,
		0x89, 0xff, 0xe4, 0xde, 0xf4, 0x6d, 0xcb, 0xb7, 0xb6, 0xdb, 0x58, 0x6f, 0xe2, 0xdb, 0x96, 0x89,
		0xf5, 0xb6, 0xe5, 0x07, 0xfc, 0x98, 0xf0, 0xfc, 0xc1, 0x7e, 0xe9, 0x71, 0x7e, 0x9b, 0x38, 0xc8,
		0x14, 0xb9, 0xcd, 0xe0, 0xed, 0x8b, 0xb4, 0x79, 0xd9, 0xf2, 0x03, 0xf4, 0xa3, 0x30, 0xb3, 0xe3,
		0x78, 0x26, 0xa6, 0x43, 0xa5, 0xaf, 0x05, 0x05, 0x84, 0x83, 0xc6, 0xb1, 0x6c, 0xed, 0xc9, 0x83,
		0xfd, 0xd2, 0x13, 0x61, 0xc6, 0x1c, 0xe0, 0x92, 0xb1, 0x11, 0x65, 0x58, 0x72, 0xbb, 0x0b, 0x61,
		0x73, 0xf9, 0x0a, 0x8c, 0x6d, 0x7a, 0x86, 0x89, 0x1b, 0x8b, 0xe8, 0x9c, 0x94, 0x44, 0x4f, 0x1d,
		0x91, 0x2e, 0xcb, 0xef, 0x67, 0x40, 0xad, 0xbf, 0x8d, 0xcd, 0x2e, 0x31, 0xa2, 0x98, 0x47, 0x1d,
		0xb2, 0x01, 0x01, 0xd2, 0x39, 0x46, 0xfe, 0xca, 0x13, 0x23, 0x22, 0x2c, 0xeb, 0x56, 0xce, 0x4b,
		0x02, 0x20, 0x72, 0xce, 0x42, 0x89, 0x8d, 0x26, 0xfa, 0x34, 0xe4, 0x59, 0x3b, 0xfb, 0xf6, 0x39,
		0x41, 0x73, 0xf5, 0xb5, 0xa3, 0xfb, 0xe8, 0xd7, 0x92, 0x75, 0x4a, 0x3f, 0x38, 0x96, 0xb3, 0xb0,
		0x84, 0x1b, 0x39, 0x7a, 0x09, 0x42, 0x6e, 0x74, 0x03, 0x26, 0x02, 0xab, 0x83, 0x9d, 0x6e, 0xa0,
		0x5b, 0xb6, 0xde, 0x61, 0xdf, 0x87, 0xa6, 0xe4, 0xbd, 0x77, 0xa4, 0x39, 0x92, 0xcc, 0x79, 0x4b,
		0xc3, 0x5e, 0xf1, 0xd1, 0x4f, 0x2b, 0x30, 0xce, 0xa7, 0xde, 0x74, 0xba, 0x76, 0xc0, 0x2f, 0x73,
		0x5f, 0x3e, 0xe6, 0x38, 0x98, 0x7b, 0x2c, 0x10, 0x04, 0x96, 0xdd, 0xa5, 0xb3, 0x35, 0x19, 0xbe,
		0xef, 0x0e, 0x24, 0x14, 0x42, 0xb7, 0x20, 0x6f, 0xba, 0x5d, 0x5d, 0xfc, 0x2e, 0x52, 0x9a, 0x1f,
		0x0b, 0x1f, 0x9d, 0xe1, 0xc3, 0x55, 0x2b, 0x1b, 0x4f, 0x82, 0x89, 0x18, 0xcf, 0x74, 0xbb, 0xc2,
		0x37, 0x6e, 0x41, 0xbe, 0x25, 0x75, 0x96, 0x89, 0xd3, 0xd9, 0xd2, 0xd0, 0xce, 0x5a, 0x87, 0x74,
		0xd6, 0x0a, 0x3b, 0x9b, 0x7d, 0x09, 0xd4, 0x7e, 0xeb, 0x8c, 0x4a, 0x0b, 0x69, 0xf9, 0x9c, 0xfa,
		0xe7, 0x15, 0x80, 0x9e, 0x9b, 0xa0, 0x71, 0xc8, 0xae, 0xae, 0xe9, 0x9b, 0x5a, 0x75, 0xa1, 0xae,
		0x9e, 0x40, 0x0f, 0xc1, 0x54, 0x75, 0x7d, 0x7d, 0x99, 0x07, 0x7e, 0x4e, 0x56, 0x48, 0xf8, 0x5f,
		0x59, 0x5b, 0xac, 0x2f, 0x73, 0x42, 0x02, 0x4d, 0xc3, 0xe4, 0x0d, 0xad, 0xba, 0x52, 0x7f, 0x75,
		0x4d, 0xfb, 0x38, 0x27, 0x26, 0xd1, 0x14, 0x4c, 0x2c, 0x37, 0x6a, 0x5a, 0x55, 0x7b, 0x9d, 0x93,
		0x52, 0x24, 0x97, 0xbc, 0x52, 0xd5, 0x16, 0x5f, 0xad, 0x6a, 0x75, 0x4e, 0x4b, 0xa3, 0x02, 0xc0,
		0x8d, 0xad, 0x65, 0x81, 0x95, 0x29, 0xff, 0x41, 0x12, 0xa6, 0xd6, 0x59, 0x34, 0x97, 0xd6, 0x9b,
		0x09, 0xe0, 0xb1, 0xfd, 0xb5, 0x1e, 0xae, 0xda, 0xc5, 0xbb, 0xfb, 0xa5, 0x1c, 0xdf, 0x75, 0xd3,
		0x0a, 0x78, 0xa6, 0xc7, 0x12, 0xa9, 0x84, 0xc3, 0x0b, 0xf8, 0xc1, 0x56, 0x7a, 0x01, 0xcf, 0x10,
		0x9a, 0x68, 0x09, 0x26, 0x78, 0x62, 0xd0, 0xdb, 0x56, 0xc7, 0x62, 0x55, 0x7a, 0x5a, 0xf6, 0xfa,
		0x48, 0x73, 0xe4, 0xc4, 0x89, 0xb7, 0x2c, 0x93, 0x06, 0xf4, 0x12, 0xc0, 0xb6, 0x11, 0x98, 0xbb,
		0xf4, 0xfd, 0x41, 0xf6, 0x99, 0xb0, 0x7c, 0xf4, 0xd5, 0x6b, 0x8b, 0x28, 0x42, 0xc9, 0x1b, 0xd6,
		0x3b, 0x18, 0x7d, 0x56, 0x81, 0x29, 0x2c, 0x16, 0x81, 0x1e, 0xfd, 0x35, 0xaf, 0xf9, 0xe3, 0xad,
		0x1d, 0xf9, 0x00, 0x6f, 0x00, 0x32, 0x72, 0x80, 0x87, 0xfb, 0x63, 0xdc, 0x65, 0x48, 0xd3, 0x23,
		0x09, 0x1e, 0xd5, 0xa5, 0x8d, 0x2b, 0x25, 0x47, 0x36, 0xae, 0x94, 0xc2, 0xb7, 0x2a, 0x7f, 0x92,
		0x84, 0x99, 0x75, 0x91, 0x8f, 0xd7, 0x5c, 0x6c, 0x8b, 0x23, 0xcb, 0xe8, 0x89, 0xa0, 0xf2, 0xe1,
		0x4f, 0x04, 0x13, 0xf7, 0x76, 0x22, 0x38, 0xe4, 0xec, 0x34, 0xf9, 0xd1, 0x9e, 0x9d, 0xa6, 0x3e,
		0xe4, 0xd9, 0xe9, 0x55, 0x18, 0x73, 0xc9, 0x9f, 0x3c, 0xa5, 0x66, 0xe5, 0xd3, 0x79, 0xde, 0x10,
		0xc9, 0x1a, 0x9c, 0x86, 0x5a, 0xbd, 0xdf, 0x7e, 0x63, 0x61, 0xe7, 0xd2, 0xd1, 0xde, 0x32, 0xb0,
		0xd0, 0xe4, 0x8e, 0x86, 0x38, 0x89, 0x40, 0xe7, 0x33, 0x5d, 0x84, 0x93, 0xe1, 0x44, 0x2f, 0xb4,
		0x1d, 0x1f, 0x87, 0x67, 0x6b, 0xeb, 0x90, 0x0b, 0x5b, 0x3e, 0xe4, 0x7e, 0x95, 0xf7, 0xf5, 0xf5,
		0x24, 0xe4, 0xb7, 0xb4, 0x65, 0x5f, 0x38, 0x13, 0x86, 0x5c, 0x58, 0xf4, 0xf1, 0x14, 0x7c, 0x2e,
		0xd6, 0x60, 0x1d, 0x4f, 0x3e, 0x12, 0x09, 0x31, 0x22, 0x3e, 0x17, 0x52, 0xd1, 0xa7, 0x20, 0xd5,
		0xf5, 0xda, 0x7e, 0xf8, 0x3b, 0x1a, 0x47, 0xf6, 0x20, 0xe9, 0x47, 0xfe, 0x96, 0x37, 0xcc, 0x04,
		0x24, 0xb2, 0x61, 0x26, 0x04, 0x79, 0xbe, 0x92, 0xf7, 0x73, 0xbe, 0x66, 0x7d, 0x48, 0x6e, 0x69,
		0xcb, 0x1f, 0xe5, 0x11, 0x5c, 0x2e, 0xee, 0xe9, 0xcc, 0x1f, 0x24, 0x60, 0x82, 0x6e, 0x5c, 0x1f,
		0xf4, 0xd4, 0xbd, 0x06, 0x19, 0xba, 0x15, 0x16, 0x93, 0x17, 0x7f, 0x73, 0xcd, 0xc7, 0x4f, 0x85,
		0xa3, 0x6f, 0x44, 0x51, 0xd2, 0x03, 0x9b, 0x36, 0x6e, 0xc1, 0xff, 0x98, 0x84, 0xc2, 0xa2, 0x11,
		0x18, 0x3e, 0x0e, 0x1e, 0xb0, 0x09, 0xdb, 0x30, 0xd6, 0x64, 0x1d, 0xf3, 0xab, 0xf4, 0x67, 0x8f,
		0xee, 0x24, 0xaa, 0xa5, 0x78, 0x94, 0x47, 0xcb, 0xe1, 0x22, 0xa3, 0xe5, 0xb4, 0x07, 0xb9, 0x1a,
		0xc6, 0xb8, 0x6a, 0xe8, 0x1a, 0x64, 0x4d, 0x23, 0xc0, 0x2d, 0xc7, 0xdb, 0x1b, 0x7c, 0xd9, 0x43,
		0xb4, 0x44, 0x4e, 0x8e, 0x04, 0xf1, 0xde, 0x4e, 0x87, 0x7f, 0x2b, 0x05, 0x93, 0x7c, 0xdb, 0x1d,
		0xde, 0x3f, 0x7d, 0xc8, 0x55, 0x19, 0xad, 0x8d, 0x12, 0xf7, 0xa7, 0x36, 0x7a, 0x1d, 0xb2, 0xec,
		0x57, 0x49, 0xad, 0x26, 0x4f, 0x96, 0x2f, 0xdd, 0xdd, 0x2f, 0x8d, 0x35, 0x08, 0x8d, 0x76, 0x80,
		0x44, 0x73, 0x04, 0xfe, 0xb4, 0xf4, 0x72, 0x61, 0xff, 0x56, 0x87, 0x12, 0x1b, 0x4d, 0xf4, 0xd7,
		0x21, 0x2b, 0xf6, 0xe3, 0x7c, 0x7f, 0xf0, 0x44, 0xac, 0x13, 0x3f, 0x79, 0xa6, 0x04, 0x40, 0x64,
		0xa6, 0x04, 0x11, 0xdd, 0x1e, 0x38, 0x53, 0xbc, 0x1e, 0xab, 0x07, 0x31, 0x43, 0x3f, 0xc4, 0xab,
		0xe5, 0xaf, 0x26, 0x40, 0xe5, 0xda, 0xf8, 0x1f, 0x95, 0xc3, 0xc8, 0x9b, 0xd7, 0xc4, 0xfd, 0xd8,
		0xbc, 0xde, 0x82, 0x9c, 0xf8, 0x1f, 0x49, 0xc4, 0x1b, 0x67, 0x17, 0x8f, 0x65, 0x70, 0x39, 0x46,
		0x85, 0x48, 0x7d, 0x9e, 0xc9, 0xa9, 0xdc, 0x4e, 0xbf, 0xa7, 0xc0, 0xb8, 0x86, 0xa5, 0x08, 0xc9,
		0x6c, 0x94, 0xb8, 0x57, 0x1b, 0x3d, 0x98, 0x00, 0xcb, 0x95, 0x7f, 0x57, 0x61, 0x3f, 0x77, 0x1f,
		0x84, 0x33, 0x6c, 0x7d, 0x88, 0xee, 0xcb, 0xdf, 0xda, 0x2f, 0x29, 0xc7, 0x54, 0xe1, 0xca, 0xbf,
		0xcb, 0xc1, 0x18, 0x87, 0x40, 0x3f, 0x01, 0x29, 0x52, 0xb6, 0xa3, 0x2b, 0x31, 0x7b, 0x94, 0x6a,
		0xfc, 0xd9, 0xb8, 0x5a, 0x96, 0x8b, 0xf4, 0x1e, 0x14, 0x95, 0x27, 0x2e, 0x71, 0x55, 0x2e, 0x39,
		0x2e, 0xb6, 0x2b, 0xca, 0x05, 0xf4, 0x93, 0x0a, 0xa4, 0x69, 0x35, 0x89, 0xe2, 0x82, 0xcd, 0x3e,
		0x1b, 0x93, 0x31, 0x5a, 0xa4, 0x9e, 0xa6, 0x2a, 0x4c, 0x97, 0x0b, 0xa1, 0x0a, 0x26, 0x69, 0x27,
		0x3a, 0xfc, 0x38, 0xa4, 0x48, 0x31, 0x87, 0x9e, 0x8c, 0x5d, 0xf0, 0xcd, 0xce, 0xc7, 0xf2, 0xf0,
		0xde, 0xf5, 0xf3, 0xa0, 0x01, 0x48, 0x49, 0x48, 0x3a, 0xff, 0x9c, 0x02, 0x40, 0x90, 0xd9, 0xaf,
		0x26, 0x1f, 0x47, 0x87, 0xe3, 0xad, 0xb2, 0x72, 0x89, 0xaa, 0x70, 0xba, 0x3c, 0x13, 0xaa, 0xc0,
		0x7e, 0xc6, 0x59, 0x68, 0x72, 0x59, 0x21, 0x93, 0x91, 0x61, 0xd5, 0x1b, 0x7a, 0x2a, 0x46, 0xfd,
		0x74, 0xcf, 0xd6, 0x98, 0xa5, 0xaa, 0xcc, 0x94, 0x27, 0x43, 0x55, 0x58, 0xad, 0x45, 0xec, 0xf1,
		0x79, 0x05, 0xc6, 0x19, 0x3a, 0xb7, 0xc8, 0xb1, 0x34, 0x39, 0xa6, 0x4d, 0xf8, 0x5b, 0x01, 0xe5,
		0x93, 0xfd, 0x36, 0x09, 0xf5, 0xb9, 0xac, 0xa0, 0x9f, 0x52, 0x7a, 0x15, 0xc4, 0xd3, 0xc7, 0x29,
		0x89, 0x8e, 0x6d, 0x97, 0x87, 0xa9, 0x3a, 0x0f, 0x95, 0xd5, 0x50, 0x1d, 0x5e, 0x2d, 0x11, 0xc3,
		0xfc, 0xa2, 0x02, 0x13, 0x1c, 0x9f, 0x5b, 0xe6, 0x78, 0xca, 0x1c, 0xd3, 0x34, 0xfc, 0xdd, 0x8d,
		0xf2, 0xa9, 0x7e, 0xd3, 0xf4, 0x54, 0xba, 0xac, 0xa0, 0x1f, 0x87, 0x34, 0x8d, 0x65, 0xe8, 0xc2,
		0xa8, 0xbb, 0x21, 0x49, 0x93, 0xa7, 0x62, 0xf1, 0x1e, 0xba, 0x6e, 0x3d, 0xcc, 0xba, 0xbf, 0x0f,
		0xd7, 0x0b, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x78, 0xe1, 0x86, 0x66, 0x42, 0x6d, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Image) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Image")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Image but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Image but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *Image) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Classification) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Classification)
	if !ok {
		that2, ok := that.(Classification)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Classification")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Classification but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Classification but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *Classification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Classification)
	if !ok {
		that2, ok := that.(Classification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GeoLocation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GeoLocation)
	if !ok {
		that2, ok := that.(GeoLocation)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GeoLocation")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GeoLocation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GeoLocation but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Latitude != that1.Latitude {
		return fmt.Errorf("Latitude this(%v) Not Equal that(%v)", this.Latitude, that1.Latitude)
	}
	if this.Longitude != that1.Longitude {
		return fmt.Errorf("Longitude this(%v) Not Equal that(%v)", this.Longitude, that1.Longitude)
	}
	return nil
}
func (this *GeoLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoLocation)
	if !ok {
		that2, ok := that.(GeoLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	return true
}
func (this *Region) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Region")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Region but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Region but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Format != that1.Format {
		return fmt.Errorf("Format this(%v) Not Equal that(%v)", this.Format, that1.Format)
	}
	return nil
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	return true
}
func (this *Text) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Text)
	if !ok {
		that2, ok := that.(Text)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Text")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Text but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Text but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Text)
	if !ok {
		that2, ok := that.(Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Audio) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Audio)
	if !ok {
		that2, ok := that.(Audio)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Audio")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Audio but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Audio but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Format != that1.Format {
		return fmt.Errorf("Format this(%v) Not Equal that(%v)", this.Format, that1.Format)
	}
	return nil
}
func (this *Audio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Audio)
	if !ok {
		that2, ok := that.(Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	return true
}
func (this *Raw) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Raw)
	if !ok {
		that2, ok := that.(Raw)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Raw")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Raw but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Raw but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Format != that1.Format {
		return fmt.Errorf("Format this(%v) Not Equal that(%v)", this.Format, that1.Format)
	}
	return nil
}
func (this *Raw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Raw)
	if !ok {
		that2, ok := that.(Raw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	return true
}
func (this *Feature) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Probability != that1.Probability {
		return fmt.Errorf("Probability this(%v) Not Equal that(%v)", this.Probability, that1.Probability)
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if that1.Feature == nil {
		if this.Feature != nil {
			return fmt.Errorf("this.Feature != nil && that1.Feature == nil")
		}
	} else if this.Feature == nil {
		return fmt.Errorf("this.Feature == nil && that1.Feature != nil")
	} else if err := this.Feature.VerboseEqual(that1.Feature); err != nil {
		return err
	}
	return nil
}
func (this *Feature_Classification) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Classification)
	if !ok {
		that2, ok := that.(Feature_Classification)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Classification")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Classification but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Classification but is not nil && this == nil")
	}
	if !this.Classification.Equal(that1.Classification) {
		return fmt.Errorf("Classification this(%v) Not Equal that(%v)", this.Classification, that1.Classification)
	}
	return nil
}
func (this *Feature_Image) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Image)
	if !ok {
		that2, ok := that.(Feature_Image)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Image")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Image but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Image but is not nil && this == nil")
	}
	if !this.Image.Equal(that1.Image) {
		return fmt.Errorf("Image this(%v) Not Equal that(%v)", this.Image, that1.Image)
	}
	return nil
}
func (this *Feature_Text) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Text)
	if !ok {
		that2, ok := that.(Feature_Text)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Text")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Text but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Text but is not nil && this == nil")
	}
	if !this.Text.Equal(that1.Text) {
		return fmt.Errorf("Text this(%v) Not Equal that(%v)", this.Text, that1.Text)
	}
	return nil
}
func (this *Feature_Region) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Region)
	if !ok {
		that2, ok := that.(Feature_Region)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Region")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Region but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Region but is not nil && this == nil")
	}
	if !this.Region.Equal(that1.Region) {
		return fmt.Errorf("Region this(%v) Not Equal that(%v)", this.Region, that1.Region)
	}
	return nil
}
func (this *Feature_Audio) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Audio)
	if !ok {
		that2, ok := that.(Feature_Audio)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Audio")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Audio but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Audio but is not nil && this == nil")
	}
	if !this.Audio.Equal(that1.Audio) {
		return fmt.Errorf("Audio this(%v) Not Equal that(%v)", this.Audio, that1.Audio)
	}
	return nil
}
func (this *Feature_Geolocation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Geolocation)
	if !ok {
		that2, ok := that.(Feature_Geolocation)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Geolocation")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Geolocation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Geolocation but is not nil && this == nil")
	}
	if !this.Geolocation.Equal(that1.Geolocation) {
		return fmt.Errorf("Geolocation this(%v) Not Equal that(%v)", this.Geolocation, that1.Geolocation)
	}
	return nil
}
func (this *Feature_Raw) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Raw)
	if !ok {
		that2, ok := that.(Feature_Raw)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Raw")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Raw but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Raw but is not nil && this == nil")
	}
	if !this.Raw.Equal(that1.Raw) {
		return fmt.Errorf("Raw this(%v) Not Equal that(%v)", this.Raw, that1.Raw)
	}
	return nil
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return false
		}
	}
	if that1.Feature == nil {
		if this.Feature != nil {
			return false
		}
	} else if this.Feature == nil {
		return false
	} else if !this.Feature.Equal(that1.Feature) {
		return false
	}
	return true
}
func (this *Feature_Classification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Classification)
	if !ok {
		that2, ok := that.(Feature_Classification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Classification.Equal(that1.Classification) {
		return false
	}
	return true
}
func (this *Feature_Image) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Image)
	if !ok {
		that2, ok := that.(Feature_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *Feature_Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Text)
	if !ok {
		that2, ok := that.(Feature_Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	return true
}
func (this *Feature_Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Region)
	if !ok {
		that2, ok := that.(Feature_Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	return true
}
func (this *Feature_Audio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Audio)
	if !ok {
		that2, ok := that.(Feature_Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *Feature_Geolocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Geolocation)
	if !ok {
		that2, ok := that.(Feature_Geolocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Geolocation.Equal(that1.Geolocation) {
		return false
	}
	return true
}
func (this *Feature_Raw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Raw)
	if !ok {
		that2, ok := that.(Feature_Raw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Raw.Equal(that1.Raw) {
		return false
	}
	return true
}
func (this *Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Image{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Classification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Classification{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoLocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.GeoLocation{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Region{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.Text{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Audio{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Raw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Raw{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&dlframework.Feature{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	if this.Feature != nil {
		s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature_Classification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Classification{` +
		`Classification:` + fmt.Sprintf("%#v", this.Classification) + `}`}, ", ")
	return s
}
func (this *Feature_Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Image{` +
		`Image:` + fmt.Sprintf("%#v", this.Image) + `}`}, ", ")
	return s
}
func (this *Feature_Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Text{` +
		`Text:` + fmt.Sprintf("%#v", this.Text) + `}`}, ", ")
	return s
}
func (this *Feature_Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Region{` +
		`Region:` + fmt.Sprintf("%#v", this.Region) + `}`}, ", ")
	return s
}
func (this *Feature_Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Audio{` +
		`Audio:` + fmt.Sprintf("%#v", this.Audio) + `}`}, ", ")
	return s
}
func (this *Feature_Geolocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Geolocation{` +
		`Geolocation:` + fmt.Sprintf("%#v", this.Geolocation) + `}`}, ", ")
	return s
}
func (this *Feature_Raw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Raw{` +
		`Raw:` + fmt.Sprintf("%#v", this.Raw) + `}`}, ", ")
	return s
}
func valueToGoStringFeatures(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Classification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Classification) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Index))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GeoLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Index))
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	return i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	return i, nil
}

func (m *Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Text) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Audio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	return i, nil
}

func (m *Raw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Raw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Type))
	}
	if m.Probability != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Probability))))
		i += 4
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			dAtA[i] = 0x2a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovFeatures(uint64(len(k))) + 1 + len(v) + sovFeatures(uint64(len(v)))
			i = encodeVarintFeatures(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFeatures(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintFeatures(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Feature != nil {
		nn1, err := m.Feature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Feature_Classification) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Classification != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Classification.Size()))
		n2, err := m.Classification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Feature_Image) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Image != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Image.Size()))
		n3, err := m.Image.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Feature_Text) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Text != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Text.Size()))
		n4, err := m.Text.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Feature_Region) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Region != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Region.Size()))
		n5, err := m.Region.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Feature_Audio) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Audio != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Audio.Size()))
		n6, err := m.Audio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Feature_Geolocation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Geolocation != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Geolocation.Size()))
		n7, err := m.Geolocation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Feature_Raw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Raw != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Raw.Size()))
		n8, err := m.Raw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func encodeVarintFeatures(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedImage(r randyFeatures, easy bool) *Image {
	this := &Image{}
	this.ID = string(randStringFeatures(r))
	v1 := r.Intn(100)
	this.Data = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClassification(r randyFeatures, easy bool) *Classification {
	this := &Classification{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Name = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGeoLocation(r randyFeatures, easy bool) *GeoLocation {
	this := &GeoLocation{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Latitude = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Latitude *= -1
	}
	this.Longitude = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Longitude *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRegion(r randyFeatures, easy bool) *Region {
	this := &Region{}
	v2 := r.Intn(100)
	this.Data = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Format = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedText(r randyFeatures, easy bool) *Text {
	this := &Text{}
	v3 := r.Intn(100)
	this.Data = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAudio(r randyFeatures, easy bool) *Audio {
	this := &Audio{}
	v4 := r.Intn(100)
	this.Data = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Format = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaw(r randyFeatures, easy bool) *Raw {
	this := &Raw{}
	v5 := r.Intn(100)
	this.Data = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Format = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeature(r randyFeatures, easy bool) *Feature {
	this := &Feature{}
	this.ID = string(randStringFeatures(r))
	this.Type = FeatureType([]int32{0, 1, 2, 3, 4, 5, 6, 100}[r.Intn(8)])
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Metadata = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.Metadata[randStringFeatures(r)] = randStringFeatures(r)
		}
	}
	oneofNumber_Feature := []int32{6, 7, 8, 9, 10, 11, 1000}[r.Intn(7)]
	switch oneofNumber_Feature {
	case 6:
		this.Feature = NewPopulatedFeature_Classification(r, easy)
	case 7:
		this.Feature = NewPopulatedFeature_Image(r, easy)
	case 8:
		this.Feature = NewPopulatedFeature_Text(r, easy)
	case 9:
		this.Feature = NewPopulatedFeature_Region(r, easy)
	case 10:
		this.Feature = NewPopulatedFeature_Audio(r, easy)
	case 11:
		this.Feature = NewPopulatedFeature_Geolocation(r, easy)
	case 1000:
		this.Feature = NewPopulatedFeature_Raw(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeature_Classification(r randyFeatures, easy bool) *Feature_Classification {
	this := &Feature_Classification{}
	this.Classification = NewPopulatedClassification(r, easy)
	return this
}
func NewPopulatedFeature_Image(r randyFeatures, easy bool) *Feature_Image {
	this := &Feature_Image{}
	this.Image = NewPopulatedImage(r, easy)
	return this
}
func NewPopulatedFeature_Text(r randyFeatures, easy bool) *Feature_Text {
	this := &Feature_Text{}
	this.Text = NewPopulatedText(r, easy)
	return this
}
func NewPopulatedFeature_Region(r randyFeatures, easy bool) *Feature_Region {
	this := &Feature_Region{}
	this.Region = NewPopulatedRegion(r, easy)
	return this
}
func NewPopulatedFeature_Audio(r randyFeatures, easy bool) *Feature_Audio {
	this := &Feature_Audio{}
	this.Audio = NewPopulatedAudio(r, easy)
	return this
}
func NewPopulatedFeature_Geolocation(r randyFeatures, easy bool) *Feature_Geolocation {
	this := &Feature_Geolocation{}
	this.Geolocation = NewPopulatedGeoLocation(r, easy)
	return this
}
func NewPopulatedFeature_Raw(r randyFeatures, easy bool) *Feature_Raw {
	this := &Feature_Raw{}
	this.Raw = NewPopulatedRaw(r, easy)
	return this
}

type randyFeatures interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFeatures(r randyFeatures) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFeatures(r randyFeatures) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneFeatures(r)
	}
	return string(tmps)
}
func randUnrecognizedFeatures(r randyFeatures, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFeatures(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFeatures(dAtA []byte, r randyFeatures, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFeatures(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Classification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovFeatures(uint64(m.Index))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *GeoLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovFeatures(uint64(m.Index))
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Audio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Raw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFeatures(uint64(m.Type))
	}
	if m.Probability != 0 {
		n += 5
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFeatures(uint64(len(k))) + 1 + len(v) + sovFeatures(uint64(len(v)))
			n += mapEntrySize + 1 + sovFeatures(uint64(mapEntrySize))
		}
	}
	if m.Feature != nil {
		n += m.Feature.Size()
	}
	return n
}

func (m *Feature_Classification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Classification != nil {
		l = m.Classification.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Audio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Geolocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Geolocation != nil {
		l = m.Geolocation.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Raw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 2 + l + sovFeatures(uint64(l))
	}
	return n
}

func sovFeatures(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFeatures(x uint64) (n int) {
	return sovFeatures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Image{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Classification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Classification{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoLocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoLocation{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Region{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Text{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Audio{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Raw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Raw{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&Feature{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`Feature:` + fmt.Sprintf("%v", this.Feature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Classification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Classification{`,
		`Classification:` + strings.Replace(fmt.Sprintf("%v", this.Classification), "Classification", "Classification", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Image{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "Image", "Image", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Text{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "Text", "Text", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Region{`,
		`Region:` + strings.Replace(fmt.Sprintf("%v", this.Region), "Region", "Region", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Audio{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "Audio", "Audio", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Geolocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Geolocation{`,
		`Geolocation:` + strings.Replace(fmt.Sprintf("%v", this.Geolocation), "GeoLocation", "GeoLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Raw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Raw{`,
		`Raw:` + strings.Replace(fmt.Sprintf("%v", this.Raw), "Raw", "Raw", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFeatures(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Classification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Classification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Classification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Audio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Audio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Raw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Raw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Raw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FeatureType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Probability = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFeatures
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFeatures
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFeatures(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFeatures
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Classification{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Classification{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Image{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Image{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Text{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Region{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Region{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Audio{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Audio{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geolocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GeoLocation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Geolocation{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Raw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Raw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeatures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFeatures
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFeatures(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFeatures = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeatures   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("features.proto", fileDescriptor_features_08907a536a68b978) }
func init() { golang_proto.RegisterFile("features.proto", fileDescriptor_features_08907a536a68b978) }

var fileDescriptor_features_08907a536a68b978 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xce, 0x24, 0x71, 0x7e, 0x3c, 0x97, 0x10, 0x0d, 0xbf, 0xdc, 0xb0, 0xb5, 0xd3, 0xd0, 0x43,
	0x40, 0x6d, 0x16, 0xed, 0x5e, 0x60, 0x0b, 0x87, 0x78, 0x9b, 0x2e, 0x11, 0xdb, 0x8d, 0x48, 0x53,
	0x75, 0x85, 0xb8, 0x4c, 0xd6, 0x13, 0x63, 0xd5, 0xce, 0x04, 0xef, 0x84, 0x6c, 0x24, 0x0e, 0xfc,
	0x09, 0xfc, 0x09, 0x1c, 0xf9, 0x13, 0x38, 0xa1, 0x1e, 0xb9, 0xd1, 0x63, 0x4f, 0x56, 0x37, 0x7b,
	0x41, 0x9c, 0x2a, 0x9f, 0x38, 0x22, 0xcf, 0x38, 0x30, 0x81, 0x28, 0x5d, 0x40, 0xea, 0x6d, 0xe6,
	0xcd, 0xfb, 0xbe, 0xef, 0xcd, 0xcb, 0xbc, 0x2f, 0x86, 0xca, 0x88, 0x12, 0x3e, 0x0d, 0xe9, 0x69,
	0x6b, 0x12, 0x32, 0xce, 0xf0, 0x56, 0xe0, 0x07, 0xcc, 0xa1, 0xfe, 0xe9, 0x09, 0x9b, 0xd0, 0x16,
	0x0b, 0xdd, 0x96, 0xe3, 0x8f, 0x42, 0x12, 0xd0, 0x19, 0x0b, 0x1f, 0xd5, 0xb6, 0x5c, 0xc6, 0x5c,
	0x9f, 0x6e, 0x93, 0x89, 0xb7, 0x4d, 0xc6, 0x63, 0xc6, 0x09, 0xf7, 0xd8, 0x38, 0xc5, 0xd6, 0x6e,
	0xb9, 0x1e, 0xff, 0x72, 0x3a, 0x6c, 0x9d, 0xb0, 0x60, 0xdb, 0x65, 0x2e, 0xdb, 0x16, 0xe1, 0xe1,
	0x74, 0x24, 0x76, 0x62, 0x23, 0x56, 0x32, 0xbd, 0x31, 0x05, 0xad, 0x1b, 0x10, 0x97, 0xe2, 0x8f,
	0x21, 0xeb, 0x39, 0x06, 0xaa, 0xa3, 0x66, 0xd9, 0xbe, 0xb5, 0x88, 0xac, 0x6c, 0xf7, 0xce, 0x6f,
	0x91, 0x75, 0xc5, 0x73, 0x6e, 0xb2, 0xc0, 0xe3, 0x34, 0x98, 0xf0, 0x79, 0x1c, 0x59, 0xaf, 0xcd,
	0x49, 0xe0, 0xef, 0x35, 0xd4, 0x68, 0xa3, 0x9f, 0xf5, 0x1c, 0x7c, 0x0b, 0xf2, 0x0e, 0xe1, 0xc4,
	0xc8, 0xd6, 0x51, 0xf3, 0x8a, 0x7d, 0x35, 0x8e, 0xac, 0x37, 0x64, 0x6a, 0x12, 0x55, 0x93, 0x45,
	0x5a, 0x63, 0x06, 0x95, 0x7d, 0x9f, 0x9c, 0x9e, 0x7a, 0x23, 0xef, 0x44, 0x94, 0x8f, 0xdf, 0x07,
	0xcd, 0x1b, 0x3b, 0xf4, 0x4c, 0x94, 0xa0, 0xd9, 0xb5, 0x38, 0xb2, 0xde, 0x4c, 0xc5, 0x92, 0xb0,
	0x4a, 0x21, 0x13, 0x13, 0xc9, 0x31, 0x09, 0xa8, 0x90, 0x2c, 0xab, 0x92, 0x49, 0x74, 0x45, 0x32,
	0x09, 0xec, 0xe5, 0x9f, 0x7f, 0x6f, 0xa1, 0xc6, 0x4f, 0x08, 0xf4, 0x03, 0xca, 0x0e, 0xd9, 0x7f,
	0x96, 0xfd, 0x10, 0x4a, 0x3e, 0xe1, 0x1e, 0x9f, 0x3a, 0x52, 0x1a, 0xd9, 0xd7, 0xe2, 0xc8, 0xba,
	0x2a, 0x41, 0xcb, 0x13, 0x15, 0xf7, 0x67, 0x3a, 0xfe, 0x08, 0xca, 0x3e, 0x1b, 0xbb, 0x12, 0x9b,
	0x13, 0x58, 0x33, 0x8e, 0xac, 0x5a, 0x8a, 0x5d, 0x1e, 0xa9, 0xe0, 0xbf, 0x00, 0xe9, 0x05, 0x42,
	0x28, 0xf4, 0xa9, 0x9b, 0x94, 0xbe, 0x6c, 0x39, 0xba, 0x54, 0xcb, 0xf1, 0x2e, 0x14, 0x46, 0x2c,
	0x0c, 0x08, 0x4f, 0x1b, 0xf6, 0x76, 0x1c, 0x59, 0x6f, 0x49, 0x80, 0x8c, 0xab, 0x90, 0x34, 0x35,
	0xd5, 0xbc, 0x0d, 0xf9, 0x01, 0x3d, 0xe3, 0xff, 0xf2, 0x47, 0x4e, 0xc1, 0x5f, 0x81, 0xd6, 0x9e,
	0x3a, 0x1e, 0x7b, 0x89, 0xf5, 0x32, 0xc8, 0xf5, 0xc9, 0xec, 0x25, 0x0a, 0xfe, 0x52, 0x82, 0xe2,
	0x5d, 0x39, 0xc3, 0xff, 0x77, 0x90, 0x8e, 0x21, 0xcf, 0xe7, 0x13, 0xf9, 0x3c, 0x2a, 0x3b, 0xef,
	0xb6, 0x36, 0x59, 0x41, 0x2b, 0xd5, 0x1c, 0xcc, 0x27, 0x54, 0xbd, 0x5f, 0x42, 0xb0, 0x72, 0xbf,
	0x24, 0x80, 0x6d, 0xd0, 0x27, 0x21, 0x1b, 0x92, 0xa1, 0xe7, 0x7b, 0x7c, 0x6e, 0xe4, 0xeb, 0xa8,
	0x99, 0xb5, 0xeb, 0x71, 0x64, 0x6d, 0x49, 0x94, 0x72, 0xa8, 0x82, 0x55, 0x10, 0x1e, 0x43, 0x29,
	0xa0, 0x9c, 0x88, 0xb6, 0x6a, 0xf5, 0x5c, 0x53, 0xdf, 0xd9, 0xbd, 0x54, 0x85, 0xad, 0x7b, 0x29,
	0xaa, 0x33, 0xe6, 0xe1, 0x5c, 0x9d, 0x98, 0x25, 0xdd, 0xca, 0xc4, 0x2c, 0x83, 0xf8, 0x1b, 0xa8,
	0x9c, 0xac, 0xf8, 0x84, 0x51, 0xa8, 0xa3, 0xa6, 0xbe, 0x73, 0x73, 0xb3, 0xea, 0xaa, 0xb7, 0xd8,
	0x37, 0xe2, 0xc8, 0xaa, 0xaf, 0xf2, 0xfc, 0x73, 0xbe, 0x3f, 0xc9, 0xf4, 0xff, 0xa6, 0x85, 0x8f,
	0x41, 0xf3, 0x12, 0x73, 0x34, 0x8a, 0x42, 0xf4, 0x9d, 0xcd, 0xa2, 0xc2, 0x47, 0xe5, 0xab, 0x11,
	0xa8, 0xb5, 0x12, 0x92, 0x10, 0x0f, 0x20, 0xcf, 0xe9, 0x19, 0x37, 0x4a, 0x82, 0xb8, 0xb1, 0x99,
	0x38, 0x99, 0x3d, 0xe9, 0x4c, 0x09, 0x66, 0x2d, 0xad, 0x60, 0xc3, 0x5f, 0x40, 0x21, 0x14, 0xde,
	0x60, 0x94, 0x05, 0xef, 0x8d, 0xcd, 0xbc, 0xd2, 0x47, 0xec, 0xad, 0x38, 0xb2, 0x0c, 0x89, 0x5b,
	0xcb, 0x9d, 0x72, 0x26, 0xdd, 0x20, 0xc9, 0x20, 0x1b, 0x70, 0x99, 0x6e, 0x88, 0x99, 0x97, 0xdd,
	0x10, 0xa8, 0xf5, 0xdd, 0x10, 0x47, 0x78, 0x02, 0xba, 0x4b, 0x99, 0x9f, 0x7a, 0xb2, 0xa1, 0x0b,
	0xfe, 0x17, 0x3c, 0x7d, 0xc5, 0xc4, 0xed, 0xeb, 0x71, 0x64, 0x5d, 0x53, 0x18, 0xd6, 0x6a, 0xa9,
	0x12, 0xf8, 0x33, 0xc8, 0x85, 0x64, 0x66, 0xfc, 0x2a, 0x7f, 0xd8, 0xeb, 0x2f, 0xe8, 0x13, 0x99,
	0xc9, 0xe9, 0x4a, 0x2f, 0x12, 0x92, 0xd9, 0x2a, 0x75, 0xc2, 0x55, 0xbb, 0x0d, 0xaf, 0xac, 0x3c,
	0x72, 0x5c, 0x85, 0xdc, 0x23, 0x3a, 0x97, 0x4e, 0xd0, 0x4f, 0x96, 0xf8, 0x75, 0xd0, 0xbe, 0x26,
	0xfe, 0x34, 0xfd, 0xcb, 0xea, 0xcb, 0xcd, 0x5e, 0xf6, 0x03, 0x24, 0x6d, 0xc4, 0x2e, 0x43, 0x31,
	0xfd, 0x12, 0x78, 0x8f, 0x83, 0xae, 0x0c, 0x37, 0xd6, 0xa1, 0xf8, 0xe0, 0xe8, 0xd3, 0xa3, 0xde,
	0xc3, 0xa3, 0x6a, 0x06, 0x97, 0x41, 0xeb, 0xde, 0x6b, 0x1f, 0x74, 0xaa, 0x08, 0x63, 0xa8, 0xec,
	0x1f, 0xb6, 0xef, 0xdf, 0xef, 0xde, 0xed, 0xee, 0xb7, 0x07, 0xdd, 0xde, 0x51, 0x35, 0x8b, 0x5f,
	0x05, 0xfd, 0xa0, 0xd3, 0x3b, 0xec, 0xa5, 0x81, 0x1c, 0x06, 0x28, 0xf4, 0x3b, 0x07, 0xc9, 0x3a,
	0x8f, 0x4b, 0x90, 0x1f, 0x74, 0x8e, 0x07, 0x55, 0x2d, 0x61, 0x69, 0x3f, 0xb8, 0xd3, 0xed, 0x55,
	0x0b, 0xb8, 0x08, 0xb9, 0x7e, 0xfb, 0x61, 0xd5, 0xb1, 0xbb, 0x4f, 0xcf, 0xcd, 0xcc, 0xb3, 0x73,
	0x13, 0x3d, 0x3f, 0x37, 0xd1, 0xef, 0xe7, 0x26, 0xfa, 0x76, 0x61, 0xa2, 0x1f, 0x16, 0x26, 0xfa,
	0x71, 0x61, 0xa2, 0xc7, 0x0b, 0x13, 0xfd, 0xbc, 0x30, 0xd1, 0x93, 0x85, 0x89, 0x9e, 0x2d, 0x4c,
	0xf4, 0xdd, 0x85, 0x99, 0x79, 0x7c, 0x61, 0xa2, 0x27, 0x17, 0x66, 0xe6, 0xe9, 0x85, 0x99, 0xf9,
	0x5c, 0x57, 0x9a, 0x36, 0x2c, 0x88, 0xef, 0x8b, 0xdd, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00,
	0x04, 0x57, 0x20, 0xdc, 0x08, 0x00, 0x00,
}
