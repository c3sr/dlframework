// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: features.proto

package dlframework

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FeatureType int32

const (
	FeatureType_UNKNOWN         FeatureType = 0
	FeatureType_IMAGE           FeatureType = 1
	FeatureType_RAW_IMAGE       FeatureType = 2
	FeatureType_CLASSIFICATION  FeatureType = 3
	FeatureType_BOUNDINGBOX     FeatureType = 4
	FeatureType_SEMANTICSEGMENT FeatureType = 5
	FeatureType_INSTANCESEGMENT FeatureType = 6
	FeatureType_GEOLOCATION     FeatureType = 7
	FeatureType_REGION          FeatureType = 8
	FeatureType_TEXT            FeatureType = 9
	FeatureType_AUDIO           FeatureType = 10
	FeatureType_RAW             FeatureType = 100
)

var FeatureType_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "IMAGE",
	2:   "RAW_IMAGE",
	3:   "CLASSIFICATION",
	4:   "BOUNDINGBOX",
	5:   "SEMANTICSEGMENT",
	6:   "INSTANCESEGMENT",
	7:   "GEOLOCATION",
	8:   "REGION",
	9:   "TEXT",
	10:  "AUDIO",
	100: "RAW",
}

var FeatureType_value = map[string]int32{
	"UNKNOWN":         0,
	"IMAGE":           1,
	"RAW_IMAGE":       2,
	"CLASSIFICATION":  3,
	"BOUNDINGBOX":     4,
	"SEMANTICSEGMENT": 5,
	"INSTANCESEGMENT": 6,
	"GEOLOCATION":     7,
	"REGION":          8,
	"TEXT":            9,
	"AUDIO":           10,
	"RAW":             100,
}

func (x FeatureType) String() string {
	return proto.EnumName(FeatureType_name, int32(x))
}

func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{0}
}

type Image struct {
	// An id used to identify the output feature: maps to input_id for output
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	// The image is base64 encoded
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *Image) Reset()      { *m = Image{} }
func (*Image) ProtoMessage() {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RawImage struct {
	// An id used to identify the output feature: maps to input_id for output
	ID        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	DataType  string    `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty" yaml:"data_type,omitempty"`
	CharList  []int32   `protobuf:"varint,3,rep,packed,name=char_list,json=charList,proto3" json:"char_list,omitempty" yaml:"char_list,omitempty"`
	FloatList []float32 `protobuf:"fixed32,4,rep,packed,name=float_list,json=floatList,proto3" json:"float_list,omitempty" yaml:"float_list,omitempty"`
	Width     int32     `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty" yaml:"width,omitempty"`
	Height    int32     `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty" yaml:"height,omitempty"`
	Channels  int32     `protobuf:"varint,7,opt,name=channels,proto3" json:"channels,omitempty" yaml:"channels,omitempty"`
	// compressed data is only used by the webserver and javascript codes
	CompressedData []byte `protobuf:"bytes,8,opt,name=compressed_data,json=compressedData,proto3" json:"compressed_data,omitempty" yaml:"compressed_data,omitempty"`
}

func (m *RawImage) Reset()      { *m = RawImage{} }
func (*RawImage) ProtoMessage() {}
func (*RawImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{1}
}
func (m *RawImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawImage.Merge(m, src)
}
func (m *RawImage) XXX_Size() int {
	return m.Size()
}
func (m *RawImage) XXX_DiscardUnknown() {
	xxx_messageInfo_RawImage.DiscardUnknown(m)
}

var xxx_messageInfo_RawImage proto.InternalMessageInfo

func (m *RawImage) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RawImage) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *RawImage) GetCharList() []int32 {
	if m != nil {
		return m.CharList
	}
	return nil
}

func (m *RawImage) GetFloatList() []float32 {
	if m != nil {
		return m.FloatList
	}
	return nil
}

func (m *RawImage) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *RawImage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RawImage) GetChannels() int32 {
	if m != nil {
		return m.Channels
	}
	return 0
}

func (m *RawImage) GetCompressedData() []byte {
	if m != nil {
		return m.CompressedData
	}
	return nil
}

type Classification struct {
	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty" yaml:"label,omitempty"`
}

func (m *Classification) Reset()      { *m = Classification{} }
func (*Classification) ProtoMessage() {}
func (*Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{2}
}
func (m *Classification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Classification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Classification.Merge(m, src)
}
func (m *Classification) XXX_Size() int {
	return m.Size()
}
func (m *Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_Classification proto.InternalMessageInfo

func (m *Classification) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Classification) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type BoundingBox struct {
	Index int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Label string  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty" yaml:"label,omitempty"`
	Xmin  float32 `protobuf:"fixed32,3,opt,name=xmin,proto3" json:"xmin,omitempty" yaml:"xmin,omitempty"`
	Xmax  float32 `protobuf:"fixed32,4,opt,name=xmax,proto3" json:"xmax,omitempty" yaml:"xmax,omitempty"`
	Ymin  float32 `protobuf:"fixed32,5,opt,name=ymin,proto3" json:"ymin,omitempty" yaml:"ymin,omitempty"`
	Ymax  float32 `protobuf:"fixed32,6,opt,name=ymax,proto3" json:"ymax,omitempty" yaml:"ymax,omitempty"`
}

func (m *BoundingBox) Reset()      { *m = BoundingBox{} }
func (*BoundingBox) ProtoMessage() {}
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{3}
}
func (m *BoundingBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoundingBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoundingBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoundingBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundingBox.Merge(m, src)
}
func (m *BoundingBox) XXX_Size() int {
	return m.Size()
}
func (m *BoundingBox) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundingBox.DiscardUnknown(m)
}

var xxx_messageInfo_BoundingBox proto.InternalMessageInfo

func (m *BoundingBox) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BoundingBox) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *BoundingBox) GetXmin() float32 {
	if m != nil {
		return m.Xmin
	}
	return 0
}

func (m *BoundingBox) GetXmax() float32 {
	if m != nil {
		return m.Xmax
	}
	return 0
}

func (m *BoundingBox) GetYmin() float32 {
	if m != nil {
		return m.Ymin
	}
	return 0
}

func (m *BoundingBox) GetYmax() float32 {
	if m != nil {
		return m.Ymax
	}
	return 0
}

type SemanticSegment struct {
	Height  int32   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty" yaml:"height,omitempty"`
	Width   int32   `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty" yaml:"width,omitempty"`
	IntMask []int32 `protobuf:"varint,3,rep,packed,name=int_mask,json=intMask,proto3" json:"int_mask,omitempty" yaml:"int_mask,omitempty"`
}

func (m *SemanticSegment) Reset()      { *m = SemanticSegment{} }
func (*SemanticSegment) ProtoMessage() {}
func (*SemanticSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{4}
}
func (m *SemanticSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SemanticSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SemanticSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SemanticSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SemanticSegment.Merge(m, src)
}
func (m *SemanticSegment) XXX_Size() int {
	return m.Size()
}
func (m *SemanticSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_SemanticSegment.DiscardUnknown(m)
}

var xxx_messageInfo_SemanticSegment proto.InternalMessageInfo

func (m *SemanticSegment) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SemanticSegment) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *SemanticSegment) GetIntMask() []int32 {
	if m != nil {
		return m.IntMask
	}
	return nil
}

type InstanceSegment struct {
	Index     int32     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Label     string    `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty" yaml:"label,omitempty"`
	Xmin      float32   `protobuf:"fixed32,3,opt,name=xmin,proto3" json:"xmin,omitempty" yaml:"xmin,omitempty"`
	Xmax      float32   `protobuf:"fixed32,4,opt,name=xmax,proto3" json:"xmax,omitempty" yaml:"xmax,omitempty"`
	Ymin      float32   `protobuf:"fixed32,5,opt,name=ymin,proto3" json:"ymin,omitempty" yaml:"ymin,omitempty"`
	Ymax      float32   `protobuf:"fixed32,6,opt,name=ymax,proto3" json:"ymax,omitempty" yaml:"ymax,omitempty"`
	MaskType  string    `protobuf:"bytes,7,opt,name=mask_type,json=maskType,proto3" json:"mask_type,omitempty" yaml:"mask_type,omitempty"`
	Height    int32     `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty" yaml:"height,omitempty"`
	Width     int32     `protobuf:"varint,9,opt,name=width,proto3" json:"width,omitempty" yaml:"width,omitempty"`
	IntMask   []int32   `protobuf:"varint,10,rep,packed,name=int_mask,json=intMask,proto3" json:"int_mask,omitempty" yaml:"int_mask,omitempty"`
	FloatMask []float32 `protobuf:"fixed32,11,rep,packed,name=float_mask,json=floatMask,proto3" json:"float_mask,omitempty" yaml:"float_mask,omitempty"`
}

func (m *InstanceSegment) Reset()      { *m = InstanceSegment{} }
func (*InstanceSegment) ProtoMessage() {}
func (*InstanceSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{5}
}
func (m *InstanceSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceSegment.Merge(m, src)
}
func (m *InstanceSegment) XXX_Size() int {
	return m.Size()
}
func (m *InstanceSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceSegment.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceSegment proto.InternalMessageInfo

func (m *InstanceSegment) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InstanceSegment) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *InstanceSegment) GetXmin() float32 {
	if m != nil {
		return m.Xmin
	}
	return 0
}

func (m *InstanceSegment) GetXmax() float32 {
	if m != nil {
		return m.Xmax
	}
	return 0
}

func (m *InstanceSegment) GetYmin() float32 {
	if m != nil {
		return m.Ymin
	}
	return 0
}

func (m *InstanceSegment) GetYmax() float32 {
	if m != nil {
		return m.Ymax
	}
	return 0
}

func (m *InstanceSegment) GetMaskType() string {
	if m != nil {
		return m.MaskType
	}
	return ""
}

func (m *InstanceSegment) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *InstanceSegment) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *InstanceSegment) GetIntMask() []int32 {
	if m != nil {
		return m.IntMask
	}
	return nil
}

func (m *InstanceSegment) GetFloatMask() []float32 {
	if m != nil {
		return m.FloatMask
	}
	return nil
}

type GeoLocation struct {
	Index     int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Latitude  float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty" yaml:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty" yaml:"longitude,omitempty"`
}

func (m *GeoLocation) Reset()      { *m = GeoLocation{} }
func (*GeoLocation) ProtoMessage() {}
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{6}
}
func (m *GeoLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoLocation.Merge(m, src)
}
func (m *GeoLocation) XXX_Size() int {
	return m.Size()
}
func (m *GeoLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GeoLocation proto.InternalMessageInfo

func (m *GeoLocation) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GeoLocation) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoLocation) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Region struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" yaml:"format,omitempty"`
}

func (m *Region) Reset()      { *m = Region{} }
func (*Region) ProtoMessage() {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{7}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Region) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type Text struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *Text) Reset()      { *m = Text{} }
func (*Text) ProtoMessage() {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{8}
}
func (m *Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return m.Size()
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Audio struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" yaml:"format,omitempty"`
}

func (m *Audio) Reset()      { *m = Audio{} }
func (*Audio) ProtoMessage() {}
func (*Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{9}
}
func (m *Audio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audio.Merge(m, src)
}
func (m *Audio) XXX_Size() int {
	return m.Size()
}
func (m *Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_Audio proto.InternalMessageInfo

func (m *Audio) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Audio) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type Raw struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" yaml:"format,omitempty"`
}

func (m *Raw) Reset()      { *m = Raw{} }
func (*Raw) ProtoMessage() {}
func (*Raw) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{10}
}
func (m *Raw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Raw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Raw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Raw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Raw.Merge(m, src)
}
func (m *Raw) XXX_Size() int {
	return m.Size()
}
func (m *Raw) XXX_DiscardUnknown() {
	xxx_messageInfo_Raw.DiscardUnknown(m)
}

var xxx_messageInfo_Raw proto.InternalMessageInfo

func (m *Raw) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Raw) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type Feature struct {
	ID          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Type        FeatureType       `protobuf:"varint,3,opt,name=type,proto3,enum=mlmodelscope.org.dlframework.FeatureType" json:"type,omitempty" yaml:"type,omitempty"`
	Probability float32           `protobuf:"fixed32,4,opt,name=probability,proto3" json:"probability,omitempty" yaml:"probability,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" yaml:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Feature:
	//	*Feature_Image
	//	*Feature_RawImage
	//	*Feature_Classification
	//	*Feature_BoundingBox
	//	*Feature_SemanticSegment
	//	*Feature_InstanceSegment
	//	*Feature_Text
	//	*Feature_Region
	//	*Feature_Audio
	//	*Feature_Geolocation
	//	*Feature_Raw
	Feature isFeature_Feature `protobuf_oneof:"feature"`
}

func (m *Feature) Reset()      { *m = Feature{} }
func (*Feature) ProtoMessage() {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_2216f05915163cdf, []int{11}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

type isFeature_Feature interface {
	isFeature_Feature()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type Feature_Image struct {
	Image *Image `protobuf:"bytes,6,opt,name=image,proto3,oneof"`
}
type Feature_RawImage struct {
	RawImage *RawImage `protobuf:"bytes,7,opt,name=raw_image,json=rawImage,proto3,oneof"`
}
type Feature_Classification struct {
	Classification *Classification `protobuf:"bytes,8,opt,name=classification,proto3,oneof"`
}
type Feature_BoundingBox struct {
	BoundingBox *BoundingBox `protobuf:"bytes,9,opt,name=bounding_box,json=boundingBox,proto3,oneof"`
}
type Feature_SemanticSegment struct {
	SemanticSegment *SemanticSegment `protobuf:"bytes,10,opt,name=semantic_segment,json=semanticSegment,proto3,oneof"`
}
type Feature_InstanceSegment struct {
	InstanceSegment *InstanceSegment `protobuf:"bytes,11,opt,name=instance_segment,json=instanceSegment,proto3,oneof"`
}
type Feature_Text struct {
	Text *Text `protobuf:"bytes,12,opt,name=text,proto3,oneof"`
}
type Feature_Region struct {
	Region *Region `protobuf:"bytes,13,opt,name=region,proto3,oneof"`
}
type Feature_Audio struct {
	Audio *Audio `protobuf:"bytes,14,opt,name=audio,proto3,oneof"`
}
type Feature_Geolocation struct {
	Geolocation *GeoLocation `protobuf:"bytes,15,opt,name=geolocation,proto3,oneof"`
}
type Feature_Raw struct {
	Raw *Raw `protobuf:"bytes,1000,opt,name=raw,proto3,oneof"`
}

func (*Feature_Image) isFeature_Feature()           {}
func (*Feature_RawImage) isFeature_Feature()        {}
func (*Feature_Classification) isFeature_Feature()  {}
func (*Feature_BoundingBox) isFeature_Feature()     {}
func (*Feature_SemanticSegment) isFeature_Feature() {}
func (*Feature_InstanceSegment) isFeature_Feature() {}
func (*Feature_Text) isFeature_Feature()            {}
func (*Feature_Region) isFeature_Feature()          {}
func (*Feature_Audio) isFeature_Feature()           {}
func (*Feature_Geolocation) isFeature_Feature()     {}
func (*Feature_Raw) isFeature_Feature()             {}

func (m *Feature) GetFeature() isFeature_Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *Feature) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Feature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return FeatureType_UNKNOWN
}

func (m *Feature) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *Feature) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Feature) GetImage() *Image {
	if x, ok := m.GetFeature().(*Feature_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Feature) GetRawImage() *RawImage {
	if x, ok := m.GetFeature().(*Feature_RawImage); ok {
		return x.RawImage
	}
	return nil
}

func (m *Feature) GetClassification() *Classification {
	if x, ok := m.GetFeature().(*Feature_Classification); ok {
		return x.Classification
	}
	return nil
}

func (m *Feature) GetBoundingBox() *BoundingBox {
	if x, ok := m.GetFeature().(*Feature_BoundingBox); ok {
		return x.BoundingBox
	}
	return nil
}

func (m *Feature) GetSemanticSegment() *SemanticSegment {
	if x, ok := m.GetFeature().(*Feature_SemanticSegment); ok {
		return x.SemanticSegment
	}
	return nil
}

func (m *Feature) GetInstanceSegment() *InstanceSegment {
	if x, ok := m.GetFeature().(*Feature_InstanceSegment); ok {
		return x.InstanceSegment
	}
	return nil
}

func (m *Feature) GetText() *Text {
	if x, ok := m.GetFeature().(*Feature_Text); ok {
		return x.Text
	}
	return nil
}

func (m *Feature) GetRegion() *Region {
	if x, ok := m.GetFeature().(*Feature_Region); ok {
		return x.Region
	}
	return nil
}

func (m *Feature) GetAudio() *Audio {
	if x, ok := m.GetFeature().(*Feature_Audio); ok {
		return x.Audio
	}
	return nil
}

func (m *Feature) GetGeolocation() *GeoLocation {
	if x, ok := m.GetFeature().(*Feature_Geolocation); ok {
		return x.Geolocation
	}
	return nil
}

func (m *Feature) GetRaw() *Raw {
	if x, ok := m.GetFeature().(*Feature_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Feature) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Feature_OneofMarshaler, _Feature_OneofUnmarshaler, _Feature_OneofSizer, []interface{}{
		(*Feature_Image)(nil),
		(*Feature_RawImage)(nil),
		(*Feature_Classification)(nil),
		(*Feature_BoundingBox)(nil),
		(*Feature_SemanticSegment)(nil),
		(*Feature_InstanceSegment)(nil),
		(*Feature_Text)(nil),
		(*Feature_Region)(nil),
		(*Feature_Audio)(nil),
		(*Feature_Geolocation)(nil),
		(*Feature_Raw)(nil),
	}
}

func _Feature_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Feature)
	// feature
	switch x := m.Feature.(type) {
	case *Feature_Image:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Feature_RawImage:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RawImage); err != nil {
			return err
		}
	case *Feature_Classification:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Classification); err != nil {
			return err
		}
	case *Feature_BoundingBox:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoundingBox); err != nil {
			return err
		}
	case *Feature_SemanticSegment:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SemanticSegment); err != nil {
			return err
		}
	case *Feature_InstanceSegment:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstanceSegment); err != nil {
			return err
		}
	case *Feature_Text:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *Feature_Region:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Region); err != nil {
			return err
		}
	case *Feature_Audio:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case *Feature_Geolocation:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Geolocation); err != nil {
			return err
		}
	case *Feature_Raw:
		_ = b.EncodeVarint(1000<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Raw); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Feature.Feature has unexpected type %T", x)
	}
	return nil
}

func _Feature_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Feature)
	switch tag {
	case 6: // feature.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Image)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Image{msg}
		return true, err
	case 7: // feature.raw_image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RawImage)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_RawImage{msg}
		return true, err
	case 8: // feature.classification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Classification)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Classification{msg}
		return true, err
	case 9: // feature.bounding_box
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoundingBox)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_BoundingBox{msg}
		return true, err
	case 10: // feature.semantic_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SemanticSegment)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_SemanticSegment{msg}
		return true, err
	case 11: // feature.instance_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstanceSegment)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_InstanceSegment{msg}
		return true, err
	case 12: // feature.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Text)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Text{msg}
		return true, err
	case 13: // feature.region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Region)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Region{msg}
		return true, err
	case 14: // feature.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Audio)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Audio{msg}
		return true, err
	case 15: // feature.geolocation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeoLocation)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Geolocation{msg}
		return true, err
	case 1000: // feature.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Raw)
		err := b.DecodeMessage(msg)
		m.Feature = &Feature_Raw{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Feature_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Feature)
	// feature
	switch x := m.Feature.(type) {
	case *Feature_Image:
		s := proto.Size(x.Image)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_RawImage:
		s := proto.Size(x.RawImage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Classification:
		s := proto.Size(x.Classification)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_BoundingBox:
		s := proto.Size(x.BoundingBox)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_SemanticSegment:
		s := proto.Size(x.SemanticSegment)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_InstanceSegment:
		s := proto.Size(x.InstanceSegment)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Text:
		s := proto.Size(x.Text)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Region:
		s := proto.Size(x.Region)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Audio:
		s := proto.Size(x.Audio)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Geolocation:
		s := proto.Size(x.Geolocation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Raw:
		s := proto.Size(x.Raw)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("mlmodelscope.org.dlframework.FeatureType", FeatureType_name, FeatureType_value)
	golang_proto.RegisterEnum("mlmodelscope.org.dlframework.FeatureType", FeatureType_name, FeatureType_value)
	proto.RegisterType((*Image)(nil), "mlmodelscope.org.dlframework.Image")
	golang_proto.RegisterType((*Image)(nil), "mlmodelscope.org.dlframework.Image")
	proto.RegisterType((*RawImage)(nil), "mlmodelscope.org.dlframework.RawImage")
	golang_proto.RegisterType((*RawImage)(nil), "mlmodelscope.org.dlframework.RawImage")
	proto.RegisterType((*Classification)(nil), "mlmodelscope.org.dlframework.Classification")
	golang_proto.RegisterType((*Classification)(nil), "mlmodelscope.org.dlframework.Classification")
	proto.RegisterType((*BoundingBox)(nil), "mlmodelscope.org.dlframework.BoundingBox")
	golang_proto.RegisterType((*BoundingBox)(nil), "mlmodelscope.org.dlframework.BoundingBox")
	proto.RegisterType((*SemanticSegment)(nil), "mlmodelscope.org.dlframework.SemanticSegment")
	golang_proto.RegisterType((*SemanticSegment)(nil), "mlmodelscope.org.dlframework.SemanticSegment")
	proto.RegisterType((*InstanceSegment)(nil), "mlmodelscope.org.dlframework.InstanceSegment")
	golang_proto.RegisterType((*InstanceSegment)(nil), "mlmodelscope.org.dlframework.InstanceSegment")
	proto.RegisterType((*GeoLocation)(nil), "mlmodelscope.org.dlframework.GeoLocation")
	golang_proto.RegisterType((*GeoLocation)(nil), "mlmodelscope.org.dlframework.GeoLocation")
	proto.RegisterType((*Region)(nil), "mlmodelscope.org.dlframework.Region")
	golang_proto.RegisterType((*Region)(nil), "mlmodelscope.org.dlframework.Region")
	proto.RegisterType((*Text)(nil), "mlmodelscope.org.dlframework.Text")
	golang_proto.RegisterType((*Text)(nil), "mlmodelscope.org.dlframework.Text")
	proto.RegisterType((*Audio)(nil), "mlmodelscope.org.dlframework.Audio")
	golang_proto.RegisterType((*Audio)(nil), "mlmodelscope.org.dlframework.Audio")
	proto.RegisterType((*Raw)(nil), "mlmodelscope.org.dlframework.Raw")
	golang_proto.RegisterType((*Raw)(nil), "mlmodelscope.org.dlframework.Raw")
	proto.RegisterType((*Feature)(nil), "mlmodelscope.org.dlframework.Feature")
	golang_proto.RegisterType((*Feature)(nil), "mlmodelscope.org.dlframework.Feature")
	proto.RegisterMapType((map[string]string)(nil), "mlmodelscope.org.dlframework.Feature.MetadataEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "mlmodelscope.org.dlframework.Feature.MetadataEntry")
}

func init() { proto.RegisterFile("features.proto", fileDescriptor_2216f05915163cdf) }
func init() { golang_proto.RegisterFile("features.proto", fileDescriptor_2216f05915163cdf) }

var fileDescriptor_2216f05915163cdf = []byte{
	// 1441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0xdb, 0xc6,
	0x12, 0x36, 0xf5, 0x5b, 0x4b, 0xc7, 0x16, 0x36, 0x79, 0xef, 0x31, 0x4e, 0x1e, 0xa9, 0x38, 0x79,
	0x0f, 0x6a, 0x11, 0xcb, 0x85, 0x73, 0x69, 0x9c, 0x16, 0xa8, 0x68, 0x2b, 0xae, 0x50, 0x5b, 0x2a,
	0x24, 0x05, 0x0e, 0xda, 0x83, 0xb0, 0x92, 0x68, 0x99, 0x30, 0xc9, 0x55, 0xc9, 0x55, 0x25, 0xb5,
	0x97, 0xf4, 0x3f, 0xe8, 0x9f, 0xd0, 0x43, 0x0f, 0xbd, 0xf7, 0x52, 0xf4, 0x50, 0xe4, 0xd8, 0x63,
	0x8e, 0xe9, 0x45, 0x88, 0xe5, 0x4b, 0xd1, 0x53, 0xa0, 0x53, 0x8e, 0xc5, 0xee, 0x52, 0xd6, 0x92,
	0x09, 0x64, 0x25, 0x2d, 0x72, 0xea, 0x8d, 0xfc, 0x66, 0xbe, 0x6f, 0x96, 0xbb, 0x33, 0xb3, 0x23,
	0x81, 0x95, 0x23, 0x03, 0x91, 0x9e, 0x6b, 0x78, 0xf9, 0xae, 0x8b, 0x09, 0x86, 0xd7, 0x6d, 0xcb,
	0xc6, 0x6d, 0xc3, 0xf2, 0x5a, 0xb8, 0x6b, 0xe4, 0xb1, 0xdb, 0xc9, 0xb7, 0xad, 0x23, 0x17, 0xd9,
	0x46, 0x1f, 0xbb, 0x27, 0x6b, 0xd7, 0x3b, 0x18, 0x77, 0x2c, 0x63, 0x13, 0x75, 0xcd, 0x4d, 0xe4,
	0x38, 0x98, 0x20, 0x62, 0x62, 0xc7, 0xe7, 0xae, 0x6d, 0x74, 0x4c, 0x72, 0xdc, 0x6b, 0xe6, 0x5b,
	0xd8, 0xde, 0xec, 0xe0, 0x0e, 0xde, 0x64, 0x70, 0xb3, 0x77, 0xc4, 0xde, 0xd8, 0x0b, 0x7b, 0xe2,
	0xee, 0xeb, 0x3d, 0x10, 0x2f, 0xd9, 0xa8, 0x63, 0xc0, 0x0f, 0x41, 0xc4, 0x6c, 0x2b, 0x52, 0x56,
	0xca, 0xa5, 0xf5, 0x8d, 0xf1, 0x48, 0x8b, 0x94, 0x76, 0xff, 0x18, 0x69, 0xcb, 0x66, 0xfb, 0x36,
	0xb6, 0x4d, 0x62, 0xd8, 0x5d, 0x32, 0x9c, 0x8c, 0xb4, 0xcb, 0x43, 0x64, 0x5b, 0xdb, 0xeb, 0x22,
	0xba, 0x5e, 0x8d, 0x98, 0x6d, 0xb8, 0x01, 0x62, 0x6d, 0x44, 0x90, 0x12, 0xc9, 0x4a, 0xb9, 0x65,
	0xfd, 0xea, 0x64, 0xa4, 0xfd, 0x8b, 0xbb, 0x52, 0x54, 0x74, 0x66, 0x6e, 0xeb, 0x2f, 0xa2, 0x20,
	0x55, 0x45, 0xfd, 0xbf, 0x25, 0xf4, 0x3d, 0x90, 0xa6, 0x9a, 0x0d, 0x32, 0xec, 0x1a, 0x2c, 0x7e,
	0x5a, 0x57, 0x27, 0x23, 0x6d, 0x6d, 0x16, 0x9f, 0x99, 0x44, 0x5a, 0x8a, 0xa2, 0xf5, 0x61, 0x97,
	0xc6, 0x4e, 0xb7, 0x8e, 0x91, 0xdb, 0xb0, 0x4c, 0x8f, 0x28, 0xd1, 0x6c, 0x34, 0x17, 0xd7, 0xb3,
	0x33, 0xf2, 0xb9, 0x49, 0x20, 0x67, 0xa4, 0x6a, 0x8a, 0xe2, 0xfb, 0xa6, 0x47, 0xe0, 0x47, 0x00,
	0x1c, 0x59, 0x18, 0x11, 0xce, 0x8f, 0x65, 0xa3, 0xb9, 0x88, 0x7e, 0x63, 0x32, 0xd2, 0xae, 0x71,
	0xfe, 0xcc, 0x16, 0x14, 0x48, 0x33, 0x03, 0x53, 0x78, 0x0f, 0xc4, 0xfb, 0x66, 0x9b, 0x1c, 0x2b,
	0xf1, 0xac, 0x94, 0x8b, 0xeb, 0x6b, 0x93, 0x91, 0xf6, 0x6f, 0x4e, 0x66, 0xb0, 0xb8, 0x6a, 0xee,
	0x08, 0xef, 0x80, 0xc4, 0xb1, 0x61, 0x76, 0x8e, 0x89, 0x92, 0x60, 0x94, 0x6b, 0x93, 0x91, 0xf6,
	0x1f, 0x4e, 0xe1, 0xb8, 0xc8, 0xf1, 0x5d, 0xe1, 0x5d, 0x40, 0x17, 0xed, 0x38, 0x86, 0xe5, 0x29,
	0x49, 0x46, 0xfb, 0xef, 0x64, 0xa4, 0x5d, 0x3d, 0xff, 0x4c, 0x66, 0x09, 0x6c, 0xd1, 0x14, 0x84,
	0x07, 0x60, 0xb5, 0x85, 0xed, 0xae, 0x6b, 0x78, 0x9e, 0xd1, 0x6e, 0xb0, 0x53, 0x4e, 0xb1, 0x53,
	0xbe, 0x35, 0x19, 0x69, 0x59, 0x5f, 0x21, 0xe8, 0x20, 0x0a, 0xad, 0xcc, 0x6c, 0xbb, 0xf4, 0xe8,
	0xbf, 0x02, 0x2b, 0x3b, 0x16, 0xf2, 0x3c, 0xf3, 0xc8, 0x6c, 0xb1, 0xcc, 0xa5, 0x5b, 0x60, 0x3a,
	0x6d, 0x63, 0xc0, 0x52, 0x20, 0xb0, 0x05, 0x0c, 0x0e, 0x6c, 0x01, 0x43, 0x28, 0xc3, 0x42, 0x4d,
	0xc3, 0xf2, 0x8f, 0x5b, 0x60, 0x30, 0x38, 0xc0, 0x60, 0xc8, 0x76, 0xec, 0xf9, 0x77, 0x9a, 0xb4,
	0xfe, 0x63, 0x04, 0xc8, 0x3a, 0xee, 0x39, 0x6d, 0xd3, 0xe9, 0xe8, 0x78, 0xf0, 0x36, 0x22, 0xd3,
	0xca, 0x18, 0xd8, 0xa6, 0xa3, 0x44, 0xb3, 0x52, 0x2e, 0x22, 0x56, 0x06, 0x45, 0x03, 0x95, 0x41,
	0x01, 0xee, 0x8e, 0x06, 0x4a, 0xec, 0x65, 0x77, 0x34, 0x08, 0xb9, 0xa3, 0x01, 0x75, 0x1f, 0x52,
	0xf5, 0x78, 0xd8, 0x7d, 0x18, 0x56, 0x1f, 0xfa, 0xea, 0x43, 0xaa, 0x9e, 0x78, 0xd9, 0x3d, 0xa4,
	0x4e, 0x01, 0x7f, 0xd7, 0x7e, 0x96, 0xc0, 0x6a, 0xcd, 0xb0, 0x91, 0x43, 0xcc, 0x56, 0xcd, 0xe8,
	0xd8, 0x86, 0x43, 0x84, 0x24, 0x94, 0x16, 0x4f, 0xc2, 0xf3, 0x5c, 0x8f, 0x2c, 0x9a, 0xeb, 0xdb,
	0x20, 0x65, 0x3a, 0xa4, 0x61, 0x23, 0xef, 0xc4, 0xaf, 0x4e, 0x6d, 0x96, 0xb6, 0x53, 0x4b, 0xb0,
	0xb6, 0x92, 0xa6, 0x43, 0x0e, 0x90, 0x77, 0xe2, 0x2f, 0xfe, 0xb7, 0x18, 0x58, 0x2d, 0x39, 0x1e,
	0x41, 0x4e, 0xcb, 0x98, 0x2e, 0xfe, 0x9f, 0x63, 0x9f, 0x7b, 0xec, 0xb4, 0xa3, 0xd2, 0x7d, 0xe5,
	0x1d, 0x35, 0x19, 0xee, 0xa8, 0xe7, 0xa6, 0x40, 0xbb, 0xa0, 0x28, 0xeb, 0xa8, 0xb3, 0xcc, 0x48,
	0xbd, 0x41, 0x66, 0xa4, 0xdf, 0x24, 0x33, 0xc0, 0xeb, 0x65, 0xc6, 0xac, 0x6b, 0x33, 0xb6, 0xfc,
	0xea, 0xae, 0xfd, 0x32, 0x9f, 0x77, 0x6d, 0x21, 0xb7, 0x7e, 0x91, 0x80, 0xbc, 0x67, 0xe0, 0x7d,
	0xfc, 0xc6, 0x8d, 0xec, 0x2e, 0x48, 0x59, 0x88, 0x98, 0xa4, 0xd7, 0xe6, 0x57, 0x57, 0x44, 0x6c,
	0xcb, 0x53, 0x4b, 0x60, 0x9f, 0xa7, 0x20, 0xfc, 0x00, 0xa4, 0x2d, 0xec, 0x74, 0x38, 0x97, 0x67,
	0x99, 0x70, 0x48, 0xe7, 0x26, 0x91, 0x3c, 0x23, 0xf8, 0x1f, 0xe0, 0x82, 0x44, 0xd5, 0xe8, 0xd0,
	0xa5, 0x4f, 0xef, 0x6f, 0x69, 0xa1, 0xfb, 0x9b, 0x1e, 0xf2, 0x11, 0x76, 0x6d, 0x44, 0xfc, 0x82,
	0x10, 0x0e, 0x99, 0xe3, 0x81, 0x43, 0xe6, 0x90, 0x1f, 0xf3, 0x1e, 0x88, 0xd5, 0x8d, 0x01, 0x79,
	0xcd, 0x89, 0xc1, 0x27, 0x7f, 0x01, 0xe2, 0x85, 0x5e, 0xdb, 0xc4, 0x6f, 0x71, 0xbd, 0x18, 0x44,
	0xab, 0xa8, 0xff, 0x16, 0x03, 0x7e, 0xbf, 0x0c, 0x92, 0xf7, 0xf9, 0x40, 0xf8, 0x57, 0x47, 0xa3,
	0x87, 0x20, 0xc6, 0x6a, 0x98, 0xa6, 0xc7, 0xca, 0xd6, 0x3b, 0xf9, 0x79, 0x73, 0x65, 0xde, 0x8f,
	0x49, 0x8b, 0x58, 0xfc, 0xbe, 0x70, 0xa5, 0x33, 0x45, 0xa8, 0x03, 0xb9, 0xeb, 0xe2, 0x26, 0x6a,
	0x9a, 0x96, 0x49, 0x86, 0x7e, 0xdb, 0xa2, 0x93, 0xd3, 0x75, 0xce, 0x12, 0x8c, 0x22, 0x59, 0x24,
	0x41, 0x07, 0xa4, 0x6c, 0x83, 0x20, 0xb6, 0xad, 0xf1, 0x6c, 0x34, 0x27, 0x6f, 0xdd, 0x59, 0x68,
	0x85, 0xf9, 0x03, 0x9f, 0x55, 0x74, 0x88, 0x3b, 0x14, 0x2b, 0x66, 0x2a, 0x17, 0xec, 0x4c, 0x3e,
	0x08, 0x0f, 0x41, 0xdc, 0xa4, 0x03, 0x27, 0x6b, 0x83, 0xf2, 0xd6, 0xcd, 0xf9, 0xc1, 0xd8, 0x6c,
	0x1a, 0xa8, 0x61, 0x0a, 0x08, 0xca, 0x1f, 0x2f, 0x55, 0xb9, 0x1e, 0x44, 0x20, 0xed, 0xa2, 0x7e,
	0x83, 0x8b, 0x27, 0x99, 0xf8, 0xff, 0xe7, 0x8b, 0x4f, 0x67, 0xdf, 0x0b, 0xf4, 0x53, 0xee, 0x74,
	0x46, 0xfe, 0x1a, 0xac, 0xb4, 0x02, 0x53, 0x13, 0xeb, 0xae, 0xf2, 0xd6, 0xed, 0xf9, 0x71, 0x82,
	0x93, 0x96, 0x7e, 0x73, 0x32, 0xd2, 0x34, 0x7f, 0x62, 0x0b, 0x58, 0x82, 0x61, 0x43, 0xa1, 0x60,
	0x17, 0x2c, 0x37, 0xfd, 0xa9, 0xa9, 0xd1, 0xc4, 0x03, 0xd6, 0xa4, 0xe5, 0x8b, 0xd2, 0x49, 0x98,
	0xb3, 0xc4, 0xc4, 0x98, 0x0a, 0x35, 0xf1, 0x20, 0x18, 0x54, 0x6e, 0x0a, 0x83, 0xd9, 0x37, 0x12,
	0xc8, 0x78, 0xfe, 0xc8, 0xd1, 0xf0, 0xf8, 0xb5, 0xad, 0x00, 0x16, 0x76, 0x63, 0x7e, 0xd8, 0xd0,
	0xa0, 0xa2, 0xff, 0x6f, 0x32, 0xd2, 0x6e, 0xf0, 0xd0, 0x61, 0xc1, 0x60, 0xfc, 0x55, 0x2f, 0x34,
	0xe2, 0x3c, 0x92, 0x40, 0xc6, 0xf4, 0x27, 0x87, 0xf3, 0x35, 0xc8, 0x8b, 0xac, 0x21, 0x34, 0x6f,
	0x88, 0x83, 0xf2, 0x54, 0xf0, 0xd5, 0x4b, 0x30, 0x43, 0x83, 0x4a, 0x0d, 0xc4, 0x88, 0x31, 0x20,
	0xca, 0x32, 0x8b, 0xba, 0x3e, 0x3f, 0x2a, 0xed, 0xaa, 0x81, 0xc2, 0x35, 0x06, 0x21, 0x7d, 0x26,
	0x06, 0x3f, 0x07, 0x09, 0x97, 0x35, 0x7d, 0xe5, 0x12, 0x93, 0xbd, 0x75, 0x41, 0xaa, 0x32, 0x5f,
	0xb1, 0x81, 0x71, 0x76, 0x50, 0xda, 0x97, 0xa4, 0x35, 0x86, 0x68, 0x83, 0x56, 0x56, 0x16, 0xa9,
	0x31, 0xd6, 0xcb, 0xc5, 0x1a, 0x60, 0xdc, 0x50, 0x8d, 0x31, 0x0c, 0x62, 0x20, 0x77, 0x0c, 0x6c,
	0xf9, 0x57, 0xad, 0xb2, 0xba, 0x48, 0x0a, 0x0a, 0x77, 0xb3, 0x98, 0x82, 0x82, 0x4e, 0x28, 0x05,
	0x05, 0x0b, 0xfc, 0x14, 0x44, 0x5d, 0xd4, 0x57, 0x7e, 0xe7, 0xf5, 0x7c, 0xe3, 0xc2, 0x7a, 0xd6,
	0x95, 0xc9, 0x48, 0xbb, 0xe2, 0xef, 0x10, 0xea, 0x07, 0x95, 0xa9, 0xd4, 0xda, 0x3d, 0x70, 0x29,
	0xd0, 0xb9, 0x60, 0x06, 0x44, 0x4f, 0x8c, 0x21, 0x6f, 0xef, 0x55, 0xfa, 0x08, 0xaf, 0x80, 0xf8,
	0x97, 0xc8, 0xea, 0xf9, 0xbf, 0x63, 0xab, 0xfc, 0x65, 0x3b, 0xf2, 0xbe, 0xc4, 0xef, 0x06, 0x3d,
	0x0d, 0x92, 0xfe, 0x7f, 0x05, 0xef, 0xd2, 0xe1, 0x43, 0x68, 0xd9, 0x50, 0x06, 0xc9, 0x07, 0xe5,
	0x4f, 0xca, 0x95, 0xc3, 0x72, 0x66, 0x09, 0xa6, 0x41, 0xbc, 0x74, 0x50, 0xd8, 0x2b, 0x66, 0x24,
	0x78, 0x09, 0xa4, 0xab, 0x85, 0xc3, 0x06, 0x7f, 0x8d, 0x40, 0x08, 0x56, 0x76, 0xf6, 0x0b, 0xb5,
	0x5a, 0xe9, 0x7e, 0x69, 0xa7, 0x50, 0x2f, 0x55, 0xca, 0x99, 0x28, 0x5c, 0x05, 0xb2, 0x5e, 0x79,
	0x50, 0xde, 0x2d, 0x95, 0xf7, 0xf4, 0xca, 0xc3, 0x4c, 0x0c, 0x5e, 0x06, 0xab, 0xb5, 0xe2, 0x41,
	0xa1, 0x5c, 0x2f, 0xed, 0xd4, 0x8a, 0x7b, 0x07, 0xc5, 0x72, 0x3d, 0x13, 0xa7, 0x60, 0xa9, 0x5c,
	0xab, 0x17, 0xca, 0x3b, 0xc5, 0x29, 0x98, 0xa0, 0xd4, 0xbd, 0x62, 0x65, 0xbf, 0xe2, 0x6b, 0x25,
	0x21, 0x00, 0x89, 0x6a, 0x71, 0x8f, 0x3e, 0xa7, 0x60, 0x0a, 0xc4, 0xea, 0xc5, 0x87, 0xf5, 0x4c,
	0x9a, 0xae, 0xa7, 0xf0, 0x60, 0xb7, 0x54, 0xc9, 0x00, 0x98, 0x04, 0xd1, 0x6a, 0xe1, 0x30, 0xd3,
	0xd6, 0x4b, 0x4f, 0x4f, 0xd5, 0xa5, 0x67, 0xa7, 0xaa, 0xf4, 0xfc, 0x54, 0x95, 0x5e, 0x9c, 0xaa,
	0xd2, 0xa3, 0xb1, 0x2a, 0xfd, 0x30, 0x56, 0xa5, 0x9f, 0xc6, 0xaa, 0xf4, 0x78, 0xac, 0x4a, 0xbf,
	0x8e, 0x55, 0xe9, 0xc9, 0x58, 0x95, 0x9e, 0x8d, 0x55, 0xe9, 0xdb, 0x33, 0x75, 0xe9, 0xf1, 0x99,
	0x2a, 0x3d, 0x39, 0x53, 0x97, 0x9e, 0x9e, 0xa9, 0x4b, 0x9f, 0xc9, 0xc2, 0xf6, 0x37, 0x13, 0xec,
	0xcf, 0x8c, 0x3b, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x20, 0x4e, 0x8b, 0x79, 0x49, 0x11, 0x00,
	0x00,
}

func (this *Classification) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *BoundingBox) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *SemanticSegment) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *InstanceSegment) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *GeoLocation) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Region) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Text) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Audio) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Raw) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func (this *Feature) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return FeaturesDescription()
}
func FeaturesDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 8178 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x5d, 0x90, 0x1c, 0xd7,
		0x75, 0x1e, 0x7a, 0x7e, 0x76, 0x67, 0xce, 0xec, 0xcf, 0xec, 0xdd, 0x05, 0x30, 0x58, 0x82, 0x3b,
		0xe0, 0x90, 0x14, 0x40, 0x90, 0x58, 0x20, 0x20, 0x08, 0x92, 0x03, 0x93, 0xf4, 0xcc, 0xee, 0x60,
		0x39, 0xd0, 0xfe, 0xa9, 0x77, 0x57, 0x24, 0x25, 0x3b, 0x9d, 0xde, 0x9e, 0xbb, 0xb3, 0xcd, 0x9d,
		0xe9, 0x6e, 0x76, 0xf7, 0x00, 0xbb, 0x90, 0x5d, 0x45, 0x49, 0xfe, 0x29, 0xc5, 0x65, 0xcb, 0x91,
		0x53, 0x65, 0x5b, 0x96, 0x15, 0xc9, 0x89, 0x22, 0xc7, 0x89, 0x13, 0x3b, 0x4e, 0x14, 0xcb, 0x49,
		0xc9, 0xca, 0x83, 0x13, 0x3b, 0x0f, 0x29, 0xa9, 0xf2, 0xe2, 0xa4, 0x2a, 0x1b, 0x09, 0x54, 0x95,
		0x1d, 0x87, 0x89, 0x95, 0x0d, 0x1f, 0x54, 0xa5, 0x97, 0xd4, 0xfd, 0xeb, 0xbe, 0xdd, 0x33, 0xbb,
		0x33, 0x0b, 0x12, 0x50, 0xa5, 0x2a, 0x4f, 0xd8, 0x39, 0xf7, 0x9c, 0xef, 0x9e, 0x3e, 0xf7, 0xdc,
		0x73, 0xce, 0xfd, 0xe9, 0x06, 0xfc, 0x49, 0x1a, 0x4e, 0x36, 0x6d, 0xbb, 0xd9, 0xc2, 0x97, 0x75,
		0xc7, 0xbc, 0xbc, 0xed, 0xfb, 0xce, 0xac, 0xe3, 0xda, 0xbe, 0x8d, 0x80, 0x91, 0x67, 0x75, 0xc7,
		0x2c, 0xed, 0x41, 0xea, 0x55, 0xdf, 0x77, 0xd0, 0x45, 0x48, 0xbb, 0x9d, 0x16, 0xf6, 0x0a, 0xca,
		0xb9, 0xe4, 0x85, 0xdc, 0xd5, 0xa9, 0xd9, 0x90, 0x67, 0x96, 0x30, 0xa8, 0x9d, 0x16, 0x56, 0x19,
		0x0b, 0xaa, 0x41, 0x71, 0xab, 0xd3, 0x6a, 0xed, 0x69, 0x0d, 0x6c, 0xd8, 0x0d, 0xac, 0xb9, 0xd8,
		0xc3, 0xee, 0x6d, 0xdc, 0xd0, 0xf0, 0xae, 0xa3, 0x5b, 0x9e, 0x69, 0x5b, 0x85, 0xc4, 0x39, 0xe5,
		0x42, 0x46, 0x3d, 0x4b, 0xd9, 0xe6, 0x29, 0x97, 0xca, 0x99, 0x6a, 0x82, 0xa7, 0xf4, 0x5f, 0x12,
		0x90, 0x11, 0xd0, 0x68, 0x1a, 0x32, 0x1e, 0x6e, 0x61, 0xc3, 0xb7, 0xdd, 0x82, 0x72, 0x4e, 0xb9,
		0x90, 0x55, 0x83, 0xdf, 0x08, 0x41, 0xb2, 0x89, 0x7d, 0x8a, 0x99, 0x7d, 0xf5, 0x84, 0x4a, 0x7e,
		0x10, 0x9a, 0xd3, 0xf1, 0x0b, 0x49, 0x41, 0x73, 0x3a, 0x3e, 0x9a, 0x82, 0x94, 0x63, 0x7b, 0x7e,
		0x21, 0xc5, 0x89, 0xf4, 0x17, 0x2a, 0xc0, 0x50, 0x03, 0xb7, 0xb0, 0x8f, 0x0b, 0x69, 0x4e, 0xe7,
		0xbf, 0xd1, 0x29, 0x48, 0x3b, 0xba, 0x6f, 0x6c, 0x17, 0x86, 0x78, 0x03, 0xfb, 0x89, 0x10, 0xa4,
		0x36, 0xed, 0xc6, 0x5e, 0x61, 0x98, 0xea, 0x41, 0xff, 0x46, 0xcf, 0xc3, 0x90, 0xd1, 0xf1, 0x7c,
		0xbb, 0x5d, 0xc8, 0x9c, 0x53, 0x2e, 0xe4, 0xae, 0x3e, 0x2a, 0x1b, 0x68, 0x8e, 0xb6, 0x90, 0x67,
		0x59, 0xd5, 0x7d, 0x1f, 0xbb, 0x16, 0xe9, 0x84, 0xb1, 0xa3, 0x1a, 0x4c, 0xea, 0x8d, 0x86, 0xe9,
		0x9b, 0xb6, 0xa5, 0xb7, 0xb4, 0x4d, 0xd3, 0x6a, 0x98, 0x56, 0xd3, 0x2b, 0xe4, 0x8e, 0x30, 0x33,
		0x0a, 0x05, 0xaa, 0x9c, 0x1f, 0x3d, 0x0e, 0xa3, 0x2e, 0xf6, 0x1c, 0xdb, 0xf2, 0xb0, 0x46, 0x95,
		0x1b, 0xa1, 0xca, 0x8d, 0x08, 0x62, 0xd5, 0x6e, 0xec, 0x55, 0xb3, 0x30, 0xec, 0x30, 0x05, 0x4a,
		0x37, 0x60, 0xa2, 0x4b, 0x2b, 0xf2, 0x60, 0x3b, 0xa6, 0xd5, 0xe0, 0x06, 0xa6, 0x7f, 0x13, 0x9a,
		0xa3, 0xfb, 0xdb, 0xcc, 0xba, 0x2a, 0xfd, 0xbb, 0xfa, 0x29, 0xe5, 0x4f, 0xef, 0xcd, 0x28, 0xdf,
		0xba, 0x37, 0xa3, 0x7c, 0xe7, 0xde, 0x8c, 0xf2, 0xcb, 0xef, 0xcc, 0x9c, 0xf8, 0xd6, 0x3b, 0x33,
		0x27, 0xfe, 0xfc, 0x9d, 0x99, 0x13, 0x30, 0x66, 0xd8, 0x6d, 0x49, 0xe9, 0x6a, 0x96, 0xe2, 0x13,
		0xb7, 0x5a, 0x55, 0x3e, 0x56, 0xe1, 0x0d, 0x4d, 0xbb, 0xa5, 0x5b, 0xcd, 0x59, 0xdb, 0x6d, 0x5e,
		0x6e, 0x62, 0x8b, 0x3a, 0xdd, 0x65, 0xd6, 0xa4, 0x3b, 0xa6, 0x47, 0xdd, 0x51, 0xb7, 0x2c, 0xdb,
		0xd7, 0xc9, 0x43, 0x7a, 0x37, 0xa4, 0xbf, 0x7f, 0xa0, 0x28, 0xbf, 0x95, 0x48, 0x2d, 0x54, 0x56,
		0xeb, 0x9b, 0x43, 0x54, 0xee, 0x59, 0xf8, 0x8d, 0x1b, 0x70, 0x8e, 0xfb, 0x31, 0xa5, 0x6c, 0x76,
		0xb6, 0x2e, 0x37, 0xb0, 0x67, 0xb8, 0xa6, 0xe3, 0xdb, 0x2e, 0x77, 0xe9, 0x71, 0xde, 0xb3, 0xe0,
		0x28, 0x2d, 0xc1, 0xc4, 0x4d, 0xb3, 0x85, 0xe7, 0x03, 0xc6, 0x35, 0xec, 0xa3, 0x17, 0x20, 0xb5,
		0x65, 0xb6, 0x30, 0xf7, 0xf1, 0x27, 0x66, 0x63, 0x42, 0xb3, 0x51, 0x09, 0xfa, 0x54, 0x2a, 0x95,
		0x28, 0x7d, 0x2f, 0x05, 0x93, 0x3d, 0x5a, 0x89, 0xf5, 0x2c, 0xbd, 0x8d, 0x85, 0x45, 0xc9, 0xdf,
		0xa8, 0x40, 0x46, 0xc1, 0xd8, 0xd1, 0x9b, 0x98, 0x1b, 0x55, 0xfc, 0x44, 0x33, 0x00, 0x0d, 0xec,
		0x60, 0xab, 0x81, 0x2d, 0x63, 0xaf, 0x90, 0x3c, 0x97, 0xbc, 0x90, 0x55, 0x25, 0x0a, 0x7a, 0x1a,
		0x26, 0x9c, 0xce, 0x66, 0xcb, 0x34, 0x34, 0x89, 0x0d, 0xce, 0x25, 0x2f, 0xa4, 0xd5, 0x3c, 0x6b,
		0x98, 0x0f, 0x99, 0xcf, 0xc3, 0xf8, 0x1d, 0xac, 0xef, 0xc8, 0xac, 0x39, 0xca, 0x3a, 0x46, 0xc8,
		0x12, 0xe3, 0x1c, 0x8c, 0xb4, 0xb1, 0xe7, 0xe9, 0x4d, 0xac, 0xf9, 0x7b, 0x0e, 0x2e, 0xa4, 0xe8,
		0xd3, 0x9f, 0xeb, 0x7a, 0xfa, 0xf8, 0x93, 0xe7, 0xb8, 0xd4, 0xfa, 0x9e, 0x83, 0x51, 0x05, 0xb2,
		0xd8, 0xea, 0xb4, 0x19, 0x42, 0xfa, 0x10, 0xfb, 0xd5, 0xac, 0x4e, 0x3b, 0x8e, 0x92, 0x21, 0x62,
		0x1c, 0x62, 0x98, 0x84, 0x00, 0xd3, 0xc0, 0x85, 0x21, 0x0a, 0x70, 0xbe, 0x0b, 0x60, 0x8d, 0xb5,
		0xc7, 0x31, 0x84, 0x1c, 0x9a, 0x83, 0x2c, 0xde, 0xf5, 0x31, 0x8b, 0x31, 0xc3, 0x14, 0xe4, 0xc9,
		0x1e, 0xa3, 0x88, 0x5b, 0x8d, 0x38, 0x44, 0x28, 0x87, 0xae, 0xc3, 0xb0, 0xed, 0x50, 0x6f, 0xe3,
		0x73, 0xf9, 0x6c, 0x4f, 0x47, 0x58, 0x61, 0x3c, 0xaa, 0x60, 0x46, 0x75, 0xc8, 0x7b, 0x76, 0xc7,
		0x35, 0xb0, 0x46, 0xa3, 0x9e, 0x69, 0x6d, 0xd9, 0x85, 0x2c, 0x05, 0x28, 0x76, 0x3f, 0x08, 0x65,
		0x9c, 0xb3, 0x1b, 0xb8, 0x6e, 0x6d, 0xd9, 0xea, 0x98, 0x17, 0xf9, 0x8d, 0x4e, 0xc1, 0x90, 0xb7,
		0x67, 0xf9, 0xfa, 0x2e, 0x9f, 0xc6, 0xfc, 0x57, 0xe9, 0xeb, 0x43, 0x30, 0x3e, 0x88, 0x8b, 0xdd,
		0x80, 0xf4, 0x16, 0x79, 0xca, 0x42, 0xe2, 0x38, 0x36, 0x60, 0x32, 0x51, 0x23, 0x0e, 0xdd, 0xa7,
		0x11, 0x2b, 0x90, 0xb3, 0xb0, 0xe7, 0xe3, 0x06, 0xf3, 0x88, 0xe4, 0x80, 0x3e, 0x05, 0x4c, 0xa8,
		0xdb, 0xa5, 0x52, 0xf7, 0xe5, 0x52, 0xaf, 0xc3, 0x78, 0xa0, 0x92, 0xe6, 0xea, 0x56, 0x53, 0xf8,
		0xe6, 0xe5, 0x7e, 0x9a, 0xcc, 0xd6, 0x84, 0x9c, 0x4a, 0xc4, 0xd4, 0x31, 0x1c, 0xf9, 0x8d, 0xe6,
		0x01, 0x6c, 0x0b, 0xdb, 0x5b, 0x24, 0xc7, 0xb5, 0x0a, 0x99, 0x43, 0xac, 0xb4, 0x42, 0x58, 0xba,
		0xac, 0x64, 0x33, 0xaa, 0xd1, 0x42, 0x2f, 0x86, 0xae, 0x36, 0x7c, 0x88, 0xa7, 0x2c, 0xb1, 0x49,
		0xd6, 0xe5, 0x6d, 0x1b, 0x30, 0x16, 0xe4, 0x55, 0xf6, 0x64, 0x59, 0xaa, 0xc4, 0x6c, 0xdf, 0x27,
		0x13, 0x99, 0x96, 0x3d, 0xd8, 0xa8, 0x2b, 0xff, 0xe4, 0x79, 0x84, 0xc1, 0x52, 0xb7, 0x02, 0x1a,
		0x85, 0x46, 0x04, 0x71, 0x59, 0x6f, 0xe3, 0xe9, 0xbb, 0x30, 0x16, 0x35, 0x0f, 0x9a, 0x82, 0xb4,
		0xe7, 0xeb, 0xae, 0x4f, 0xbd, 0x30, 0xad, 0xb2, 0x1f, 0x28, 0x0f, 0x49, 0x6c, 0x35, 0x68, 0x94,
		0x4b, 0xab, 0xe4, 0x4f, 0xf4, 0xe3, 0xe1, 0x03, 0x27, 0xe9, 0x03, 0x7f, 0xa8, 0x7b, 0x44, 0x23,
		0xc8, 0xf1, 0xe7, 0x9e, 0x7e, 0x1e, 0x46, 0x23, 0x0f, 0x30, 0x68, 0xd7, 0xa5, 0x9f, 0x82, 0x93,
		0x3d, 0xa1, 0xd1, 0xeb, 0x30, 0xd5, 0xb1, 0x4c, 0xcb, 0xc7, 0xae, 0xe3, 0x62, 0xe2, 0xb1, 0xac,
		0xab, 0xc2, 0x5f, 0x0c, 0x1f, 0xe2, 0x73, 0x1b, 0x32, 0x37, 0x43, 0x51, 0x27, 0x3b, 0xdd, 0xc4,
		0x8b, 0xd9, 0xcc, 0x5f, 0x0e, 0xe7, 0xdf, 0x7e, 0xfb, 0xed, 0xb7, 0x13, 0xa5, 0x5f, 0x1b, 0x82,
		0xa9, 0x5e, 0x73, 0xa6, 0xe7, 0xf4, 0x3d, 0x05, 0x43, 0x56, 0xa7, 0xbd, 0x89, 0x5d, 0x6a, 0xa4,
		0xb4, 0xca, 0x7f, 0xa1, 0x0a, 0xa4, 0x5b, 0xfa, 0x26, 0x6e, 0xd1, 0x0a, 0x66, 0xec, 0xea, 0xd3,
		0x03, 0xcd, 0xca, 0xd9, 0x45, 0x22, 0xa2, 0x32, 0x49, 0xf4, 0x32, 0xa4, 0x78, 0x88, 0x26, 0x08,
		0x17, 0x07, 0x43, 0x20, 0x73, 0x49, 0xa5, 0x72, 0xe8, 0x11, 0xc8, 0x92, 0x7f, 0x99, 0x6f, 0x0c,
		0xb1, 0x42, 0x8c, 0x10, 0x88, 0x5f, 0x90, 0x22, 0x8d, 0x4e, 0x93, 0x06, 0x16, 0xa9, 0x2d, 0xf8,
		0x4d, 0x1c, 0xab, 0x81, 0xb7, 0xf4, 0x4e, 0xcb, 0xd7, 0x6e, 0xeb, 0xad, 0x0e, 0xe6, 0xd5, 0xd3,
		0x08, 0x27, 0x7e, 0x94, 0xd0, 0x50, 0x11, 0x72, 0x6c, 0x56, 0x99, 0x56, 0x03, 0xef, 0xd2, 0xe8,
		0x99, 0x56, 0xd9, 0x44, 0xab, 0x13, 0x0a, 0xe9, 0xfe, 0x4d, 0xcf, 0xb6, 0x84, 0x6b, 0xd2, 0x2e,
		0x08, 0x81, 0x76, 0xff, 0x7c, 0x3c, 0x70, 0x3f, 0xda, 0xfb, 0xf1, 0xe2, 0x3e, 0x55, 0xfa, 0x5a,
		0x02, 0x52, 0x34, 0x5e, 0x8c, 0x43, 0x6e, 0xfd, 0x8d, 0xd5, 0x9a, 0x36, 0xbf, 0xb2, 0x51, 0x5d,
		0xac, 0xe5, 0x15, 0x34, 0x06, 0x40, 0x09, 0x37, 0x17, 0x57, 0x2a, 0xeb, 0xf9, 0x44, 0xf0, 0xbb,
		0xbe, 0xbc, 0x7e, 0xfd, 0x5a, 0x3e, 0x19, 0x08, 0x6c, 0x30, 0x42, 0x4a, 0x66, 0x78, 0xf6, 0x6a,
		0x3e, 0x8d, 0xf2, 0x30, 0xc2, 0x00, 0xea, 0xaf, 0xd7, 0xe6, 0xaf, 0x5f, 0xcb, 0x0f, 0x45, 0x29,
		0xcf, 0x5e, 0xcd, 0x0f, 0xa3, 0x51, 0xc8, 0x52, 0x4a, 0x75, 0x65, 0x65, 0x31, 0x9f, 0x09, 0x30,
		0xd7, 0xd6, 0xd5, 0xfa, 0xf2, 0x42, 0x3e, 0x1b, 0x60, 0x2e, 0xa8, 0x2b, 0x1b, 0xab, 0x79, 0x08,
		0x10, 0x96, 0x6a, 0x6b, 0x6b, 0x95, 0x85, 0x5a, 0x3e, 0x17, 0x70, 0x54, 0xdf, 0x58, 0xaf, 0xad,
		0xe5, 0x47, 0x22, 0x6a, 0x3d, 0x7b, 0x35, 0x3f, 0x1a, 0x74, 0x51, 0x5b, 0xde, 0x58, 0xca, 0x8f,
		0xa1, 0x09, 0x18, 0x65, 0x5d, 0x08, 0x25, 0xc6, 0x63, 0xa4, 0xeb, 0xd7, 0xf2, 0xf9, 0x50, 0x11,
		0x86, 0x32, 0x11, 0x21, 0x5c, 0xbf, 0x96, 0x47, 0xa5, 0x39, 0x48, 0x53, 0xef, 0x42, 0x08, 0xc6,
		0x16, 0x2b, 0xd5, 0xda, 0xa2, 0xb6, 0xb2, 0xba, 0x5e, 0x5f, 0x59, 0xae, 0x2c, 0xe6, 0x95, 0x90,
		0xa6, 0xd6, 0x3e, 0xb2, 0x51, 0x57, 0x6b, 0xf3, 0xf9, 0x84, 0x4c, 0x5b, 0xad, 0x55, 0xd6, 0x6b,
		0xf3, 0xf9, 0x64, 0xc9, 0x80, 0xa9, 0x5e, 0x71, 0xb2, 0xe7, 0xcc, 0x90, 0x86, 0x38, 0x71, 0xc8,
		0x10, 0x53, 0xac, 0xae, 0x21, 0x7e, 0x27, 0x01, 0x93, 0x3d, 0x72, 0x45, 0xcf, 0x4e, 0x5e, 0x81,
		0x34, 0x73, 0x51, 0x96, 0x3d, 0x9f, 0xea, 0x99, 0x74, 0xa8, 0xc3, 0x76, 0x65, 0x50, 0x2a, 0x27,
		0x57, 0x10, 0xc9, 0x43, 0x2a, 0x08, 0x02, 0xd1, 0x15, 0xd3, 0x7f, 0xb2, 0x2b, 0xa6, 0xb3, 0xb4,
		0x77, 0x7d, 0x90, 0xb4, 0x47, 0x69, 0xc7, 0x8b, 0xed, 0xe9, 0x1e, 0xb1, 0xfd, 0x06, 0x4c, 0x74,
		0x01, 0x0d, 0x1c, 0x63, 0x3f, 0xad, 0x40, 0xe1, 0x30, 0xe3, 0xf4, 0x89, 0x74, 0x89, 0x48, 0xa4,
		0xbb, 0x11, 0xb7, 0xe0, 0x63, 0x87, 0x0f, 0x42, 0xd7, 0x58, 0x7f, 0x55, 0x81, 0x53, 0xbd, 0x2b,
		0xc5, 0x9e, 0x3a, 0xbc, 0x0c, 0x43, 0x6d, 0xec, 0x6f, 0xdb, 0xa2, 0x5a, 0xfa, 0x50, 0x8f, 0x1c,
		0x4c, 0x9a, 0xe3, 0x83, 0xcd, 0xa5, 0xe4, 0x24, 0x9e, 0x3c, 0xac, 0xdc, 0x63, 0xda, 0x74, 0x69,
		0xfa, 0x99, 0x04, 0x9c, 0xec, 0x09, 0xde, 0x53, 0xd1, 0x47, 0x01, 0x4c, 0xcb, 0xe9, 0xf8, 0xac,
		0x22, 0x62, 0x01, 0x36, 0x4b, 0x29, 0x34, 0x78, 0x91, 0xe0, 0xd9, 0xf1, 0x83, 0x76, 0xba, 0xf4,
		0x55, 0x81, 0x91, 0x28, 0xc3, 0x0b, 0xa1, 0xa2, 0x29, 0xaa, 0xe8, 0xcc, 0x21, 0x4f, 0xda, 0xe5,
		0x98, 0x57, 0x20, 0x6f, 0xb4, 0x4c, 0x6c, 0xf9, 0x9a, 0xe7, 0xbb, 0x58, 0x6f, 0x9b, 0x56, 0x93,
		0x66, 0x90, 0x4c, 0x39, 0xbd, 0xa5, 0xb7, 0x3c, 0xac, 0x8e, 0xb3, 0xe6, 0x35, 0xd1, 0x4a, 0x24,
		0xa8, 0x03, 0xb9, 0x92, 0xc4, 0x50, 0x44, 0x82, 0x35, 0x07, 0x12, 0xa5, 0xcf, 0x65, 0x21, 0x27,
		0xd5, 0xd5, 0xe8, 0x31, 0x18, 0x79, 0x53, 0xbf, 0xad, 0x6b, 0x62, 0xad, 0xc4, 0x2c, 0x91, 0x23,
		0xb4, 0x55, 0xbe, 0x5e, 0xba, 0x02, 0x53, 0x94, 0xc5, 0xee, 0xf8, 0xd8, 0xd5, 0x8c, 0x96, 0xee,
		0x79, 0xd4, 0x68, 0x19, 0xca, 0x8a, 0x48, 0xdb, 0x0a, 0x69, 0x9a, 0x13, 0x2d, 0xe8, 0x39, 0x98,
		0xa4, 0x12, 0xed, 0x4e, 0xcb, 0x37, 0x9d, 0x16, 0xd6, 0xc8, 0xea, 0xcd, 0xa3, 0x99, 0x24, 0xd0,
		0x6c, 0x82, 0x70, 0x2c, 0x71, 0x06, 0xa2, 0x91, 0x87, 0xe6, 0xe1, 0x51, 0x2a, 0xd6, 0xc4, 0x16,
		0x76, 0x75, 0x1f, 0x6b, 0xf8, 0xad, 0x8e, 0xde, 0xf2, 0x34, 0xdd, 0x6a, 0x68, 0xdb, 0xba, 0xb7,
		0x5d, 0x98, 0x22, 0x00, 0xd5, 0x44, 0x41, 0x51, 0xcf, 0x10, 0xc6, 0x05, 0xce, 0x57, 0xa3, 0x6c,
		0x15, 0xab, 0xf1, 0xaa, 0xee, 0x6d, 0xa3, 0x32, 0x9c, 0xa2, 0x28, 0x9e, 0xef, 0x9a, 0x56, 0x53,
		0x33, 0xb6, 0xb1, 0xb1, 0xa3, 0x75, 0xfc, 0xad, 0x17, 0x0a, 0x8f, 0xc8, 0xfd, 0x53, 0x0d, 0xd7,
		0x28, 0xcf, 0x1c, 0x61, 0xd9, 0xf0, 0xb7, 0x5e, 0x40, 0x6b, 0x30, 0x42, 0x06, 0xa3, 0x6d, 0xde,
		0xc5, 0xda, 0x96, 0xed, 0xd2, 0xd4, 0x38, 0xd6, 0x23, 0x34, 0x49, 0x16, 0x9c, 0x5d, 0xe1, 0x02,
		0x4b, 0x76, 0x03, 0x97, 0xd3, 0x6b, 0xab, 0xb5, 0xda, 0xbc, 0x9a, 0x13, 0x28, 0x37, 0x6d, 0x97,
		0x38, 0x54, 0xd3, 0x0e, 0x0c, 0x9c, 0x63, 0x0e, 0xd5, 0xb4, 0x85, 0x79, 0x9f, 0x83, 0x49, 0xc3,
		0x60, 0xcf, 0x6c, 0x1a, 0x1a, 0x5f, 0x63, 0x79, 0x85, 0x7c, 0xc4, 0x58, 0x86, 0xb1, 0xc0, 0x18,
		0xb8, 0x8f, 0x7b, 0xe8, 0x45, 0x38, 0x19, 0x1a, 0x4b, 0x16, 0x9c, 0xe8, 0x7a, 0xca, 0xb8, 0xe8,
		0x73, 0x30, 0xe9, 0xec, 0x75, 0x0b, 0xa2, 0x48, 0x8f, 0xce, 0x5e, 0x5c, 0xec, 0x79, 0x98, 0x72,
		0xb6, 0x9d, 0x6e, 0xb9, 0x8b, 0xb2, 0x1c, 0x72, 0xb6, 0x9d, 0xb8, 0xe0, 0x93, 0x74, 0xc1, 0xed,
		0x62, 0x43, 0xf7, 0x71, 0xa3, 0x70, 0x5a, 0x66, 0x97, 0x1a, 0xd0, 0x65, 0xc8, 0x1b, 0x86, 0x86,
		0x2d, 0x7d, 0xb3, 0x85, 0x35, 0xdd, 0xc5, 0x96, 0xee, 0x15, 0x8a, 0x32, 0xf3, 0x98, 0x61, 0xd4,
		0x68, 0x6b, 0x85, 0x36, 0xa2, 0x8b, 0x30, 0x61, 0x6f, 0xbe, 0x69, 0x30, 0x97, 0xd4, 0x1c, 0x17,
		0x6f, 0x99, 0xbb, 0x85, 0x27, 0xa8, 0x7d, 0xc7, 0x49, 0x03, 0x75, 0xc8, 0x55, 0x4a, 0x46, 0x4f,
		0x41, 0xde, 0xf0, 0xb6, 0x75, 0xd7, 0xa1, 0x31, 0xd9, 0x73, 0x74, 0x03, 0x17, 0x9e, 0x64, 0xac,
		0x8c, 0xbe, 0x2c, 0xc8, 0x64, 0x4a, 0x78, 0x77, 0xcc, 0x2d, 0x5f, 0x20, 0x9e, 0x67, 0x53, 0x82,
		0xd2, 0x38, 0xda, 0x05, 0xc8, 0x13, 0x53, 0x44, 0x3a, 0xbe, 0x40, 0xd9, 0xc6, 0x9c, 0x6d, 0x47,
		0xee, 0xf7, 0x71, 0x18, 0x25, 0x9c, 0x61, 0xa7, 0x4f, 0xb1, 0x82, 0xcc, 0xd9, 0x96, 0x7a, 0xbc,
		0x06, 0xa7, 0x08, 0x53, 0x1b, 0xfb, 0x7a, 0x43, 0xf7, 0x75, 0x89, 0xfb, 0x19, 0xca, 0x4d, 0xec,
		0xbe, 0xc4, 0x1b, 0x23, 0x7a, 0xba, 0x9d, 0xcd, 0xbd, 0xc0, 0xb3, 0x2e, 0x31, 0x3d, 0x09, 0x4d,
		0xf8, 0xd6, 0x03, 0x2b, 0xba, 0x4b, 0x65, 0x18, 0x91, 0x1d, 0x1f, 0x65, 0x81, 0xb9, 0x7e, 0x5e,
		0x21, 0x55, 0xd0, 0xdc, 0xca, 0x3c, 0xa9, 0x5f, 0x3e, 0x56, 0xcb, 0x27, 0x48, 0x1d, 0xb5, 0x58,
		0x5f, 0xaf, 0x69, 0xea, 0xc6, 0xf2, 0x7a, 0x7d, 0xa9, 0x96, 0x4f, 0x4a, 0x05, 0xfb, 0xad, 0x54,
		0xe6, 0x43, 0xf9, 0xf3, 0xa5, 0x6f, 0x27, 0x60, 0x2c, 0xba, 0x02, 0x43, 0x3f, 0x06, 0xa7, 0xc5,
		0x76, 0x89, 0x87, 0x7d, 0xed, 0x8e, 0xe9, 0xd2, 0x19, 0xd9, 0xd6, 0x59, 0x76, 0x0c, 0x7c, 0x62,
		0x8a, 0x73, 0xad, 0x61, 0xff, 0x35, 0xd3, 0x25, 0xf3, 0xad, 0xad, 0xfb, 0x68, 0x11, 0x8a, 0x96,
		0xad, 0x79, 0xbe, 0x6e, 0x35, 0x74, 0xb7, 0xa1, 0x85, 0x1b, 0x55, 0x9a, 0x6e, 0x18, 0xd8, 0xf3,
		0x6c, 0x96, 0x09, 0x03, 0x94, 0xb3, 0x96, 0xbd, 0xc6, 0x99, 0xc3, 0x14, 0x51, 0xe1, 0xac, 0x31,
		0xff, 0x4d, 0x1e, 0xe6, 0xbf, 0x8f, 0x40, 0xb6, 0xad, 0x3b, 0x1a, 0xb6, 0x7c, 0x97, 0xed, 0x5a,
		0x66, 0xd4, 0x4c, 0x5b, 0x77, 0x6a, 0xe4, 0xf7, 0x43, 0x59, 0xfe, 0xdc, 0x4a, 0x65, 0x32, 0xf9,
		0xec, 0xad, 0x54, 0x26, 0x9b, 0x87, 0xd2, 0xbd, 0x24, 0x8c, 0xc8, 0x75, 0x38, 0x59, 0xd6, 0x18,
		0x34, 0x65, 0x29, 0x34, 0xa8, 0x3d, 0x7e, 0x64, 0xd5, 0x3e, 0x3b, 0x47, 0x72, 0x59, 0x79, 0x88,
		0x55, 0xc7, 0x2a, 0x93, 0x24, 0x75, 0x04, 0x71, 0x36, 0xdc, 0xe0, 0x3b, 0xcb, 0xfc, 0x17, 0x5a,
		0x80, 0xa1, 0x37, 0x3d, 0x8a, 0x3d, 0x44, 0xb1, 0x9f, 0x38, 0x1a, 0xfb, 0xd6, 0x1a, 0x05, 0xcf,
		0xde, 0x5a, 0xd3, 0x96, 0x57, 0xd4, 0xa5, 0xca, 0xa2, 0xca, 0xc5, 0xd1, 0x19, 0x48, 0xb5, 0xf4,
		0xbb, 0x7b, 0xd1, 0xac, 0x47, 0x49, 0x83, 0x0e, 0xc2, 0x19, 0x48, 0xdd, 0xc1, 0xfa, 0x4e, 0x34,
		0xd7, 0x50, 0xd2, 0x03, 0x9c, 0x0c, 0x97, 0x21, 0x4d, 0xed, 0x85, 0x00, 0xb8, 0xc5, 0xf2, 0x27,
		0x50, 0x06, 0x52, 0x73, 0x2b, 0x2a, 0x99, 0x10, 0x79, 0x18, 0x61, 0x54, 0x6d, 0xb5, 0x5e, 0x9b,
		0xab, 0xe5, 0x13, 0xa5, 0xe7, 0x60, 0x88, 0x19, 0x81, 0x4c, 0x96, 0xc0, 0x0c, 0xf9, 0x13, 0xfc,
		0x27, 0xc7, 0x50, 0x44, 0xeb, 0xc6, 0x52, 0xb5, 0xa6, 0xe6, 0x13, 0xd1, 0xa1, 0x4e, 0xe5, 0xd3,
		0x25, 0x0f, 0x46, 0xe4, 0x42, 0xfc, 0xe1, 0x2c, 0xb2, 0xbf, 0xa9, 0x40, 0x4e, 0x2a, 0xac, 0x49,
		0x45, 0xa4, 0xb7, 0x5a, 0xf6, 0x1d, 0x4d, 0x6f, 0x99, 0xba, 0xc7, 0x5d, 0x03, 0x28, 0xa9, 0x42,
		0x28, 0x83, 0x0e, 0xdd, 0x43, 0x9a, 0x22, 0xe9, 0xfc, 0x50, 0xe9, 0x8b, 0x0a, 0xe4, 0xe3, 0x95,
		0x6d, 0x4c, 0x4d, 0xe5, 0x47, 0xa9, 0x66, 0xe9, 0x0b, 0x0a, 0x8c, 0x45, 0xcb, 0xd9, 0x98, 0x7a,
		0x8f, 0xfd, 0x48, 0xd5, 0xfb, 0x4e, 0x02, 0x46, 0x23, 0x45, 0xec, 0xa0, 0xda, 0xbd, 0x05, 0x13,
		0x66, 0x03, 0xb7, 0x1d, 0xdb, 0xc7, 0x96, 0xb1, 0xa7, 0xb5, 0xf0, 0x6d, 0xdc, 0x2a, 0x94, 0x68,
		0xd0, 0xb8, 0x7c, 0x74, 0x99, 0x3c, 0x5b, 0x0f, 0xe5, 0x16, 0x89, 0x58, 0x79, 0xb2, 0x3e, 0x5f,
		0x5b, 0x5a, 0x5d, 0x59, 0xaf, 0x2d, 0xcf, 0xbd, 0xa1, 0x6d, 0x2c, 0x7f, 0x78, 0x79, 0xe5, 0xb5,
		0x65, 0x35, 0x6f, 0xc6, 0xd8, 0x1e, 0xe0, 0xb4, 0x5f, 0x85, 0x7c, 0x5c, 0x29, 0x74, 0x1a, 0x7a,
		0xa9, 0x95, 0x3f, 0x81, 0x26, 0x61, 0x7c, 0x79, 0x45, 0x5b, 0xab, 0xcf, 0xd7, 0xb4, 0xda, 0xcd,
		0x9b, 0xb5, 0xb9, 0xf5, 0x35, 0xb6, 0xf1, 0x11, 0x70, 0xaf, 0x47, 0x26, 0x78, 0xe9, 0xf3, 0x49,
		0x98, 0xec, 0xa1, 0x09, 0xaa, 0xf0, 0x25, 0x0b, 0x5b, 0x45, 0x5d, 0x1a, 0x44, 0xfb, 0x59, 0x52,
		0x33, 0xac, 0xea, 0xae, 0xcf, 0x57, 0x38, 0x4f, 0x01, 0xb1, 0x92, 0xe5, 0x9b, 0x5b, 0x26, 0x76,
		0xf9, 0x3e, 0x11, 0x5b, 0xc7, 0x8c, 0x87, 0x74, 0xb6, 0x55, 0xf4, 0x0c, 0x20, 0xc7, 0xf6, 0x4c,
		0xdf, 0xbc, 0x8d, 0x35, 0xd3, 0x12, 0x9b, 0x4a, 0x64, 0x5d, 0x93, 0x52, 0xf3, 0xa2, 0xa5, 0x6e,
		0xf9, 0x01, 0xb7, 0x85, 0x9b, 0x7a, 0x8c, 0x9b, 0x04, 0xf3, 0xa4, 0x9a, 0x17, 0x2d, 0x01, 0xf7,
		0x63, 0x30, 0xd2, 0xb0, 0x3b, 0xa4, 0xd8, 0x63, 0x7c, 0x24, 0x77, 0x28, 0x6a, 0x8e, 0xd1, 0x02,
		0x16, 0x5e, 0xc6, 0x87, 0xbb, 0x59, 0x23, 0x6a, 0x8e, 0xd1, 0x18, 0xcb, 0x79, 0x18, 0xd7, 0x9b,
		0x4d, 0x97, 0x80, 0x0b, 0x20, 0xb6, 0x30, 0x19, 0x0b, 0xc8, 0x94, 0x71, 0xfa, 0x16, 0x64, 0x84,
		0x1d, 0x48, 0xaa, 0x26, 0x96, 0xd0, 0x1c, 0xb6, 0xda, 0x4e, 0x5c, 0xc8, 0xaa, 0x19, 0x4b, 0x34,
		0x3e, 0x06, 0x23, 0xa6, 0xa7, 0x85, 0x9b, 0xf3, 0x89, 0x73, 0x89, 0x0b, 0x19, 0x35, 0x67, 0x7a,
		0xc1, 0xc6, 0x66, 0xe9, 0xab, 0x09, 0x18, 0x8b, 0x1e, 0x2e, 0xa0, 0x79, 0xc8, 0xb4, 0x6c, 0x83,
		0x9e, 0x9f, 0xf1, 0x93, 0xad, 0x0b, 0x7d, 0xce, 0x23, 0x66, 0x17, 0x39, 0xbf, 0x1a, 0x48, 0x4e,
		0xff, 0x47, 0x05, 0x32, 0x82, 0x8c, 0x4e, 0xf1, 0x43, 0x41, 0x02, 0x97, 0xae, 0x26, 0xf2, 0x0a,
		0x3b, 0x18, 0x24, 0x74, 0xcf, 0xd1, 0x2d, 0xea, 0x02, 0x9c, 0x4e, 0x7e, 0x93, 0x71, 0x6d, 0x61,
		0xbd, 0x41, 0x57, 0x3d, 0x76, 0xbb, 0x8d, 0x2d, 0xdf, 0x13, 0xe3, 0xca, 0xe9, 0x73, 0x9c, 0x8c,
		0x9e, 0x86, 0x09, 0xdf, 0xd5, 0xcd, 0x56, 0x84, 0x97, 0x9e, 0xd8, 0xaa, 0x79, 0xd1, 0x10, 0x30,
		0x97, 0xe1, 0x8c, 0xc0, 0x6d, 0x60, 0x5f, 0x37, 0xb6, 0x71, 0x23, 0x14, 0x1a, 0xa2, 0xbb, 0x1b,
		0xa7, 0x39, 0xc3, 0x3c, 0x6f, 0x17, 0xb2, 0xa5, 0x6f, 0x2b, 0x30, 0x21, 0xd6, 0x69, 0x8d, 0xc0,
		0x58, 0x4b, 0x00, 0xe1, 0x71, 0x23, 0x37, 0x57, 0xb7, 0x2b, 0x77, 0xc9, 0xcd, 0x56, 0x02, 0x21,
		0x55, 0x02, 0x98, 0x6e, 0x03, 0x84, 0x2d, 0x87, 0x9a, 0xad, 0x08, 0x39, 0x7e, 0x72, 0x44, 0x8f,
		0x1f, 0xd9, 0xca, 0x1e, 0x18, 0x89, 0x2c, 0xe8, 0xd0, 0x14, 0xa4, 0x37, 0x71, 0xd3, 0xb4, 0xf8,
		0x7e, 0x30, 0xfb, 0x21, 0xf6, 0x5f, 0x52, 0xc1, 0xfe, 0x4b, 0xf5, 0xb3, 0x0a, 0x4c, 0x4a, 0x07,
		0xb0, 0x42, 0xdf, 0x6a, 0x3e, 0xb6, 0xbd, 0xe0, 0xbd, 0xaa, 0x7c, 0xec, 0xe5, 0xa6, 0xe9, 0x6f,
		0x77, 0x36, 0x67, 0x0d, 0xbb, 0x7d, 0x99, 0x1d, 0xc8, 0x86, 0xe7, 0xa7, 0xf4, 0x0f, 0xe3, 0x52,
		0x13, 0x5b, 0x97, 0x9a, 0xb6, 0x74, 0x9a, 0x7a, 0x23, 0xfc, 0x93, 0x9e, 0xc4, 0x26, 0x17, 0x56,
		0xab, 0xbf, 0x93, 0x98, 0x5e, 0x60, 0xdd, 0xad, 0x0a, 0xf3, 0xa8, 0x78, 0xab, 0x85, 0x0d, 0xf2,
		0xc8, 0xf0, 0x6f, 0x13, 0x70, 0x56, 0xba, 0x65, 0x20, 0x1d, 0xe5, 0x76, 0x5f, 0x36, 0x98, 0xee,
		0x7d, 0x1f, 0x61, 0xba, 0xef, 0xf1, 0x6e, 0xf9, 0xc3, 0x90, 0x22, 0xfc, 0xa8, 0xcf, 0x86, 0x46,
		0xe1, 0xf7, 0xfe, 0xc3, 0xbf, 0x29, 0xd1, 0x9d, 0x8f, 0xde, 0x07, 0xeb, 0x14, 0xa4, 0xfa, 0x73,
		0x83, 0x9f, 0x6e, 0xe7, 0xc3, 0xc1, 0xf5, 0x3e, 0xb8, 0x43, 0xee, 0xf8, 0x09, 0xf7, 0x37, 0x9e,
		0x86, 0x4b, 0x91, 0xc1, 0x6a, 0xda, 0xa1, 0x2d, 0xc8, 0x2f, 0x01, 0xde, 0xb4, 0xb9, 0x51, 0xb3,
		0x01, 0x75, 0x00, 0xe3, 0x2d, 0xc3, 0x24, 0x67, 0xd6, 0xe8, 0x79, 0x1b, 0x5b, 0x35, 0xa2, 0x23,
		0xf7, 0x2c, 0x0b, 0xbf, 0xff, 0x3d, 0x5a, 0x2d, 0xa9, 0x13, 0x5c, 0x94, 0xb4, 0xb1, 0x85, 0x65,
		0x59, 0x85, 0x93, 0x11, 0x3c, 0x16, 0x13, 0xb1, 0xdb, 0x07, 0xf1, 0x4f, 0x38, 0xe2, 0xa4, 0x84,
		0xb8, 0xc6, 0x45, 0xcb, 0x73, 0x30, 0x7a, 0x1c, 0xac, 0x7f, 0xc7, 0xb1, 0x46, 0xb0, 0x0c, 0xb2,
		0x00, 0xe3, 0x14, 0x84, 0xdd, 0xbc, 0xa0, 0x09, 0xe7, 0x68, 0x98, 0x7f, 0xff, 0x3d, 0x16, 0xa4,
		0xc6, 0x88, 0xd8, 0x5c, 0x20, 0x55, 0x2e, 0x03, 0x3d, 0x62, 0x6c, 0x60, 0xa3, 0xd5, 0x07, 0xe1,
		0x4f, 0xb9, 0x22, 0x01, 0x7f, 0xf9, 0xa3, 0x30, 0x45, 0xfe, 0xa6, 0xf9, 0x40, 0xd6, 0xa4, 0xff,
		0x06, 0x67, 0xe1, 0xdb, 0x9f, 0x66, 0x71, 0x70, 0x32, 0x00, 0x90, 0x74, 0x92, 0x46, 0xb1, 0x89,
		0x7d, 0x1f, 0xbb, 0x9e, 0xa6, 0xb7, 0x7a, 0xa9, 0x27, 0xed, 0x10, 0x15, 0x7e, 0xfd, 0xdd, 0xe8,
		0x28, 0x2e, 0x30, 0xc9, 0x4a, 0xab, 0x55, 0xde, 0x80, 0xd3, 0x3d, 0xbc, 0x62, 0x00, 0xcc, 0xcf,
		0x73, 0xcc, 0xa9, 0x2e, 0xcf, 0x20, 0xb0, 0xab, 0x20, 0xe8, 0xc1, 0x58, 0x0e, 0x80, 0xf9, 0x1b,
		0x1c, 0x13, 0x71, 0x59, 0x31, 0xa4, 0x04, 0xf1, 0x16, 0x4c, 0xdc, 0xc6, 0xee, 0xa6, 0xed, 0xf1,
		0x5d, 0xb9, 0x01, 0xe0, 0xbe, 0xc0, 0xe1, 0xc6, 0xb9, 0x20, 0xdd, 0xa6, 0x23, 0x58, 0x2f, 0x42,
		0x66, 0x4b, 0x37, 0xf0, 0x00, 0x10, 0xbf, 0xc9, 0x21, 0x86, 0x09, 0x3f, 0x11, 0xad, 0xc0, 0x48,
		0xd3, 0xe6, 0x25, 0x41, 0x7f, 0xf1, 0x2f, 0x72, 0xf1, 0x9c, 0x90, 0xe1, 0x10, 0x8e, 0xed, 0x74,
		0x5a, 0xa4, 0x5e, 0xe8, 0x0f, 0xf1, 0xf7, 0x04, 0x84, 0x90, 0xe1, 0x10, 0xc7, 0x30, 0xeb, 0x97,
		0x04, 0x84, 0x27, 0xd9, 0xf3, 0x15, 0xc8, 0xd9, 0x56, 0x6b, 0xcf, 0xb6, 0x06, 0x51, 0xe2, 0xcb,
		0x1c, 0x01, 0xb8, 0x08, 0x01, 0xb8, 0x01, 0xd9, 0x41, 0x07, 0xe2, 0x2b, 0xef, 0x8a, 0xe9, 0x21,
		0x46, 0x60, 0x01, 0xc6, 0x45, 0x80, 0x32, 0x6d, 0x6b, 0x00, 0x88, 0x7f, 0xc8, 0x21, 0xc6, 0x24,
		0x31, 0xfe, 0x18, 0x3e, 0xf6, 0xfc, 0x26, 0x1e, 0x04, 0xe4, 0xab, 0xe2, 0x31, 0xb8, 0x08, 0x37,
		0xe5, 0x26, 0xb6, 0x8c, 0xed, 0xc1, 0x10, 0x7e, 0x5b, 0x98, 0x52, 0xc8, 0x10, 0x88, 0x39, 0x18,
		0x6d, 0xeb, 0xae, 0xb7, 0xad, 0xb7, 0x06, 0x1a, 0x8e, 0x7f, 0xc4, 0x31, 0x46, 0x02, 0x21, 0x6e,
		0x91, 0x8e, 0x75, 0x1c, 0x98, 0xdf, 0x11, 0x16, 0x91, 0xc4, 0xf8, 0xd4, 0xf3, 0x7c, 0xba, 0x85,
		0x79, 0x1c, 0xb4, 0x7f, 0x2c, 0xa6, 0x1e, 0x93, 0x5d, 0x92, 0x11, 0x6f, 0x40, 0xd6, 0x33, 0xef,
		0x0e, 0x04, 0xf3, 0x4f, 0xc4, 0x48, 0x53, 0x01, 0x22, 0xfc, 0x06, 0x9c, 0xe9, 0x99, 0x26, 0x06,
		0x00, 0xfb, 0x5d, 0x0e, 0x76, 0xaa, 0x47, 0xaa, 0xe0, 0x21, 0xe1, 0xb8, 0x90, 0xff, 0x54, 0x84,
		0x04, 0x1c, 0xc3, 0x5a, 0x25, 0x8b, 0x34, 0x4f, 0xdf, 0x3a, 0x9e, 0xd5, 0xfe, 0x99, 0xb0, 0x1a,
		0x93, 0x8d, 0x58, 0x6d, 0x1d, 0x4e, 0x71, 0xc4, 0xe3, 0x8d, 0xeb, 0xef, 0x89, 0xc0, 0xca, 0xa4,
		0x37, 0xa2, 0xa3, 0xfb, 0x71, 0x98, 0x0e, 0xcc, 0x29, 0x56, 0x03, 0x9e, 0xd6, 0xd6, 0x9d, 0x01,
		0x90, 0x7f, 0x9f, 0x23, 0x8b, 0x88, 0x1f, 0x2c, 0x27, 0xbc, 0x25, 0xdd, 0x21, 0xe0, 0xaf, 0x43,
		0x41, 0x80, 0x77, 0x2c, 0x17, 0x1b, 0x76, 0xd3, 0x32, 0xef, 0xe2, 0xc6, 0x00, 0xd0, 0xff, 0x3c,
		0x36, 0x54, 0x1b, 0x92, 0x38, 0x41, 0xae, 0x43, 0x3e, 0xa8, 0x55, 0x34, 0xb3, 0xed, 0xd8, 0xae,
		0xdf, 0x07, 0xf1, 0x0f, 0xc4, 0x48, 0x05, 0x72, 0x75, 0x2a, 0x56, 0xae, 0xc1, 0x18, 0xfd, 0x39,
		0xa8, 0x4b, 0xfe, 0x0b, 0x0e, 0x34, 0x1a, 0x4a, 0xf1, 0xc0, 0x61, 0xd8, 0x6d, 0x47, 0x77, 0x07,
		0x89, 0x7f, 0xff, 0x52, 0x04, 0x0e, 0x2e, 0xc2, 0x03, 0x87, 0xbf, 0xe7, 0x60, 0x92, 0xed, 0x07,
		0x40, 0xf8, 0x9a, 0x08, 0x1c, 0x42, 0x86, 0x43, 0x88, 0x82, 0x61, 0x00, 0x88, 0x7f, 0x25, 0x20,
		0x84, 0x0c, 0x81, 0xf8, 0x48, 0x98, 0x68, 0x5d, 0xdc, 0x34, 0x3d, 0xdf, 0x65, 0x6b, 0x90, 0xa3,
		0xa1, 0xfe, 0xf0, 0xdd, 0x68, 0x11, 0xa6, 0x4a, 0xa2, 0x24, 0x12, 0xf1, 0x3d, 0x6d, 0xba, 0x44,
		0xed, 0xaf, 0xd8, 0xd7, 0x45, 0x24, 0x92, 0xc4, 0x88, 0x6e, 0x52, 0x85, 0x48, 0xcc, 0x6e, 0x90,
		0x85, 0xd9, 0x00, 0x70, 0x7f, 0x14, 0x53, 0x6e, 0x4d, 0xc8, 0x12, 0x4c, 0xa9, 0xfe, 0xe9, 0x58,
		0x3b, 0x78, 0x6f, 0x20, 0xef, 0xfc, 0xd7, 0xb1, 0xfa, 0x67, 0x83, 0x49, 0xb2, 0x18, 0x32, 0x1e,
		0xab, 0xa7, 0x50, 0xbf, 0xcb, 0x59, 0x85, 0x4f, 0xbe, 0xc7, 0x9f, 0x37, 0x5a, 0x4e, 0x95, 0x17,
		0x89, 0x93, 0x47, 0x8b, 0x9e, 0xfe, 0x60, 0x9f, 0x7e, 0x2f, 0xf0, 0xf3, 0x48, 0xcd, 0x53, 0xbe,
		0x09, 0xa3, 0x91, 0x82, 0xa7, 0x3f, 0xd4, 0xcf, 0x70, 0xa8, 0x11, 0xb9, 0xde, 0x29, 0x3f, 0x07,
		0x29, 0x52, 0xbc, 0xf4, 0x17, 0xff, 0x59, 0x2e, 0x4e, 0xd9, 0xcb, 0x2f, 0x41, 0x46, 0x14, 0x2d,
		0xfd, 0x45, 0x7f, 0x8e, 0x8b, 0x06, 0x22, 0x44, 0x5c, 0x14, 0x2c, 0xfd, 0xc5, 0x7f, 0x5e, 0x88,
		0x0b, 0x11, 0x22, 0x3e, 0xb8, 0x09, 0xbf, 0xf9, 0x0b, 0x29, 0x9e, 0x74, 0x84, 0xed, 0x6e, 0xc0,
		0x30, 0xaf, 0x54, 0xfa, 0x4b, 0x7f, 0x86, 0x77, 0x2e, 0x24, 0xca, 0xcf, 0x43, 0x7a, 0x40, 0x83,
		0xff, 0x22, 0x17, 0x65, 0xfc, 0xe5, 0x39, 0xc8, 0x49, 0xd5, 0x49, 0x7f, 0xf1, 0x5f, 0xe2, 0xe2,
		0xb2, 0x14, 0x51, 0x9d, 0x57, 0x27, 0xfd, 0x01, 0x3e, 0x2b, 0x54, 0xe7, 0x12, 0xc4, 0x6c, 0xa2,
		0x30, 0xe9, 0x2f, 0xfd, 0xcb, 0xc2, 0xea, 0x42, 0xa4, 0xfc, 0x0a, 0x64, 0x83, 0x64, 0xd3, 0x5f,
		0xfe, 0xef, 0x70, 0xf9, 0x50, 0x86, 0x58, 0x40, 0x4a, 0x76, 0xfd, 0x21, 0x3e, 0x27, 0x2c, 0x20,
		0x49, 0x91, 0x69, 0x14, 0x2f, 0x60, 0xfa, 0x23, 0xfd, 0x8a, 0x98, 0x46, 0xb1, 0xfa, 0x85, 0x8c,
		0x26, 0x8d, 0xf9, 0xfd, 0x21, 0xfe, 0xae, 0x18, 0x4d, 0xca, 0x4f, 0xd4, 0x88, 0x57, 0x04, 0xfd,
		0x31, 0x7e, 0x55, 0xa8, 0x11, 0x2b, 0x08, 0xca, 0xab, 0x80, 0xba, 0xab, 0x81, 0xfe, 0x78, 0xbf,
		0xc6, 0xf1, 0x26, 0xba, 0x8a, 0x81, 0xf2, 0x6b, 0x70, 0xaa, 0x77, 0x25, 0xd0, 0x1f, 0xf5, 0xd7,
		0xdf, 0x8b, 0xad, 0xdd, 0xe4, 0x42, 0xa0, 0xbc, 0x1e, 0xa6, 0x14, 0xb9, 0x0a, 0xe8, 0x0f, 0xfb,
		0xf9, 0xf7, 0xa2, 0x81, 0x5b, 0x2e, 0x02, 0xca, 0x15, 0x80, 0x30, 0x01, 0xf7, 0xc7, 0xfa, 0x02,
		0xc7, 0x92, 0x84, 0xc8, 0xd4, 0xe0, 0xf9, 0xb7, 0xbf, 0xfc, 0x6f, 0x8a, 0xa9, 0xc1, 0x25, 0xc8,
		0xd4, 0x10, 0xa9, 0xb7, 0xbf, 0xf4, 0x17, 0xc5, 0xd4, 0x10, 0x22, 0xc4, 0xb3, 0xa5, 0xec, 0xd6,
		0x1f, 0xe1, 0xcb, 0xc2, 0xb3, 0x25, 0xa9, 0xf2, 0x32, 0x4c, 0x74, 0x25, 0xc4, 0xfe, 0x50, 0xbf,
		0xc5, 0xa1, 0xf2, 0xf1, 0x7c, 0x28, 0x27, 0x2f, 0x9e, 0x0c, 0xfb, 0xa3, 0xfd, 0xfd, 0x58, 0xf2,
		0xe2, 0xb9, 0xb0, 0x7c, 0x03, 0x32, 0x56, 0xa7, 0xd5, 0x22, 0x93, 0x07, 0x1d, 0x7d, 0xa1, 0xb2,
		0xf0, 0xdf, 0x7f, 0xc8, 0xad, 0x23, 0x04, 0xca, 0xcf, 0x41, 0x1a, 0xb7, 0x37, 0x71, 0xa3, 0x9f,
		0xe4, 0x5f, 0xfd, 0x50, 0x04, 0x4c, 0xc2, 0x5d, 0x7e, 0x05, 0x80, 0x6d, 0x8d, 0xd0, 0xb3, 0xd7,
		0x3e, 0xb2, 0xff, 0xe3, 0x87, 0xfc, 0xaa, 0x53, 0x28, 0x12, 0x02, 0xb0, 0x8b, 0x53, 0x47, 0x03,
		0xbc, 0x1b, 0x05, 0xa0, 0x23, 0xf2, 0x22, 0x0c, 0xbf, 0xe9, 0xd9, 0x96, 0xaf, 0x37, 0xfb, 0x49,
		0xff, 0x4f, 0x2e, 0x2d, 0xf8, 0x89, 0xc1, 0xda, 0xb6, 0x8b, 0x7d, 0xbd, 0xe9, 0xf5, 0x93, 0xfd,
		0x5f, 0x5c, 0x36, 0x10, 0x20, 0xc2, 0x86, 0xee, 0xf9, 0x83, 0x3c, 0xf7, 0x5f, 0x0b, 0x61, 0x21,
		0x40, 0x94, 0x26, 0x7f, 0xef, 0xe0, 0xbd, 0x7e, 0xb2, 0xdf, 0x17, 0x4a, 0x73, 0xfe, 0xf2, 0x4b,
		0x90, 0x25, 0x7f, 0xb2, 0xfb, 0x8b, 0x7d, 0x84, 0xff, 0x37, 0x17, 0x0e, 0x25, 0x48, 0xcf, 0x9e,
		0xdf, 0xf0, 0xcd, 0xfe, 0xc6, 0x3e, 0xe0, 0x23, 0x2d, 0xf8, 0xcb, 0x15, 0xc8, 0x79, 0x7e, 0xa3,
		0xd1, 0xe1, 0xf5, 0x69, 0x1f, 0xf1, 0xff, 0xf3, 0xc3, 0x60, 0xcb, 0x22, 0x90, 0x21, 0xa3, 0x7d,
		0x67, 0xc7, 0x77, 0x6c, 0x7a, 0xbe, 0xd4, 0x0f, 0xe1, 0x3d, 0x8e, 0x20, 0x89, 0x54, 0x7f, 0xf2,
		0xd0, 0x1d, 0xdf, 0x9e, 0xdb, 0xe9, 0xb0, 0x60, 0x2f, 0xd8, 0x6c, 0x23, 0xfd, 0x63, 0xa5, 0xfe,
		0x3b, 0xb3, 0xf0, 0xd7, 0x4f, 0xc1, 0x18, 0x2f, 0xc2, 0xf7, 0xf8, 0x0e, 0xed, 0x49, 0x43, 0x77,
		0xdb, 0xad, 0x59, 0xdb, 0x6d, 0xce, 0x36, 0x5a, 0x5b, 0xae, 0xde, 0xc6, 0x77, 0x6c, 0x77, 0x67,
		0xfa, 0xc8, 0xbd, 0xf2, 0xe9, 0xe3, 0xed, 0x02, 0x97, 0x7c, 0xc8, 0xd5, 0x5c, 0xd7, 0x76, 0xd7,
		0x7c, 0xdd, 0xef, 0x78, 0xe8, 0x3c, 0x24, 0xec, 0x1d, 0x76, 0x7a, 0x5c, 0x3d, 0x7d, 0xb0, 0x5f,
		0x9c, 0xdc, 0xd3, 0xdb, 0xad, 0x72, 0xc9, 0xde, 0x79, 0xc6, 0x6e, 0x9b, 0x3e, 0x6e, 0x3b, 0xfe,
		0x5e, 0x49, 0x4d, 0xd8, 0x3b, 0xe8, 0x3a, 0x0c, 0xf3, 0xe0, 0xc4, 0x8e, 0x22, 0xaa, 0x67, 0x0f,
		0xf6, 0x8b, 0x05, 0xc6, 0xcd, 0x1b, 0x64, 0x11, 0xc1, 0x5c, 0x4e, 0x7d, 0xff, 0x4b, 0x45, 0xa5,
		0xf4, 0x16, 0x4c, 0xcc, 0x91, 0x89, 0x60, 0x5a, 0xd8, 0x7d, 0x55, 0x77, 0x1b, 0x77, 0x48, 0x58,
		0xbe, 0x08, 0xc9, 0xa6, 0xd3, 0x61, 0x77, 0xf8, 0xaa, 0x85, 0x83, 0xfd, 0xe2, 0x14, 0x83, 0x6b,
		0x3a, 0x1d, 0x19, 0x8a, 0x30, 0x11, 0x5e, 0xc3, 0xe9, 0xf0, 0xae, 0x25, 0x5e, 0x23, 0xc6, 0x6b,
		0x38, 0x1d, 0xde, 0xe5, 0x7f, 0x4b, 0xc0, 0xc4, 0x4d, 0x61, 0xc3, 0x25, 0xdd, 0x32, 0xb7, 0xb0,
		0xe7, 0xa3, 0x4b, 0xf2, 0x15, 0xca, 0xea, 0x99, 0x83, 0xfd, 0xe2, 0x49, 0x06, 0x44, 0xa8, 0x32,
		0x12, 0x3b, 0x7b, 0xbc, 0x0e, 0xc3, 0xb7, 0xb1, 0x1b, 0xbc, 0x9d, 0x18, 0x79, 0x6a, 0xde, 0x10,
		0x79, 0x6a, 0x4e, 0x43, 0x1d, 0xc8, 0x1a, 0xe2, 0x79, 0xf9, 0x7b, 0x2e, 0xcf, 0xcf, 0xf6, 0x1c,
		0xdd, 0xd9, 0x2e, 0x1d, 0x67, 0x03, 0x4b, 0xd1, 0xbb, 0x38, 0xd5, 0x99, 0x83, 0xfd, 0xe2, 0x34,
		0x7f, 0x5a, 0xd1, 0x22, 0x77, 0x1a, 0xf6, 0x34, 0xbd, 0x05, 0x63, 0x51, 0x61, 0x94, 0x87, 0xe4,
		0x0e, 0xde, 0xe3, 0xf7, 0x24, 0xc9, 0x9f, 0xe8, 0xe5, 0xf0, 0x22, 0xb3, 0x42, 0x8f, 0xfd, 0x7a,
		0xab, 0xd5, 0x35, 0x5c, 0xfc, 0x1e, 0x73, 0x39, 0xf1, 0x82, 0xc2, 0x2d, 0xfc, 0xe5, 0x49, 0x18,
		0x5d, 0xb2, 0x1b, 0xb8, 0xf5, 0xb0, 0xad, 0xbb, 0x05, 0xd9, 0x40, 0x51, 0x7e, 0xbd, 0xf6, 0xc2,
		0xa0, 0xd6, 0x95, 0xcd, 0x19, 0xb0, 0x45, 0xcc, 0x19, 0x50, 0xd1, 0x5b, 0xf2, 0x28, 0xb2, 0x5b,
		0xd7, 0xcf, 0x1e, 0xd2, 0x4f, 0xc4, 0x0e, 0xf7, 0x3f, 0x82, 0xa8, 0x1a, 0x59, 0x15, 0xb0, 0xb7,
		0x4f, 0xab, 0xe7, 0x0e, 0xf6, 0x8b, 0x67, 0x99, 0xbc, 0xd4, 0x28, 0x23, 0x44, 0x96, 0x12, 0x2f,
		0x41, 0xd6, 0xc5, 0x5b, 0xd8, 0xc5, 0x16, 0x7f, 0x6b, 0x2e, 0x5b, 0x2d, 0x1e, 0xec, 0x17, 0x1f,
		0x61, 0x08, 0x41, 0x93, 0x17, 0x51, 0x21, 0x20, 0x93, 0x51, 0x69, 0x99, 0x06, 0xb6, 0x3c, 0xfe,
		0x3a, 0x86, 0x3c, 0x2a, 0xbc, 0x21, 0x32, 0x2a, 0x9c, 0x86, 0xfe, 0x26, 0x0c, 0xd1, 0x7b, 0xc7,
		0x1e, 0x7f, 0xf3, 0xe9, 0xa9, 0x81, 0x4c, 0xb5, 0xbe, 0xe7, 0xe0, 0xea, 0x23, 0x07, 0xfb, 0xc5,
		0xd3, 0xac, 0x07, 0x06, 0x21, 0x77, 0xc0, 0x51, 0x09, 0x3e, 0xbb, 0xb7, 0xcc, 0x5f, 0xa0, 0xbb,
		0x3f, 0x7c, 0x06, 0x11, 0xc1, 0x67, 0x24, 0xb4, 0x06, 0x13, 0x9b, 0x78, 0xcb, 0x76, 0xb1, 0xe6,
		0xb8, 0xd8, 0x71, 0x6d, 0x03, 0x7b, 0xec, 0x12, 0x70, 0xb6, 0xfa, 0xa1, 0x83, 0xfd, 0x62, 0x89,
		0xc9, 0x77, 0xb1, 0xc8, 0x50, 0x79, 0xd6, 0xba, 0x1a, 0x34, 0xa2, 0x57, 0x48, 0x21, 0x1b, 0xa0,
		0xd1, 0xdb, 0xb4, 0xf2, 0x60, 0xf4, 0x86, 0x91, 0x44, 0xd0, 0x2a, 0xe4, 0xf5, 0x2d, 0x1f, 0xbb,
		0xb2, 0x52, 0xf4, 0xfd, 0xbf, 0xea, 0x93, 0x07, 0xfb, 0xc5, 0xc7, 0x18, 0x4c, 0x9c, 0x43, 0x06,
		0x1b, 0xa7, 0x8d, 0x92, 0x4a, 0x1f, 0x05, 0x24, 0x1e, 0xc2, 0xf6, 0x7c, 0x81, 0x39, 0x4a, 0x31,
		0xcf, 0x1f, 0xec, 0x17, 0x1f, 0x8f, 0x3e, 0x68, 0xc8, 0x23, 0xa3, 0x72, 0x53, 0xad, 0x86, 0xad,
		0xc4, 0x75, 0x65, 0xc0, 0xb1, 0xb8, 0xeb, 0x1e, 0x82, 0x24, 0x0b, 0x91, 0x31, 0xe0, 0xcf, 0x22,
		0x21, 0x8d, 0xc7, 0xc7, 0xa0, 0x8b, 0x25, 0x32, 0x06, 0xec, 0x79, 0x25, 0xd0, 0x9f, 0x80, 0x74,
		0x9b, 0xf8, 0x04, 0xbd, 0xa4, 0x9c, 0xbb, 0x7a, 0x71, 0x20, 0xbf, 0xa1, 0xbf, 0xaa, 0xd3, 0x07,
		0xfb, 0xc5, 0x53, 0x3c, 0xc9, 0x11, 0x82, 0xdc, 0x11, 0x03, 0x45, 0x1d, 0x00, 0xdd, 0xf7, 0x5d,
		0x73, 0xb3, 0xe3, 0xd3, 0xeb, 0xcc, 0xc4, 0xf5, 0xaf, 0x0d, 0xd4, 0x45, 0x25, 0x10, 0x63, 0x61,
		0x42, 0xf2, 0x8b, 0x10, 0x31, 0xe2, 0x17, 0x21, 0x19, 0x3d, 0x0b, 0x43, 0xdb, 0x66, 0xa3, 0x81,
		0x2d, 0x76, 0x11, 0x5a, 0x76, 0x71, 0x46, 0x8f, 0xb8, 0x38, 0x23, 0x4d, 0x7f, 0x29, 0xc9, 0xdf,
		0x69, 0xba, 0xc4, 0xdf, 0xf8, 0xea, 0x0a, 0xd4, 0x84, 0x1a, 0x09, 0xd4, 0xb4, 0xe8, 0x8c, 0x45,
		0xa5, 0xc4, 0xfd, 0x44, 0xa5, 0xbb, 0x00, 0x8e, 0x4e, 0x2c, 0xe1, 0x63, 0xd7, 0xe3, 0x39, 0xf1,
		0xc5, 0x81, 0xa7, 0xf0, 0xec, 0x6a, 0x20, 0xdb, 0x65, 0xac, 0x10, 0x36, 0x3a, 0x89, 0x02, 0xf2,
		0xf4, 0x73, 0x90, 0x0d, 0xe4, 0xd1, 0x05, 0x91, 0x00, 0xd9, 0xc3, 0xa3, 0x83, 0xfd, 0xe2, 0x18,
		0x03, 0x7a, 0xc6, 0xb4, 0x5a, 0xa6, 0x85, 0x4b, 0x3c, 0xd5, 0x4d, 0xbb, 0x30, 0x1e, 0xeb, 0xb6,
		0x47, 0x3e, 0xad, 0x47, 0xf3, 0xe9, 0xb3, 0xf7, 0xf1, 0x48, 0x52, 0x6a, 0x9d, 0xfe, 0x4a, 0x12,
		0xd2, 0x94, 0x17, 0xbd, 0x00, 0x99, 0x4d, 0xdd, 0xc3, 0x5a, 0xc7, 0x6d, 0x71, 0x55, 0x1f, 0x3d,
		0xd8, 0x2f, 0x9e, 0xe1, 0xb3, 0x93, 0xb7, 0x44, 0x22, 0x31, 0x21, 0x6e, 0xb8, 0x2d, 0x34, 0x0f,
		0x23, 0x77, 0xb0, 0xd9, 0xdc, 0xf6, 0x3d, 0x2d, 0x7c, 0x4d, 0xbf, 0xfa, 0xd8, 0xc1, 0x7e, 0xf1,
		0x51, 0x26, 0x2d, 0xb7, 0x46, 0x06, 0x8c, 0x37, 0xac, 0xea, 0xfe, 0x36, 0x7a, 0x19, 0xa0, 0xe9,
		0xea, 0xce, 0x36, 0xc3, 0x48, 0xc6, 0x43, 0x57, 0xd8, 0x16, 0xc9, 0x23, 0x94, 0x2c, 0xe4, 0x4d,
		0x4f, 0xd3, 0x5d, 0x63, 0xdb, 0xbc, 0xcd, 0x2e, 0x61, 0x65, 0x64, 0xf9, 0xb0, 0x2d, 0x22, 0x6f,
		0x7a, 0x15, 0x46, 0x25, 0x91, 0x4f, 0xe8, 0x49, 0xdf, 0x8a, 0xf0, 0x3a, 0x6d, 0x9e, 0x0f, 0xa5,
		0xc8, 0x17, 0xe7, 0x88, 0x44, 0x3e, 0xde, 0x38, 0xc7, 0xdb, 0xd0, 0x2d, 0x18, 0x63, 0x5a, 0x07,
		0x78, 0xf4, 0x65, 0xc5, 0xea, 0xe3, 0x07, 0xfb, 0xc5, 0xa2, 0xfc, 0x54, 0xbd, 0xd0, 0x46, 0x69,
		0x93, 0xc0, 0x7a, 0x58, 0xa5, 0xd6, 0xf4, 0x4b, 0x30, 0x1e, 0x8b, 0x13, 0x3d, 0x3a, 0x9a, 0x92,
		0x3b, 0xca, 0x4a, 0xe2, 0xa5, 0xaf, 0x2b, 0x90, 0x0f, 0x6a, 0x20, 0x15, 0xbf, 0xd5, 0x21, 0x65,
		0xda, 0x2d, 0x18, 0x0b, 0x7a, 0xd7, 0xa4, 0x82, 0x4d, 0xb2, 0x43, 0xb4, 0x3d, 0x62, 0x87, 0xa0,
		0x89, 0xbe, 0x5f, 0xb9, 0x06, 0x13, 0x21, 0x6f, 0xb4, 0x9a, 0x93, 0x22, 0x76, 0x17, 0x4b, 0x24,
		0x62, 0x07, 0xad, 0x1f, 0x65, 0x8d, 0xbc, 0xbe, 0xfc, 0xdb, 0x0a, 0x4c, 0x77, 0xd5, 0x6f, 0x9e,
		0xca, 0x3f, 0x5e, 0x41, 0xaa, 0xc0, 0xb6, 0x20, 0x06, 0x77, 0xd8, 0xee, 0xa3, 0x0a, 0x0c, 0x40,
		0x22, 0x7e, 0x18, 0x50, 0x45, 0xb1, 0x9b, 0x86, 0x74, 0xa5, 0x89, 0x2d, 0x5a, 0xe4, 0x6e, 0xdb,
		0x9e, 0xdf, 0x1d, 0x3b, 0x09, 0x35, 0x12, 0x3b, 0x09, 0x81, 0xb0, 0x3b, 0xb6, 0xcb, 0xbf, 0x44,
		0x22, 0xb3, 0x13, 0x6a, 0x84, 0x9d, 0x9e, 0x73, 0xbd, 0x08, 0x19, 0x22, 0x46, 0x47, 0x25, 0x19,
		0x9f, 0xf5, 0xa2, 0x45, 0x16, 0x0b, 0xd8, 0x51, 0x0d, 0x46, 0xe8, 0x8c, 0xf2, 0xb1, 0xe1, 0x77,
		0x5c, 0x36, 0xe5, 0x22, 0xd3, 0x5e, 0x6e, 0x95, 0x21, 0x22, 0x62, 0x34, 0xb3, 0xe8, 0x1e, 0x59,
		0x99, 0xa5, 0xbb, 0x32, 0x0b, 0xa5, 0x47, 0x33, 0x0b, 0x25, 0x91, 0xa2, 0xd1, 0x70, 0x3a, 0xf4,
		0xf3, 0x06, 0x43, 0xf1, 0xa2, 0x91, 0x37, 0x44, 0x42, 0x15, 0xa7, 0x11, 0xb9, 0x26, 0x97, 0xeb,
		0x2a, 0x36, 0x9b, 0x3d, 0xe4, 0x38, 0x0d, 0x99, 0x00, 0xc1, 0xf0, 0x8a, 0x82, 0x73, 0xf0, 0xd1,
		0x97, 0xc2, 0x50, 0x88, 0x12, 0x49, 0x1e, 0x21, 0x19, 0x61, 0xc8, 0x88, 0x57, 0x5d, 0xf8, 0xeb,
		0xf4, 0x87, 0x55, 0x10, 0xd4, 0x3f, 0x66, 0xc5, 0xab, 0x2f, 0x2c, 0x4f, 0x49, 0xa3, 0x27, 0x50,
		0x22, 0xa3, 0x27, 0x88, 0xd3, 0x37, 0xe8, 0x1d, 0xe5, 0x50, 0xf2, 0x38, 0xd3, 0x9c, 0xfb, 0xa8,
		0x0e, 0x43, 0x54, 0x05, 0x0f, 0x7d, 0x04, 0x86, 0x74, 0xfa, 0x17, 0x9f, 0x18, 0x67, 0x8f, 0xd2,
		0x58, 0x1e, 0x61, 0x26, 0x15, 0x19, 0x61, 0x46, 0xe2, 0x5d, 0x7c, 0x23, 0x01, 0x23, 0x34, 0x3d,
		0xfd, 0xbf, 0x12, 0x4b, 0x48, 0x1a, 0xa2, 0x85, 0x9a, 0x26, 0x4d, 0x29, 0x69, 0xfc, 0xc3, 0xb6,
		0xe8, 0xf4, 0x27, 0x64, 0xaa, 0xd4, 0x02, 0x8c, 0x32, 0x1e, 0xa1, 0x10, 0x9b, 0x56, 0xa5, 0x83,
		0xfd, 0xe2, 0x8c, 0x0c, 0xd1, 0x43, 0x99, 0x11, 0xda, 0x12, 0x0d, 0x6a, 0x9f, 0x52, 0xe0, 0x54,
		0xa4, 0x16, 0x08, 0x03, 0xda, 0x66, 0x77, 0x40, 0x7b, 0x62, 0x90, 0x6a, 0xe2, 0xd8, 0xc1, 0xec,
		0xea, 0x97, 0x52, 0x90, 0xe1, 0xa7, 0xb8, 0x7b, 0xe8, 0x57, 0x15, 0x40, 0xdd, 0x61, 0x16, 0x9d,
		0xef, 0x37, 0x9b, 0xb8, 0x07, 0x4c, 0xff, 0x8d, 0x41, 0xa7, 0x5d, 0xf0, 0xa4, 0xa5, 0x27, 0x3f,
		0xf5, 0x9f, 0xbe, 0xf7, 0x2b, 0x89, 0x22, 0x7a, 0xf4, 0xb2, 0xd8, 0x01, 0xbb, 0x1c, 0x4e, 0xb8,
		0xcb, 0x42, 0x5b, 0xf4, 0xd3, 0x30, 0x1e, 0x80, 0x70, 0xc7, 0x1e, 0x58, 0xab, 0x47, 0x8f, 0xf2,
		0x78, 0xaf, 0x54, 0xa2, 0x1a, 0x9c, 0x45, 0xd3, 0x3d, 0x35, 0xa0, 0x2e, 0x8f, 0x7e, 0x5e, 0x81,
		0xb1, 0xe8, 0x50, 0xa1, 0xc7, 0x8f, 0x1a, 0x0f, 0xd1, 0xf5, 0xa5, 0x41, 0x06, 0x2d, 0x34, 0xc6,
		0x63, 0x54, 0x95, 0x47, 0xd0, 0x99, 0x50, 0x15, 0xea, 0x37, 0x92, 0x21, 0xde, 0x82, 0x1c, 0x15,
		0xe6, 0x46, 0x18, 0x48, 0x8b, 0x3e, 0x06, 0x98, 0xa1, 0xbd, 0x16, 0xd0, 0xa9, 0xae, 0x5e, 0xe9,
		0xc3, 0x57, 0xeb, 0x7f, 0xfe, 0xdd, 0x99, 0x13, 0xdf, 0xf9, 0xee, 0x8c, 0xf2, 0xfd, 0xef, 0xce,
		0x28, 0x3f, 0xf8, 0xee, 0x8c, 0xf2, 0xf6, 0xbd, 0x19, 0xe5, 0xb7, 0xef, 0xcd, 0x28, 0x7f, 0x78,
		0x6f, 0x46, 0xf9, 0xe6, 0xbd, 0x99, 0xae, 0xfb, 0xb0, 0xdf, 0x7c, 0x67, 0x46, 0x11, 0x3b, 0xa4,
		0x1f, 0xcb, 0x49, 0x3d, 0x06, 0x57, 0x56, 0xff, 0xac, 0x04, 0x63, 0x5b, 0x58, 0x27, 0x49, 0x46,
		0x5c, 0xf4, 0x3d, 0xdb, 0x6e, 0xb1, 0x5e, 0x0d, 0xdb, 0xc1, 0x0f, 0x76, 0xe3, 0xb3, 0x03, 0xe9,
		0x7a, 0x5b, 0x6f, 0x62, 0xf4, 0x12, 0x24, 0x4c, 0xfe, 0x39, 0xab, 0xea, 0xa5, 0x7b, 0xfb, 0xc5,
		0x44, 0x7d, 0xfe, 0xaf, 0xf6, 0x8b, 0x23, 0x66, 0x23, 0x9c, 0x32, 0xe1, 0x46, 0xa8, 0x4c, 0x2d,
		0xa9, 0x09, 0xb3, 0x41, 0xf2, 0x39, 0x4d, 0x05, 0x24, 0x2e, 0x8d, 0xc8, 0xf9, 0x3c, 0x1e, 0xda,
		0x29, 0x5b, 0xe9, 0x07, 0x49, 0xc8, 0xa8, 0xfa, 0x9d, 0x0f, 0xa4, 0xeb, 0x1b, 0x90, 0xa5, 0x2f,
		0x5c, 0x86, 0xaf, 0x7a, 0xcb, 0x53, 0x3f, 0x68, 0x8a, 0xe4, 0x17, 0x42, 0xa5, 0x4b, 0xbe, 0x97,
		0x20, 0x6b, 0x6c, 0xeb, 0xae, 0xd6, 0x32, 0x3d, 0x9f, 0x2e, 0xbf, 0xd2, 0x74, 0x05, 0x27, 0xf6,
		0xa5, 0x44, 0x93, 0x24, 0x9c, 0x57, 0xd4, 0x0c, 0xa1, 0x2f, 0x9a, 0x9e, 0x8f, 0x7e, 0x1c, 0x60,
		0xab, 0x65, 0xeb, 0x3e, 0x93, 0x4f, 0x9d, 0x4b, 0x5e, 0x48, 0xd0, 0xd2, 0x42, 0xa4, 0xd1, 0xa0,
		0x2d, 0x0a, 0x90, 0xa5, 0x0d, 0x14, 0xe1, 0x0a, 0xa4, 0xef, 0x98, 0x0d, 0x7f, 0x9b, 0x96, 0x15,
		0x69, 0x79, 0x69, 0x4d, 0xc9, 0x91, 0xa5, 0x35, 0xa5, 0xd0, 0x4a, 0x84, 0x96, 0xf0, 0xb4, 0xa6,
		0x48, 0x47, 0x2a, 0x11, 0x4a, 0x8f, 0x56, 0x22, 0x94, 0x44, 0x0a, 0x28, 0x63, 0x5b, 0xb7, 0x2c,
		0xdc, 0x62, 0xdf, 0xcf, 0x49, 0xcb, 0x29, 0x58, 0xb4, 0x44, 0x4c, 0x24, 0x88, 0x68, 0x09, 0xc6,
		0x0d, 0xbb, 0xed, 0xb8, 0xd8, 0xf3, 0x70, 0x43, 0xa3, 0xa3, 0x9c, 0xa1, 0xa3, 0xfc, 0xc4, 0xc1,
		0x7e, 0xf1, 0x9c, 0xd8, 0xc0, 0x8b, 0x30, 0xc8, 0x40, 0x63, 0x61, 0xdb, 0x3c, 0x19, 0xfa, 0xbb,
		0x30, 0x46, 0xdf, 0xad, 0x35, 0xb7, 0x4c, 0xfe, 0x8a, 0xc4, 0x15, 0x48, 0xb3, 0x8f, 0x98, 0x28,
		0x71, 0x13, 0x50, 0x72, 0xc4, 0x04, 0x94, 0x42, 0x24, 0xd8, 0xd7, 0x5d, 0xd8, 0x70, 0x4b, 0x12,
		0x94, 0x1c, 0x91, 0xa0, 0x14, 0x9e, 0x66, 0xfe, 0x20, 0x01, 0xb9, 0xaa, 0xdd, 0xa1, 0x1f, 0x82,
		0xab, 0xda, 0xbb, 0x0f, 0xa3, 0x67, 0x32, 0x33, 0x76, 0xdb, 0xfc, 0x7d, 0x84, 0x84, 0x3c, 0x33,
		0x08, 0x35, 0x32, 0x33, 0x08, 0x81, 0xb1, 0xeb, 0xbb, 0x34, 0x9f, 0xc6, 0xd8, 0xf5, 0xdd, 0x18,
		0xbb, 0xbe, 0x4b, 0xd8, 0xf7, 0x08, 0x7a, 0x3a, 0xce, 0xbe, 0x17, 0x47, 0xdf, 0xe3, 0xe8, 0x7b,
		0x04, 0x7d, 0xa8, 0x9b, 0x3d, 0x86, 0x4e, 0x08, 0xdc, 0x6a, 0x7f, 0xa4, 0xc0, 0xf8, 0x1a, 0x6e,
		0xeb, 0x96, 0x6f, 0x1a, 0x6b, 0xb8, 0xd9, 0x26, 0x59, 0x20, 0x74, 0x42, 0x65, 0x70, 0x27, 0x0c,
		0x7c, 0x3d, 0x31, 0xa8, 0xaf, 0x97, 0x21, 0x63, 0x5a, 0xbe, 0xd6, 0xd6, 0xbd, 0x1d, 0x3e, 0x3b,
		0x8b, 0xa1, 0xdb, 0x8a, 0x96, 0xe8, 0xdc, 0x1a, 0x36, 0x2d, 0x7f, 0x49, 0xf7, 0x76, 0xb8, 0xf2,
		0xff, 0x39, 0x05, 0xe3, 0x75, 0xcb, 0xf3, 0x75, 0xcb, 0xc0, 0x42, 0xf9, 0xff, 0x3f, 0xec, 0x47,
		0x0e, 0x3b, 0x89, 0xa8, 0xc4, 0xae, 0x2c, 0xa2, 0x0e, 0xc7, 0x23, 0x6a, 0xd0, 0x14, 0xad, 0xd8,
		0x75, 0x6f, 0x87, 0x46, 0xd4, 0xd0, 0x33, 0x32, 0xf7, 0xe1, 0x19, 0xd9, 0xfb, 0xf1, 0x0c, 0x38,
		0x9e, 0x67, 0x84, 0x51, 0x9b, 0x4a, 0xe7, 0x7a, 0x47, 0xed, 0x6e, 0x79, 0x16, 0xb5, 0x25, 0xdf,
		0xfa, 0x86, 0x02, 0xb9, 0x05, 0x6c, 0x07, 0xef, 0x7a, 0x1d, 0xdf, 0xaf, 0x5e, 0x84, 0x4c, 0x4b,
		0xf7, 0x4d, 0xbf, 0xd3, 0x60, 0xa9, 0x2b, 0x21, 0x87, 0x65, 0xd1, 0x12, 0xb1, 0xb3, 0x20, 0xa2,
		0x1f, 0x83, 0x6c, 0xcb, 0xb6, 0x9a, 0x4c, 0x96, 0x79, 0x99, 0x34, 0x48, 0x41, 0x53, 0xa4, 0xe2,
		0x0d, 0xa8, 0xfc, 0x01, 0x5c, 0x18, 0x22, 0x05, 0xaf, 0x6d, 0x05, 0xf9, 0x5b, 0x19, 0x28, 0x7f,
		0x93, 0x41, 0xe6, 0x2f, 0xf2, 0xb3, 0x09, 0x21, 0x0d, 0x32, 0xa3, 0x47, 0x06, 0x99, 0x91, 0x78,
		0x9f, 0x37, 0x20, 0xb5, 0x8e, 0x77, 0xfd, 0x63, 0x56, 0x0c, 0xc1, 0x89, 0x69, 0xba, 0xd2, 0x69,
		0x98, 0xf6, 0x43, 0xd4, 0xd7, 0x86, 0xa4, 0xaa, 0xdf, 0x79, 0x88, 0x1d, 0xfe, 0x83, 0x11, 0x18,
		0xbe, 0xc9, 0x0a, 0xc2, 0xf7, 0x5b, 0x1a, 0xbd, 0xce, 0x37, 0xb4, 0x93, 0xfc, 0x13, 0x28, 0x47,
		0xd5, 0x95, 0xb3, 0xbc, 0x4f, 0x7a, 0x34, 0x34, 0xc8, 0xde, 0xb7, 0xe3, 0xda, 0x9b, 0xfa, 0xa6,
		0xd9, 0x32, 0xfd, 0x3d, 0x1e, 0xb6, 0xe4, 0x63, 0x8d, 0xb0, 0x31, 0x7a, 0xac, 0x11, 0xd2, 0x91,
		0x25, 0x6d, 0x21, 0xa4, 0xf9, 0x39, 0xe2, 0x20, 0x1a, 0xde, 0xe7, 0x5e, 0x02, 0x7a, 0x0d, 0xd2,
		0x26, 0x29, 0x38, 0x69, 0x18, 0xcc, 0x5d, 0x7d, 0xfc, 0xe8, 0xce, 0x68, 0x6d, 0x1a, 0x99, 0xc3,
		0xed, 0xe8, 0x69, 0xfe, 0xab, 0x27, 0x54, 0x86, 0x87, 0x74, 0xc8, 0xba, 0xfa, 0x1d, 0x8d, 0x81,
		0x0f, 0xf3, 0x8f, 0xf5, 0x1d, 0x09, 0x2e, 0x6a, 0xdf, 0x3e, 0xf8, 0x19, 0x57, 0xd4, 0xc8, 0x9f,
		0x80, 0x31, 0x23, 0x52, 0x35, 0xf1, 0xef, 0xb6, 0x3d, 0x73, 0x74, 0x3f, 0xd1, 0x4a, 0x4b, 0xde,
		0x7e, 0x88, 0xa2, 0x45, 0xbb, 0x8d, 0x75, 0x85, 0x1c, 0x18, 0xd9, 0xe4, 0x55, 0x93, 0xb6, 0x69,
		0xef, 0x06, 0x27, 0x8d, 0x47, 0x76, 0x2d, 0xd5, 0x59, 0xb2, 0x63, 0x08, 0xa0, 0x4d, 0x7b, 0x37,
		0xda, 0x69, 0x6e, 0x53, 0x2a, 0xcc, 0x3e, 0xa9, 0x40, 0xde, 0xe3, 0x25, 0x87, 0xe6, 0xb1, 0xb4,
		0x4d, 0x4f, 0x1d, 0x73, 0x57, 0x2f, 0x1d, 0xdd, 0x6d, 0xac, 0x50, 0x91, 0x77, 0xc5, 0xe3, 0x80,
		0xd1, 0xfe, 0xc7, 0xbd, 0x58, 0x89, 0xf3, 0xb6, 0x02, 0x79, 0x93, 0x57, 0x0e, 0x81, 0x0e, 0xb9,
		0x41, 0x74, 0x88, 0xd5, 0x1b, 0x72, 0xa1, 0x2c, 0x00, 0x7b, 0xab, 0x60, 0xc6, 0x0a, 0x95, 0x35,
		0x48, 0xf9, 0x78, 0xd7, 0xa7, 0x47, 0x9b, 0xb9, 0xab, 0xa5, 0xa3, 0x7b, 0x25, 0x51, 0x35, 0x32,
		0x71, 0xf1, 0x6e, 0x0c, 0x9f, 0x82, 0xa1, 0x8f, 0xc3, 0x90, 0x4b, 0x83, 0x3e, 0x3d, 0xdd, 0xcc,
		0x5d, 0x7d, 0xa2, 0x8f, 0xab, 0x52, 0x5e, 0x39, 0x80, 0x31, 0xe9, 0x28, 0x34, 0x87, 0x24, 0x73,
		0x4c, 0x27, 0x01, 0x9a, 0x1e, 0x74, 0xf6, 0x9d, 0x63, 0x34, 0x96, 0xcb, 0x73, 0x80, 0xca, 0xc6,
		0xe6, 0x18, 0xa5, 0x21, 0x1b, 0x72, 0x4d, 0x6c, 0x07, 0x6f, 0x67, 0x8f, 0x0f, 0xe2, 0x82, 0x52,
		0x6e, 0x96, 0x5d, 0x50, 0xc2, 0x89, 0xb9, 0xa0, 0xd4, 0x82, 0x56, 0x21, 0xe9, 0xea, 0x77, 0x0a,
		0x7f, 0x39, 0xcc, 0x3f, 0xaa, 0xd6, 0x6f, 0x3e, 0xcb, 0xf7, 0x6f, 0x5c, 0xfd, 0x4e, 0x14, 0x99,
		0x40, 0x7d, 0x00, 0x7b, 0x99, 0xd5, 0x2c, 0x0c, 0xf3, 0xbd, 0x82, 0x8b, 0xa4, 0xf8, 0x90, 0x42,
		0x36, 0xca, 0xc1, 0x70, 0xf8, 0xa1, 0x82, 0x2c, 0xa4, 0xeb, 0x4b, 0x95, 0x85, 0x1a, 0xfb, 0xfc,
		0x88, 0x5a, 0x79, 0x4d, 0x63, 0x3f, 0xe9, 0x67, 0x05, 0xe7, 0x16, 0x2b, 0x6b, 0x6b, 0xf5, 0x9b,
		0xf5, 0xb9, 0xca, 0x7a, 0x7d, 0x65, 0x99, 0x7d, 0x9a, 0xb1, 0xba, 0xb2, 0xb1, 0x3c, 0x5f, 0x5f,
		0x5e, 0xa8, 0xae, 0xbc, 0x9e, 0x4f, 0xa1, 0x49, 0x18, 0x5f, 0xab, 0x2d, 0x55, 0x96, 0xd7, 0xeb,
		0x73, 0x6b, 0xb5, 0x85, 0xa5, 0xda, 0xf2, 0x7a, 0x3e, 0x4d, 0x88, 0xf5, 0xe5, 0xb5, 0xf5, 0xca,
		0xf2, 0x5c, 0x4d, 0x10, 0x87, 0x88, 0xe8, 0x42, 0x6d, 0x65, 0x71, 0x85, 0x63, 0x0d, 0x23, 0x80,
		0x21, 0xb5, 0xb6, 0x40, 0xfe, 0xce, 0xa0, 0x0c, 0xa4, 0xd6, 0x6b, 0xaf, 0xaf, 0xe7, 0xb3, 0x44,
		0x9f, 0xca, 0xc6, 0x7c, 0x7d, 0x25, 0x0f, 0x68, 0x18, 0x92, 0x6a, 0xe5, 0xb5, 0x7c, 0xe3, 0x41,
		0xec, 0xa5, 0xfc, 0xd7, 0x6b, 0x30, 0xee, 0xb8, 0xb8, 0x61, 0x1a, 0xe1, 0xf7, 0xac, 0x8f, 0xde,
		0x4c, 0x89, 0x6d, 0xbd, 0x7c, 0xb0, 0x9b, 0x2b, 0x23, 0x00, 0x73, 0xab, 0x1b, 0xfc, 0x36, 0x5d,
		0xe9, 0x17, 0x92, 0x00, 0x0b, 0xc1, 0x4f, 0x74, 0x17, 0x8a, 0x0e, 0xbd, 0x9e, 0x40, 0x8f, 0xe3,
		0xb5, 0xa6, 0xd3, 0xd1, 0xda, 0xb8, 0x6d, 0xbb, 0x7b, 0xda, 0x96, 0xab, 0x1b, 0xfc, 0x9d, 0x7a,
		0xe5, 0x82, 0x52, 0xbd, 0x76, 0xb0, 0x5f, 0xbc, 0xc2, 0xb3, 0xea, 0xd1, 0x02, 0x72, 0xda, 0x7b,
		0xc4, 0xc1, 0xee, 0x2a, 0x63, 0x5d, 0x70, 0x3a, 0x4b, 0x94, 0xf1, 0x26, 0xe7, 0x43, 0xb7, 0x60,
		0x4c, 0x6f, 0x51, 0x4f, 0xb7, 0x5d, 0x79, 0xdf, 0x44, 0xca, 0x0f, 0xd1, 0xf6, 0xc8, 0xf6, 0x74,
		0xd0, 0xc4, 0x3f, 0x1c, 0x3c, 0x79, 0xdb, 0xf4, 0xcc, 0xcd, 0x16, 0xd6, 0x1a, 0xf8, 0xb6, 0x69,
		0x60, 0xb6, 0x17, 0xc2, 0xce, 0x24, 0x2f, 0x1c, 0xec, 0x17, 0x9f, 0xe0, 0x57, 0x97, 0xba, 0x99,
		0x22, 0x57, 0x27, 0x78, 0xfb, 0x3c, 0x6d, 0xa6, 0x5b, 0x23, 0x1f, 0x87, 0xa9, 0x2d, 0xdb, 0x35,
		0x30, 0x7d, 0x54, 0x7a, 0x07, 0xd9, 0x27, 0x1c, 0x34, 0xf3, 0x65, 0xaa, 0x4f, 0x1d, 0xec, 0x17,
		0x9f, 0x0c, 0x2a, 0xaa, 0x2e, 0x2e, 0x19, 0x1b, 0x51, 0x86, 0x05, 0xa7, 0x33, 0x17, 0x34, 0x97,
		0xae, 0xc2, 0xf0, 0xba, 0xab, 0x1b, 0xb8, 0x3e, 0x8f, 0xce, 0x4b, 0x45, 0xd6, 0xe9, 0x23, 0xca,
		0xa9, 0xd2, 0xbb, 0x43, 0x90, 0xaf, 0xed, 0x62, 0xa3, 0x43, 0x8c, 0x28, 0xc6, 0x51, 0x83, 0x8c,
		0x4f, 0x80, 0x34, 0x8e, 0x91, 0xbb, 0xfa, 0x64, 0x9f, 0x38, 0xcd, 0xba, 0x95, 0xeb, 0x16, 0x01,
		0x10, 0x39, 0xd4, 0xa1, 0xc4, 0x7a, 0x03, 0xfd, 0x14, 0xe4, 0x58, 0x3b, 0xfb, 0xd0, 0x4a, 0x82,
		0xd6, 0x72, 0x2f, 0x1e, 0xdd, 0x47, 0x5c, 0x4b, 0xd6, 0x29, 0xfd, 0xba, 0x89, 0x1c, 0x09, 0x25,
		0xdc, 0xc8, 0x39, 0x8f, 0x1f, 0x70, 0xa3, 0x9b, 0x30, 0xea, 0x9b, 0x6d, 0x6c, 0x77, 0x7c, 0xcd,
		0xb4, 0xb4, 0x36, 0xfb, 0x18, 0x45, 0x4a, 0xde, 0xe8, 0x8f, 0x34, 0x47, 0x8a, 0x3d, 0xde, 0x52,
		0xb7, 0x96, 0x3c, 0xf4, 0xb3, 0x0a, 0x8c, 0xf0, 0xa1, 0x37, 0xec, 0x8e, 0xe5, 0xf3, 0x9b, 0x63,
		0xaf, 0x1c, 0xf3, 0x39, 0x98, 0x7b, 0xcc, 0x11, 0x04, 0x56, 0xfd, 0x49, 0x07, 0x79, 0x32, 0x7c,
		0xec, 0xc2, 0x45, 0x20, 0x84, 0x76, 0x20, 0x67, 0x38, 0x1d, 0x4d, 0x7c, 0xdd, 0x31, 0xcd, 0xcf,
		0xa0, 0x8f, 0xae, 0xa2, 0x82, 0x59, 0x2b, 0x1b, 0x4f, 0x82, 0x89, 0x18, 0xcf, 0x70, 0x3a, 0xc2,
		0x37, 0x76, 0x20, 0xd7, 0x94, 0x3a, 0x1b, 0x1a, 0xa4, 0xb3, 0x85, 0x9e, 0x9d, 0x35, 0x0f, 0xe9,
		0xac, 0x19, 0x74, 0x36, 0xfd, 0x32, 0xe4, 0xe3, 0xd6, 0xe9, 0x97, 0x61, 0xd2, 0xf2, 0xa1, 0xf8,
		0x2f, 0x29, 0x00, 0xa1, 0x9b, 0xa0, 0x11, 0xc8, 0x2c, 0xaf, 0x68, 0xeb, 0x6a, 0x65, 0xae, 0x96,
		0x3f, 0x81, 0x4e, 0xc2, 0x44, 0x65, 0x75, 0x75, 0x91, 0xe7, 0x0c, 0x4e, 0x56, 0x48, 0xf8, 0x5f,
		0x5a, 0x99, 0xaf, 0x2d, 0x72, 0x42, 0x82, 0x24, 0x89, 0x9b, 0x6a, 0x65, 0xa9, 0xf6, 0xda, 0x8a,
		0xfa, 0x61, 0x4e, 0x4c, 0xa2, 0x09, 0x18, 0x5d, 0xac, 0x57, 0xd5, 0x8a, 0xfa, 0x06, 0x27, 0xa5,
		0x48, 0x1a, 0x7a, 0xb5, 0xa2, 0xce, 0xbf, 0x56, 0x51, 0x6b, 0x9c, 0x96, 0x46, 0x63, 0x00, 0x37,
		0x37, 0x16, 0x05, 0xd6, 0x50, 0xe9, 0x8f, 0x93, 0x30, 0xb1, 0xca, 0xa2, 0xb9, 0x34, 0xdf, 0x0c,
		0x00, 0x97, 0x6d, 0xe6, 0x6b, 0xc1, 0xac, 0x9d, 0xbf, 0xb7, 0x5f, 0xcc, 0xf2, 0x2d, 0x7e, 0xba,
		0x42, 0x9a, 0x0a, 0x59, 0x22, 0x2b, 0xa5, 0xe0, 0xb6, 0x5f, 0x77, 0x2b, 0xbd, 0xed, 0xc7, 0x10,
		0x1a, 0x68, 0x01, 0x46, 0x79, 0x62, 0xd0, 0x5a, 0x66, 0xdb, 0xf4, 0xf9, 0x8e, 0x95, 0xe4, 0xf5,
		0x91, 0xe6, 0xc8, 0xf1, 0x16, 0x6f, 0x59, 0x24, 0x0d, 0xe8, 0x65, 0x80, 0x4d, 0xdd, 0x37, 0xb6,
		0xe9, 0xcb, 0x0a, 0xec, 0x9b, 0x24, 0xf2, 0x39, 0x5b, 0xd8, 0x16, 0x51, 0x84, 0x92, 0xd7, 0xcc,
		0xbb, 0x18, 0x7d, 0x5a, 0x81, 0x09, 0x2c, 0x26, 0x81, 0x16, 0xfd, 0x26, 0xe9, 0xec, 0xf1, 0xe6,
		0x8e, 0x7c, 0x5a, 0xd8, 0x05, 0x19, 0x39, 0x2d, 0xc4, 0xf1, 0x18, 0x77, 0x05, 0xd2, 0xf4, 0xfc,
		0x83, 0x47, 0x75, 0xb9, 0x60, 0x6b, 0x46, 0xab, 0x58, 0x95, 0x31, 0xf2, 0xa5, 0xec, 0x5f, 0x24,
		0x61, 0x6a, 0x55, 0xe4, 0xe3, 0x15, 0x07, 0x5b, 0xe2, 0x7c, 0x34, 0x7a, 0xfc, 0xa8, 0xbc, 0xff,
		0xe3, 0xc7, 0xc4, 0xfd, 0x1d, 0x3f, 0xf6, 0x38, 0xa8, 0x4d, 0x7e, 0xb0, 0x07, 0xb5, 0xa9, 0xf7,
		0x79, 0x50, 0x7b, 0x1d, 0x86, 0x1d, 0xf2, 0x27, 0x4f, 0xa9, 0x19, 0xf9, 0x2a, 0x00, 0x6f, 0x88,
		0x64, 0x0d, 0x4e, 0x43, 0xcd, 0xf0, 0x0b, 0xb6, 0x2c, 0xec, 0x5c, 0x3e, 0xda, 0x5b, 0xba, 0x26,
		0x9a, 0xdc, 0x51, 0x0f, 0x27, 0x11, 0xe8, 0x7c, 0xa4, 0xbf, 0xa6, 0xc0, 0xc9, 0x60, 0xa4, 0xe7,
		0x5a, 0xb6, 0x87, 0xc5, 0x50, 0x63, 0xc8, 0x06, 0x25, 0x19, 0x4f, 0x90, 0xe7, 0x07, 0x52, 0xc5,
		0x76, 0xe5, 0x0d, 0xad, 0x00, 0x23, 0xe2, 0x11, 0x01, 0x95, 0xb8, 0x28, 0xcd, 0xf2, 0xec, 0xd3,
		0x75, 0xb2, 0x8b, 0x52, 0x72, 0xc4, 0x45, 0x29, 0x85, 0x2b, 0x5e, 0x80, 0x53, 0x71, 0xbd, 0xf9,
		0x09, 0xe4, 0x2a, 0x64, 0x83, 0x96, 0xf7, 0xb9, 0x11, 0x23, 0x8c, 0x94, 0x84, 0xdc, 0x86, 0xba,
		0xe8, 0x3d, 0x64, 0xd3, 0xfc, 0x04, 0xa4, 0x3a, 0x6e, 0xcb, 0x0b, 0xbe, 0x36, 0x76, 0x64, 0x0f,
		0x92, 0x7e, 0xe4, 0x6f, 0x79, 0x41, 0x49, 0x40, 0x22, 0x3b, 0x41, 0x84, 0x20, 0x3b, 0x5a, 0xf2,
		0x41, 0x3a, 0xda, 0xb4, 0x07, 0xc9, 0x0d, 0x75, 0xf1, 0x83, 0x3c, 0xa8, 0xcc, 0x0e, 0xba, 0xed,
		0xf8, 0xc7, 0x09, 0x18, 0xa5, 0xfb, 0x30, 0x0f, 0x7b, 0xe8, 0x5e, 0x87, 0x21, 0xba, 0x2d, 0x24,
		0x06, 0x6f, 0xa0, 0x3d, 0x2b, 0xf9, 0xde, 0x38, 0x15, 0x8e, 0xde, 0x1b, 0xa7, 0xa4, 0x87, 0x36,
		0x6c, 0xdc, 0x82, 0x5f, 0x4f, 0x40, 0x6e, 0x1d, 0xef, 0xfa, 0x0f, 0xd9, 0x7e, 0xeb, 0x90, 0xf6,
		0xf1, 0xae, 0x2f, 0xcc, 0x37, 0xc8, 0x0e, 0x8a, 0x14, 0x39, 0xa8, 0x68, 0x24, 0x72, 0x50, 0xca,
		0xc3, 0xb6, 0xdd, 0x9f, 0x25, 0x61, 0x6c, 0x5e, 0xf7, 0x75, 0x0f, 0x3f, 0x6c, 0xf3, 0xb5, 0x60,
		0xb8, 0xc1, 0x3a, 0xe6, 0x97, 0x35, 0xaf, 0x1d, 0xdd, 0x49, 0x54, 0x4b, 0xf1, 0x53, 0x7e, 0x5a,
		0x0e, 0x17, 0x79, 0x5a, 0x4e, 0x7b, 0x98, 0x91, 0x64, 0x98, 0xab, 0x46, 0xcf, 0xc5, 0x75, 0x1f,
		0x37, 0x6d, 0x77, 0xaf, 0xfb, 0x3a, 0xb1, 0x68, 0x89, 0x9e, 0x8b, 0x73, 0x62, 0xf0, 0x5a, 0x4f,
		0x62, 0xa0, 0xd7, 0x7a, 0xf8, 0x58, 0xfe, 0x6e, 0x0a, 0xc6, 0xf9, 0xae, 0x4d, 0x70, 0xc3, 0xe9,
		0x7d, 0x46, 0xb4, 0x68, 0x41, 0x9c, 0x78, 0x30, 0x05, 0xf1, 0x1b, 0x90, 0x61, 0x1f, 0xd4, 0x37,
		0x1b, 0xbc, 0x42, 0x7a, 0xf9, 0xde, 0x7e, 0x71, 0xb8, 0x4e, 0x68, 0xb4, 0x03, 0x24, 0x9a, 0x23,
		0xf0, 0x67, 0xa4, 0xd7, 0x57, 0xe2, 0xeb, 0x5b, 0x4a, 0xac, 0x37, 0xd0, 0xdf, 0x82, 0x8c, 0xd8,
		0x84, 0xe1, 0x8b, 0xc2, 0x27, 0x07, 0x3a, 0x06, 0x90, 0x47, 0x4a, 0x00, 0x44, 0x46, 0x4a, 0x10,
		0xd1, 0xed, 0xae, 0x83, 0x86, 0x1b, 0x03, 0xf5, 0x20, 0x46, 0xe8, 0x47, 0x78, 0x79, 0xf1, 0x2b,
		0x09, 0xc8, 0x73, 0x6d, 0xbc, 0x0f, 0xca, 0x61, 0xe4, 0x1d, 0x8b, 0xc4, 0x83, 0xd8, 0xb1, 0xd8,
		0x81, 0xac, 0xf8, 0xcf, 0xf4, 0xc4, 0x3b, 0x0d, 0x97, 0x8e, 0x65, 0x70, 0x39, 0x46, 0x05, 0x48,
		0x31, 0xcf, 0xe4, 0xd4, 0xf0, 0x8e, 0xc2, 0x88, 0x8a, 0xa5, 0x08, 0xc9, 0x6c, 0x94, 0xb8, 0x5f,
		0x1b, 0x3d, 0x9c, 0x00, 0xcb, 0x95, 0x7f, 0x5b, 0x61, 0xff, 0x53, 0x93, 0x1f, 0x8c, 0xb0, 0xf9,
		0x3e, 0xba, 0x2f, 0x7d, 0x6b, 0xbf, 0xa8, 0x1c, 0x53, 0x85, 0xab, 0xdf, 0xca, 0xc2, 0x30, 0x87,
		0x40, 0x3f, 0x0d, 0x29, 0xb2, 0x56, 0x43, 0x57, 0x07, 0xec, 0x51, 0x5a, 0xd8, 0x4d, 0x0f, 0xaa,
		0x65, 0xa9, 0x40, 0x6f, 0xda, 0xa1, 0xd2, 0xe8, 0x65, 0xae, 0xca, 0x65, 0xdb, 0xc1, 0x56, 0x59,
		0xb9, 0x88, 0x7e, 0x51, 0x81, 0x34, 0xad, 0xc4, 0xd1, 0xb3, 0x03, 0x82, 0xc9, 0xeb, 0x8d, 0xe9,
		0x6b, 0xc7, 0x13, 0xe2, 0xc5, 0xfe, 0x19, 0xaa, 0xce, 0x64, 0x69, 0x2c, 0x50, 0xc7, 0x20, 0xed,
		0x44, 0x9f, 0x4f, 0x40, 0x8a, 0x14, 0xc5, 0xe8, 0xa9, 0x81, 0x0b, 0xe7, 0xe9, 0xd9, 0x81, 0xbc,
		0x3d, 0xbc, 0xec, 0xd8, 0x6d, 0x0c, 0x52, 0x5a, 0x93, 0xce, 0x3f, 0xa3, 0x00, 0x10, 0x64, 0xf6,
		0x9f, 0x7f, 0x1c, 0x47, 0x87, 0xe3, 0xcd, 0xb8, 0x52, 0x91, 0xaa, 0x70, 0xa6, 0x34, 0x15, 0xa8,
		0xc0, 0xfe, 0x37, 0x12, 0xa1, 0xc9, 0x15, 0x05, 0x7d, 0x52, 0x81, 0x21, 0x56, 0x05, 0xa3, 0xa7,
		0x07, 0xa8, 0x43, 0xef, 0xdb, 0x1a, 0xd3, 0x54, 0x95, 0xa9, 0xd2, 0x78, 0xa0, 0x0a, 0xab, 0x59,
		0x89, 0x3d, 0x3e, 0xab, 0xc0, 0x08, 0x43, 0xe7, 0x16, 0x39, 0x96, 0x26, 0xc7, 0xb4, 0x09, 0xbf,
		0x83, 0x5a, 0x3a, 0x15, 0xb7, 0x49, 0xa0, 0xcf, 0x15, 0x05, 0xfd, 0x8c, 0x12, 0x56, 0x13, 0xcf,
		0x1c, 0xa7, 0x3c, 0x3a, 0xb6, 0x5d, 0x1e, 0xa1, 0xea, 0x9c, 0x2c, 0xe5, 0x03, 0x75, 0x78, 0xe5,
		0x44, 0x0c, 0xf3, 0x39, 0x05, 0x46, 0x39, 0x3e, 0xb7, 0xcc, 0xf1, 0x94, 0x39, 0xa6, 0x69, 0xf8,
		0x4d, 0xe1, 0xd2, 0xe9, 0xb8, 0x69, 0x42, 0x95, 0xae, 0x28, 0xe8, 0x13, 0x90, 0xa6, 0x71, 0x0d,
		0x5d, 0xec, 0x77, 0xc6, 0x28, 0x69, 0xf2, 0xf4, 0x40, 0xbc, 0x87, 0xce, 0x5b, 0x17, 0xb3, 0xee,
		0x1f, 0xc0, 0xf9, 0xd2, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x44, 0xea, 0xa1, 0x61, 0x09, 0x78,
		0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Image) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Image")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Image but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Image but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *Image) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *RawImage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RawImage)
	if !ok {
		that2, ok := that.(RawImage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RawImage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RawImage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RawImage but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.DataType != that1.DataType {
		return fmt.Errorf("DataType this(%v) Not Equal that(%v)", this.DataType, that1.DataType)
	}
	if len(this.CharList) != len(that1.CharList) {
		return fmt.Errorf("CharList this(%v) Not Equal that(%v)", len(this.CharList), len(that1.CharList))
	}
	for i := range this.CharList {
		if this.CharList[i] != that1.CharList[i] {
			return fmt.Errorf("CharList this[%v](%v) Not Equal that[%v](%v)", i, this.CharList[i], i, that1.CharList[i])
		}
	}
	if len(this.FloatList) != len(that1.FloatList) {
		return fmt.Errorf("FloatList this(%v) Not Equal that(%v)", len(this.FloatList), len(that1.FloatList))
	}
	for i := range this.FloatList {
		if this.FloatList[i] != that1.FloatList[i] {
			return fmt.Errorf("FloatList this[%v](%v) Not Equal that[%v](%v)", i, this.FloatList[i], i, that1.FloatList[i])
		}
	}
	if this.Width != that1.Width {
		return fmt.Errorf("Width this(%v) Not Equal that(%v)", this.Width, that1.Width)
	}
	if this.Height != that1.Height {
		return fmt.Errorf("Height this(%v) Not Equal that(%v)", this.Height, that1.Height)
	}
	if this.Channels != that1.Channels {
		return fmt.Errorf("Channels this(%v) Not Equal that(%v)", this.Channels, that1.Channels)
	}
	if !bytes.Equal(this.CompressedData, that1.CompressedData) {
		return fmt.Errorf("CompressedData this(%v) Not Equal that(%v)", this.CompressedData, that1.CompressedData)
	}
	return nil
}
func (this *RawImage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RawImage)
	if !ok {
		that2, ok := that.(RawImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if len(this.CharList) != len(that1.CharList) {
		return false
	}
	for i := range this.CharList {
		if this.CharList[i] != that1.CharList[i] {
			return false
		}
	}
	if len(this.FloatList) != len(that1.FloatList) {
		return false
	}
	for i := range this.FloatList {
		if this.FloatList[i] != that1.FloatList[i] {
			return false
		}
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Channels != that1.Channels {
		return false
	}
	if !bytes.Equal(this.CompressedData, that1.CompressedData) {
		return false
	}
	return true
}
func (this *Classification) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Classification)
	if !ok {
		that2, ok := that.(Classification)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Classification")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Classification but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Classification but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Label != that1.Label {
		return fmt.Errorf("Label this(%v) Not Equal that(%v)", this.Label, that1.Label)
	}
	return nil
}
func (this *Classification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Classification)
	if !ok {
		that2, ok := that.(Classification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *BoundingBox) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BoundingBox)
	if !ok {
		that2, ok := that.(BoundingBox)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BoundingBox")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BoundingBox but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BoundingBox but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Label != that1.Label {
		return fmt.Errorf("Label this(%v) Not Equal that(%v)", this.Label, that1.Label)
	}
	if this.Xmin != that1.Xmin {
		return fmt.Errorf("Xmin this(%v) Not Equal that(%v)", this.Xmin, that1.Xmin)
	}
	if this.Xmax != that1.Xmax {
		return fmt.Errorf("Xmax this(%v) Not Equal that(%v)", this.Xmax, that1.Xmax)
	}
	if this.Ymin != that1.Ymin {
		return fmt.Errorf("Ymin this(%v) Not Equal that(%v)", this.Ymin, that1.Ymin)
	}
	if this.Ymax != that1.Ymax {
		return fmt.Errorf("Ymax this(%v) Not Equal that(%v)", this.Ymax, that1.Ymax)
	}
	return nil
}
func (this *BoundingBox) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoundingBox)
	if !ok {
		that2, ok := that.(BoundingBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Xmin != that1.Xmin {
		return false
	}
	if this.Xmax != that1.Xmax {
		return false
	}
	if this.Ymin != that1.Ymin {
		return false
	}
	if this.Ymax != that1.Ymax {
		return false
	}
	return true
}
func (this *SemanticSegment) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SemanticSegment)
	if !ok {
		that2, ok := that.(SemanticSegment)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SemanticSegment")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SemanticSegment but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SemanticSegment but is not nil && this == nil")
	}
	if this.Height != that1.Height {
		return fmt.Errorf("Height this(%v) Not Equal that(%v)", this.Height, that1.Height)
	}
	if this.Width != that1.Width {
		return fmt.Errorf("Width this(%v) Not Equal that(%v)", this.Width, that1.Width)
	}
	if len(this.IntMask) != len(that1.IntMask) {
		return fmt.Errorf("IntMask this(%v) Not Equal that(%v)", len(this.IntMask), len(that1.IntMask))
	}
	for i := range this.IntMask {
		if this.IntMask[i] != that1.IntMask[i] {
			return fmt.Errorf("IntMask this[%v](%v) Not Equal that[%v](%v)", i, this.IntMask[i], i, that1.IntMask[i])
		}
	}
	return nil
}
func (this *SemanticSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SemanticSegment)
	if !ok {
		that2, ok := that.(SemanticSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if len(this.IntMask) != len(that1.IntMask) {
		return false
	}
	for i := range this.IntMask {
		if this.IntMask[i] != that1.IntMask[i] {
			return false
		}
	}
	return true
}
func (this *InstanceSegment) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InstanceSegment)
	if !ok {
		that2, ok := that.(InstanceSegment)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InstanceSegment")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InstanceSegment but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InstanceSegment but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Label != that1.Label {
		return fmt.Errorf("Label this(%v) Not Equal that(%v)", this.Label, that1.Label)
	}
	if this.Xmin != that1.Xmin {
		return fmt.Errorf("Xmin this(%v) Not Equal that(%v)", this.Xmin, that1.Xmin)
	}
	if this.Xmax != that1.Xmax {
		return fmt.Errorf("Xmax this(%v) Not Equal that(%v)", this.Xmax, that1.Xmax)
	}
	if this.Ymin != that1.Ymin {
		return fmt.Errorf("Ymin this(%v) Not Equal that(%v)", this.Ymin, that1.Ymin)
	}
	if this.Ymax != that1.Ymax {
		return fmt.Errorf("Ymax this(%v) Not Equal that(%v)", this.Ymax, that1.Ymax)
	}
	if this.MaskType != that1.MaskType {
		return fmt.Errorf("MaskType this(%v) Not Equal that(%v)", this.MaskType, that1.MaskType)
	}
	if this.Height != that1.Height {
		return fmt.Errorf("Height this(%v) Not Equal that(%v)", this.Height, that1.Height)
	}
	if this.Width != that1.Width {
		return fmt.Errorf("Width this(%v) Not Equal that(%v)", this.Width, that1.Width)
	}
	if len(this.IntMask) != len(that1.IntMask) {
		return fmt.Errorf("IntMask this(%v) Not Equal that(%v)", len(this.IntMask), len(that1.IntMask))
	}
	for i := range this.IntMask {
		if this.IntMask[i] != that1.IntMask[i] {
			return fmt.Errorf("IntMask this[%v](%v) Not Equal that[%v](%v)", i, this.IntMask[i], i, that1.IntMask[i])
		}
	}
	if len(this.FloatMask) != len(that1.FloatMask) {
		return fmt.Errorf("FloatMask this(%v) Not Equal that(%v)", len(this.FloatMask), len(that1.FloatMask))
	}
	for i := range this.FloatMask {
		if this.FloatMask[i] != that1.FloatMask[i] {
			return fmt.Errorf("FloatMask this[%v](%v) Not Equal that[%v](%v)", i, this.FloatMask[i], i, that1.FloatMask[i])
		}
	}
	return nil
}
func (this *InstanceSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstanceSegment)
	if !ok {
		that2, ok := that.(InstanceSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Xmin != that1.Xmin {
		return false
	}
	if this.Xmax != that1.Xmax {
		return false
	}
	if this.Ymin != that1.Ymin {
		return false
	}
	if this.Ymax != that1.Ymax {
		return false
	}
	if this.MaskType != that1.MaskType {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if len(this.IntMask) != len(that1.IntMask) {
		return false
	}
	for i := range this.IntMask {
		if this.IntMask[i] != that1.IntMask[i] {
			return false
		}
	}
	if len(this.FloatMask) != len(that1.FloatMask) {
		return false
	}
	for i := range this.FloatMask {
		if this.FloatMask[i] != that1.FloatMask[i] {
			return false
		}
	}
	return true
}
func (this *GeoLocation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GeoLocation)
	if !ok {
		that2, ok := that.(GeoLocation)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GeoLocation")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GeoLocation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GeoLocation but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Latitude != that1.Latitude {
		return fmt.Errorf("Latitude this(%v) Not Equal that(%v)", this.Latitude, that1.Latitude)
	}
	if this.Longitude != that1.Longitude {
		return fmt.Errorf("Longitude this(%v) Not Equal that(%v)", this.Longitude, that1.Longitude)
	}
	return nil
}
func (this *GeoLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoLocation)
	if !ok {
		that2, ok := that.(GeoLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	return true
}
func (this *Region) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Region")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Region but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Region but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Format != that1.Format {
		return fmt.Errorf("Format this(%v) Not Equal that(%v)", this.Format, that1.Format)
	}
	return nil
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	return true
}
func (this *Text) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Text)
	if !ok {
		that2, ok := that.(Text)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Text")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Text but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Text but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Text)
	if !ok {
		that2, ok := that.(Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Audio) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Audio)
	if !ok {
		that2, ok := that.(Audio)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Audio")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Audio but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Audio but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Format != that1.Format {
		return fmt.Errorf("Format this(%v) Not Equal that(%v)", this.Format, that1.Format)
	}
	return nil
}
func (this *Audio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Audio)
	if !ok {
		that2, ok := that.(Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	return true
}
func (this *Raw) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Raw)
	if !ok {
		that2, ok := that.(Raw)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Raw")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Raw but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Raw but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Format != that1.Format {
		return fmt.Errorf("Format this(%v) Not Equal that(%v)", this.Format, that1.Format)
	}
	return nil
}
func (this *Raw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Raw)
	if !ok {
		that2, ok := that.(Raw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	return true
}
func (this *Feature) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Probability != that1.Probability {
		return fmt.Errorf("Probability this(%v) Not Equal that(%v)", this.Probability, that1.Probability)
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if that1.Feature == nil {
		if this.Feature != nil {
			return fmt.Errorf("this.Feature != nil && that1.Feature == nil")
		}
	} else if this.Feature == nil {
		return fmt.Errorf("this.Feature == nil && that1.Feature != nil")
	} else if err := this.Feature.VerboseEqual(that1.Feature); err != nil {
		return err
	}
	return nil
}
func (this *Feature_Image) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Image)
	if !ok {
		that2, ok := that.(Feature_Image)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Image")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Image but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Image but is not nil && this == nil")
	}
	if !this.Image.Equal(that1.Image) {
		return fmt.Errorf("Image this(%v) Not Equal that(%v)", this.Image, that1.Image)
	}
	return nil
}
func (this *Feature_RawImage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_RawImage)
	if !ok {
		that2, ok := that.(Feature_RawImage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_RawImage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_RawImage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_RawImage but is not nil && this == nil")
	}
	if !this.RawImage.Equal(that1.RawImage) {
		return fmt.Errorf("RawImage this(%v) Not Equal that(%v)", this.RawImage, that1.RawImage)
	}
	return nil
}
func (this *Feature_Classification) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Classification)
	if !ok {
		that2, ok := that.(Feature_Classification)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Classification")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Classification but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Classification but is not nil && this == nil")
	}
	if !this.Classification.Equal(that1.Classification) {
		return fmt.Errorf("Classification this(%v) Not Equal that(%v)", this.Classification, that1.Classification)
	}
	return nil
}
func (this *Feature_BoundingBox) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_BoundingBox)
	if !ok {
		that2, ok := that.(Feature_BoundingBox)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_BoundingBox")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_BoundingBox but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_BoundingBox but is not nil && this == nil")
	}
	if !this.BoundingBox.Equal(that1.BoundingBox) {
		return fmt.Errorf("BoundingBox this(%v) Not Equal that(%v)", this.BoundingBox, that1.BoundingBox)
	}
	return nil
}
func (this *Feature_SemanticSegment) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_SemanticSegment)
	if !ok {
		that2, ok := that.(Feature_SemanticSegment)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_SemanticSegment")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_SemanticSegment but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_SemanticSegment but is not nil && this == nil")
	}
	if !this.SemanticSegment.Equal(that1.SemanticSegment) {
		return fmt.Errorf("SemanticSegment this(%v) Not Equal that(%v)", this.SemanticSegment, that1.SemanticSegment)
	}
	return nil
}
func (this *Feature_InstanceSegment) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_InstanceSegment)
	if !ok {
		that2, ok := that.(Feature_InstanceSegment)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_InstanceSegment")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_InstanceSegment but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_InstanceSegment but is not nil && this == nil")
	}
	if !this.InstanceSegment.Equal(that1.InstanceSegment) {
		return fmt.Errorf("InstanceSegment this(%v) Not Equal that(%v)", this.InstanceSegment, that1.InstanceSegment)
	}
	return nil
}
func (this *Feature_Text) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Text)
	if !ok {
		that2, ok := that.(Feature_Text)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Text")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Text but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Text but is not nil && this == nil")
	}
	if !this.Text.Equal(that1.Text) {
		return fmt.Errorf("Text this(%v) Not Equal that(%v)", this.Text, that1.Text)
	}
	return nil
}
func (this *Feature_Region) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Region)
	if !ok {
		that2, ok := that.(Feature_Region)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Region")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Region but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Region but is not nil && this == nil")
	}
	if !this.Region.Equal(that1.Region) {
		return fmt.Errorf("Region this(%v) Not Equal that(%v)", this.Region, that1.Region)
	}
	return nil
}
func (this *Feature_Audio) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Audio)
	if !ok {
		that2, ok := that.(Feature_Audio)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Audio")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Audio but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Audio but is not nil && this == nil")
	}
	if !this.Audio.Equal(that1.Audio) {
		return fmt.Errorf("Audio this(%v) Not Equal that(%v)", this.Audio, that1.Audio)
	}
	return nil
}
func (this *Feature_Geolocation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Geolocation)
	if !ok {
		that2, ok := that.(Feature_Geolocation)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Geolocation")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Geolocation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Geolocation but is not nil && this == nil")
	}
	if !this.Geolocation.Equal(that1.Geolocation) {
		return fmt.Errorf("Geolocation this(%v) Not Equal that(%v)", this.Geolocation, that1.Geolocation)
	}
	return nil
}
func (this *Feature_Raw) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature_Raw)
	if !ok {
		that2, ok := that.(Feature_Raw)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature_Raw")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature_Raw but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature_Raw but is not nil && this == nil")
	}
	if !this.Raw.Equal(that1.Raw) {
		return fmt.Errorf("Raw this(%v) Not Equal that(%v)", this.Raw, that1.Raw)
	}
	return nil
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return false
		}
	}
	if that1.Feature == nil {
		if this.Feature != nil {
			return false
		}
	} else if this.Feature == nil {
		return false
	} else if !this.Feature.Equal(that1.Feature) {
		return false
	}
	return true
}
func (this *Feature_Image) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Image)
	if !ok {
		that2, ok := that.(Feature_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *Feature_RawImage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_RawImage)
	if !ok {
		that2, ok := that.(Feature_RawImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RawImage.Equal(that1.RawImage) {
		return false
	}
	return true
}
func (this *Feature_Classification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Classification)
	if !ok {
		that2, ok := that.(Feature_Classification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Classification.Equal(that1.Classification) {
		return false
	}
	return true
}
func (this *Feature_BoundingBox) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_BoundingBox)
	if !ok {
		that2, ok := that.(Feature_BoundingBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BoundingBox.Equal(that1.BoundingBox) {
		return false
	}
	return true
}
func (this *Feature_SemanticSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_SemanticSegment)
	if !ok {
		that2, ok := that.(Feature_SemanticSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SemanticSegment.Equal(that1.SemanticSegment) {
		return false
	}
	return true
}
func (this *Feature_InstanceSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_InstanceSegment)
	if !ok {
		that2, ok := that.(Feature_InstanceSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstanceSegment.Equal(that1.InstanceSegment) {
		return false
	}
	return true
}
func (this *Feature_Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Text)
	if !ok {
		that2, ok := that.(Feature_Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	return true
}
func (this *Feature_Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Region)
	if !ok {
		that2, ok := that.(Feature_Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	return true
}
func (this *Feature_Audio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Audio)
	if !ok {
		that2, ok := that.(Feature_Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *Feature_Geolocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Geolocation)
	if !ok {
		that2, ok := that.(Feature_Geolocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Geolocation.Equal(that1.Geolocation) {
		return false
	}
	return true
}
func (this *Feature_Raw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature_Raw)
	if !ok {
		that2, ok := that.(Feature_Raw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Raw.Equal(that1.Raw) {
		return false
	}
	return true
}
func (this *Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Image{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RawImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dlframework.RawImage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	s = append(s, "CharList: "+fmt.Sprintf("%#v", this.CharList)+",\n")
	s = append(s, "FloatList: "+fmt.Sprintf("%#v", this.FloatList)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Channels: "+fmt.Sprintf("%#v", this.Channels)+",\n")
	s = append(s, "CompressedData: "+fmt.Sprintf("%#v", this.CompressedData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Classification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Classification{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoundingBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dlframework.BoundingBox{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Xmin: "+fmt.Sprintf("%#v", this.Xmin)+",\n")
	s = append(s, "Xmax: "+fmt.Sprintf("%#v", this.Xmax)+",\n")
	s = append(s, "Ymin: "+fmt.Sprintf("%#v", this.Ymin)+",\n")
	s = append(s, "Ymax: "+fmt.Sprintf("%#v", this.Ymax)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SemanticSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.SemanticSegment{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "IntMask: "+fmt.Sprintf("%#v", this.IntMask)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstanceSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&dlframework.InstanceSegment{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Xmin: "+fmt.Sprintf("%#v", this.Xmin)+",\n")
	s = append(s, "Xmax: "+fmt.Sprintf("%#v", this.Xmax)+",\n")
	s = append(s, "Ymin: "+fmt.Sprintf("%#v", this.Ymin)+",\n")
	s = append(s, "Ymax: "+fmt.Sprintf("%#v", this.Ymax)+",\n")
	s = append(s, "MaskType: "+fmt.Sprintf("%#v", this.MaskType)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "IntMask: "+fmt.Sprintf("%#v", this.IntMask)+",\n")
	s = append(s, "FloatMask: "+fmt.Sprintf("%#v", this.FloatMask)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoLocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.GeoLocation{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Region{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.Text{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Audio{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Raw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Raw{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&dlframework.Feature{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	if this.Feature != nil {
		s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature_Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Image{` +
		`Image:` + fmt.Sprintf("%#v", this.Image) + `}`}, ", ")
	return s
}
func (this *Feature_RawImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_RawImage{` +
		`RawImage:` + fmt.Sprintf("%#v", this.RawImage) + `}`}, ", ")
	return s
}
func (this *Feature_Classification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Classification{` +
		`Classification:` + fmt.Sprintf("%#v", this.Classification) + `}`}, ", ")
	return s
}
func (this *Feature_BoundingBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_BoundingBox{` +
		`BoundingBox:` + fmt.Sprintf("%#v", this.BoundingBox) + `}`}, ", ")
	return s
}
func (this *Feature_SemanticSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_SemanticSegment{` +
		`SemanticSegment:` + fmt.Sprintf("%#v", this.SemanticSegment) + `}`}, ", ")
	return s
}
func (this *Feature_InstanceSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_InstanceSegment{` +
		`InstanceSegment:` + fmt.Sprintf("%#v", this.InstanceSegment) + `}`}, ", ")
	return s
}
func (this *Feature_Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Text{` +
		`Text:` + fmt.Sprintf("%#v", this.Text) + `}`}, ", ")
	return s
}
func (this *Feature_Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Region{` +
		`Region:` + fmt.Sprintf("%#v", this.Region) + `}`}, ", ")
	return s
}
func (this *Feature_Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Audio{` +
		`Audio:` + fmt.Sprintf("%#v", this.Audio) + `}`}, ", ")
	return s
}
func (this *Feature_Geolocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Geolocation{` +
		`Geolocation:` + fmt.Sprintf("%#v", this.Geolocation) + `}`}, ", ")
	return s
}
func (this *Feature_Raw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.Feature_Raw{` +
		`Raw:` + fmt.Sprintf("%#v", this.Raw) + `}`}, ", ")
	return s
}
func valueToGoStringFeatures(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *RawImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawImage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.DataType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.DataType)))
		i += copy(dAtA[i:], m.DataType)
	}
	if len(m.CharList) > 0 {
		dAtA2 := make([]byte, len(m.CharList)*10)
		var j1 int
		for _, num1 := range m.CharList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.FloatList) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.FloatList)*4))
		for _, num := range m.FloatList {
			f3 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f3))
			i += 4
		}
	}
	if m.Width != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Height))
	}
	if m.Channels != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Channels))
	}
	if len(m.CompressedData) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.CompressedData)))
		i += copy(dAtA[i:], m.CompressedData)
	}
	return i, nil
}

func (m *Classification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Classification) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Index))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	return i, nil
}

func (m *BoundingBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundingBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Index))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Xmin != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Xmin))))
		i += 4
	}
	if m.Xmax != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Xmax))))
		i += 4
	}
	if m.Ymin != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ymin))))
		i += 4
	}
	if m.Ymax != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ymax))))
		i += 4
	}
	return i, nil
}

func (m *SemanticSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SemanticSegment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Height))
	}
	if m.Width != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Width))
	}
	if len(m.IntMask) > 0 {
		dAtA5 := make([]byte, len(m.IntMask)*10)
		var j4 int
		for _, num1 := range m.IntMask {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *InstanceSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceSegment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Index))
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Xmin != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Xmin))))
		i += 4
	}
	if m.Xmax != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Xmax))))
		i += 4
	}
	if m.Ymin != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ymin))))
		i += 4
	}
	if m.Ymax != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ymax))))
		i += 4
	}
	if len(m.MaskType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.MaskType)))
		i += copy(dAtA[i:], m.MaskType)
	}
	if m.Height != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Height))
	}
	if m.Width != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Width))
	}
	if len(m.IntMask) > 0 {
		dAtA7 := make([]byte, len(m.IntMask)*10)
		var j6 int
		for _, num1 := range m.IntMask {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.FloatMask) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.FloatMask)*4))
		for _, num := range m.FloatMask {
			f8 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f8))
			i += 4
		}
	}
	return i, nil
}

func (m *GeoLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Index))
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	return i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	return i, nil
}

func (m *Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Text) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Audio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	return i, nil
}

func (m *Raw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Raw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Type))
	}
	if m.Probability != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Probability))))
		i += 4
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			dAtA[i] = 0x2a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovFeatures(uint64(len(k))) + 1 + len(v) + sovFeatures(uint64(len(v)))
			i = encodeVarintFeatures(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFeatures(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintFeatures(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Feature != nil {
		nn9, err9 := m.Feature.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += nn9
	}
	return i, nil
}

func (m *Feature_Image) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Image != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Image.Size()))
		n10, err10 := m.Image.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	return i, nil
}
func (m *Feature_RawImage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RawImage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.RawImage.Size()))
		n11, err11 := m.RawImage.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	return i, nil
}
func (m *Feature_Classification) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Classification != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Classification.Size()))
		n12, err12 := m.Classification.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	return i, nil
}
func (m *Feature_BoundingBox) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BoundingBox != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.BoundingBox.Size()))
		n13, err13 := m.BoundingBox.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	return i, nil
}
func (m *Feature_SemanticSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SemanticSegment != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.SemanticSegment.Size()))
		n14, err14 := m.SemanticSegment.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	return i, nil
}
func (m *Feature_InstanceSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InstanceSegment != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.InstanceSegment.Size()))
		n15, err15 := m.InstanceSegment.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	return i, nil
}
func (m *Feature_Text) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Text != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Text.Size()))
		n16, err16 := m.Text.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	return i, nil
}
func (m *Feature_Region) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Region != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Region.Size()))
		n17, err17 := m.Region.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	return i, nil
}
func (m *Feature_Audio) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Audio != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Audio.Size()))
		n18, err18 := m.Audio.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	return i, nil
}
func (m *Feature_Geolocation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Geolocation != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Geolocation.Size()))
		n19, err19 := m.Geolocation.MarshalTo(dAtA[i:])
		if err19 != nil {
			return 0, err19
		}
		i += n19
	}
	return i, nil
}
func (m *Feature_Raw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Raw != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintFeatures(dAtA, i, uint64(m.Raw.Size()))
		n20, err20 := m.Raw.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	return i, nil
}
func encodeVarintFeatures(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedImage(r randyFeatures, easy bool) *Image {
	this := &Image{}
	this.ID = string(randStringFeatures(r))
	v1 := r.Intn(100)
	this.Data = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRawImage(r randyFeatures, easy bool) *RawImage {
	this := &RawImage{}
	this.ID = string(randStringFeatures(r))
	this.DataType = string(randStringFeatures(r))
	v2 := r.Intn(10)
	this.CharList = make([]int32, v2)
	for i := 0; i < v2; i++ {
		this.CharList[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.CharList[i] *= -1
		}
	}
	v3 := r.Intn(10)
	this.FloatList = make([]float32, v3)
	for i := 0; i < v3; i++ {
		this.FloatList[i] = float32(r.Float32())
		if r.Intn(2) == 0 {
			this.FloatList[i] *= -1
		}
	}
	this.Width = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Channels = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Channels *= -1
	}
	v4 := r.Intn(100)
	this.CompressedData = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.CompressedData[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClassification(r randyFeatures, easy bool) *Classification {
	this := &Classification{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Label = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBoundingBox(r randyFeatures, easy bool) *BoundingBox {
	this := &BoundingBox{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Label = string(randStringFeatures(r))
	this.Xmin = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Xmin *= -1
	}
	this.Xmax = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Xmax *= -1
	}
	this.Ymin = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Ymin *= -1
	}
	this.Ymax = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Ymax *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSemanticSegment(r randyFeatures, easy bool) *SemanticSegment {
	this := &SemanticSegment{}
	this.Height = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Width = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	v5 := r.Intn(10)
	this.IntMask = make([]int32, v5)
	for i := 0; i < v5; i++ {
		this.IntMask[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.IntMask[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInstanceSegment(r randyFeatures, easy bool) *InstanceSegment {
	this := &InstanceSegment{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Label = string(randStringFeatures(r))
	this.Xmin = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Xmin *= -1
	}
	this.Xmax = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Xmax *= -1
	}
	this.Ymin = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Ymin *= -1
	}
	this.Ymax = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Ymax *= -1
	}
	this.MaskType = string(randStringFeatures(r))
	this.Height = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Width = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	v6 := r.Intn(10)
	this.IntMask = make([]int32, v6)
	for i := 0; i < v6; i++ {
		this.IntMask[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.IntMask[i] *= -1
		}
	}
	v7 := r.Intn(10)
	this.FloatMask = make([]float32, v7)
	for i := 0; i < v7; i++ {
		this.FloatMask[i] = float32(r.Float32())
		if r.Intn(2) == 0 {
			this.FloatMask[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGeoLocation(r randyFeatures, easy bool) *GeoLocation {
	this := &GeoLocation{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Latitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Latitude *= -1
	}
	this.Longitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Longitude *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRegion(r randyFeatures, easy bool) *Region {
	this := &Region{}
	v8 := r.Intn(100)
	this.Data = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Format = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedText(r randyFeatures, easy bool) *Text {
	this := &Text{}
	v9 := r.Intn(100)
	this.Data = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAudio(r randyFeatures, easy bool) *Audio {
	this := &Audio{}
	v10 := r.Intn(100)
	this.Data = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Format = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaw(r randyFeatures, easy bool) *Raw {
	this := &Raw{}
	v11 := r.Intn(100)
	this.Data = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Format = string(randStringFeatures(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeature(r randyFeatures, easy bool) *Feature {
	this := &Feature{}
	this.ID = string(randStringFeatures(r))
	this.Type = FeatureType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100}[r.Intn(12)])
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.Metadata = make(map[string]string)
		for i := 0; i < v12; i++ {
			this.Metadata[randStringFeatures(r)] = randStringFeatures(r)
		}
	}
	oneofNumber_Feature := []int32{6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1000}[r.Intn(11)]
	switch oneofNumber_Feature {
	case 6:
		this.Feature = NewPopulatedFeature_Image(r, easy)
	case 7:
		this.Feature = NewPopulatedFeature_RawImage(r, easy)
	case 8:
		this.Feature = NewPopulatedFeature_Classification(r, easy)
	case 9:
		this.Feature = NewPopulatedFeature_BoundingBox(r, easy)
	case 10:
		this.Feature = NewPopulatedFeature_SemanticSegment(r, easy)
	case 11:
		this.Feature = NewPopulatedFeature_InstanceSegment(r, easy)
	case 12:
		this.Feature = NewPopulatedFeature_Text(r, easy)
	case 13:
		this.Feature = NewPopulatedFeature_Region(r, easy)
	case 14:
		this.Feature = NewPopulatedFeature_Audio(r, easy)
	case 15:
		this.Feature = NewPopulatedFeature_Geolocation(r, easy)
	case 1000:
		this.Feature = NewPopulatedFeature_Raw(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeature_Image(r randyFeatures, easy bool) *Feature_Image {
	this := &Feature_Image{}
	this.Image = NewPopulatedImage(r, easy)
	return this
}
func NewPopulatedFeature_RawImage(r randyFeatures, easy bool) *Feature_RawImage {
	this := &Feature_RawImage{}
	this.RawImage = NewPopulatedRawImage(r, easy)
	return this
}
func NewPopulatedFeature_Classification(r randyFeatures, easy bool) *Feature_Classification {
	this := &Feature_Classification{}
	this.Classification = NewPopulatedClassification(r, easy)
	return this
}
func NewPopulatedFeature_BoundingBox(r randyFeatures, easy bool) *Feature_BoundingBox {
	this := &Feature_BoundingBox{}
	this.BoundingBox = NewPopulatedBoundingBox(r, easy)
	return this
}
func NewPopulatedFeature_SemanticSegment(r randyFeatures, easy bool) *Feature_SemanticSegment {
	this := &Feature_SemanticSegment{}
	this.SemanticSegment = NewPopulatedSemanticSegment(r, easy)
	return this
}
func NewPopulatedFeature_InstanceSegment(r randyFeatures, easy bool) *Feature_InstanceSegment {
	this := &Feature_InstanceSegment{}
	this.InstanceSegment = NewPopulatedInstanceSegment(r, easy)
	return this
}
func NewPopulatedFeature_Text(r randyFeatures, easy bool) *Feature_Text {
	this := &Feature_Text{}
	this.Text = NewPopulatedText(r, easy)
	return this
}
func NewPopulatedFeature_Region(r randyFeatures, easy bool) *Feature_Region {
	this := &Feature_Region{}
	this.Region = NewPopulatedRegion(r, easy)
	return this
}
func NewPopulatedFeature_Audio(r randyFeatures, easy bool) *Feature_Audio {
	this := &Feature_Audio{}
	this.Audio = NewPopulatedAudio(r, easy)
	return this
}
func NewPopulatedFeature_Geolocation(r randyFeatures, easy bool) *Feature_Geolocation {
	this := &Feature_Geolocation{}
	this.Geolocation = NewPopulatedGeoLocation(r, easy)
	return this
}
func NewPopulatedFeature_Raw(r randyFeatures, easy bool) *Feature_Raw {
	this := &Feature_Raw{}
	this.Raw = NewPopulatedRaw(r, easy)
	return this
}

type randyFeatures interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFeatures(r randyFeatures) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFeatures(r randyFeatures) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneFeatures(r)
	}
	return string(tmps)
}
func randUnrecognizedFeatures(r randyFeatures, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFeatures(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFeatures(dAtA []byte, r randyFeatures, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFeatures(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFeatures(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *RawImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.DataType)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	if len(m.CharList) > 0 {
		l = 0
		for _, e := range m.CharList {
			l += sovFeatures(uint64(e))
		}
		n += 1 + sovFeatures(uint64(l)) + l
	}
	if len(m.FloatList) > 0 {
		n += 1 + sovFeatures(uint64(len(m.FloatList)*4)) + len(m.FloatList)*4
	}
	if m.Width != 0 {
		n += 1 + sovFeatures(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovFeatures(uint64(m.Height))
	}
	if m.Channels != 0 {
		n += 1 + sovFeatures(uint64(m.Channels))
	}
	l = len(m.CompressedData)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Classification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovFeatures(uint64(m.Index))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *BoundingBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovFeatures(uint64(m.Index))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	if m.Xmin != 0 {
		n += 5
	}
	if m.Xmax != 0 {
		n += 5
	}
	if m.Ymin != 0 {
		n += 5
	}
	if m.Ymax != 0 {
		n += 5
	}
	return n
}

func (m *SemanticSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovFeatures(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovFeatures(uint64(m.Width))
	}
	if len(m.IntMask) > 0 {
		l = 0
		for _, e := range m.IntMask {
			l += sovFeatures(uint64(e))
		}
		n += 1 + sovFeatures(uint64(l)) + l
	}
	return n
}

func (m *InstanceSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovFeatures(uint64(m.Index))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	if m.Xmin != 0 {
		n += 5
	}
	if m.Xmax != 0 {
		n += 5
	}
	if m.Ymin != 0 {
		n += 5
	}
	if m.Ymax != 0 {
		n += 5
	}
	l = len(m.MaskType)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovFeatures(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovFeatures(uint64(m.Width))
	}
	if len(m.IntMask) > 0 {
		l = 0
		for _, e := range m.IntMask {
			l += sovFeatures(uint64(e))
		}
		n += 1 + sovFeatures(uint64(l)) + l
	}
	if len(m.FloatMask) > 0 {
		n += 1 + sovFeatures(uint64(len(m.FloatMask)*4)) + len(m.FloatMask)*4
	}
	return n
}

func (m *GeoLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovFeatures(uint64(m.Index))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Audio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Raw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}

func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeatures(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFeatures(uint64(m.Type))
	}
	if m.Probability != 0 {
		n += 5
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFeatures(uint64(len(k))) + 1 + len(v) + sovFeatures(uint64(len(v)))
			n += mapEntrySize + 1 + sovFeatures(uint64(mapEntrySize))
		}
	}
	if m.Feature != nil {
		n += m.Feature.Size()
	}
	return n
}

func (m *Feature_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_RawImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawImage != nil {
		l = m.RawImage.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Classification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Classification != nil {
		l = m.Classification.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_BoundingBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoundingBox != nil {
		l = m.BoundingBox.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_SemanticSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SemanticSegment != nil {
		l = m.SemanticSegment.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_InstanceSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstanceSegment != nil {
		l = m.InstanceSegment.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Audio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Geolocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Geolocation != nil {
		l = m.Geolocation.Size()
		n += 1 + l + sovFeatures(uint64(l))
	}
	return n
}
func (m *Feature_Raw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 2 + l + sovFeatures(uint64(l))
	}
	return n
}

func sovFeatures(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFeatures(x uint64) (n int) {
	return sovFeatures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Image{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RawImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RawImage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`CharList:` + fmt.Sprintf("%v", this.CharList) + `,`,
		`FloatList:` + fmt.Sprintf("%v", this.FloatList) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Channels:` + fmt.Sprintf("%v", this.Channels) + `,`,
		`CompressedData:` + fmt.Sprintf("%v", this.CompressedData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Classification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Classification{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoundingBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoundingBox{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Xmin:` + fmt.Sprintf("%v", this.Xmin) + `,`,
		`Xmax:` + fmt.Sprintf("%v", this.Xmax) + `,`,
		`Ymin:` + fmt.Sprintf("%v", this.Ymin) + `,`,
		`Ymax:` + fmt.Sprintf("%v", this.Ymax) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SemanticSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SemanticSegment{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`IntMask:` + fmt.Sprintf("%v", this.IntMask) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceSegment{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Xmin:` + fmt.Sprintf("%v", this.Xmin) + `,`,
		`Xmax:` + fmt.Sprintf("%v", this.Xmax) + `,`,
		`Ymin:` + fmt.Sprintf("%v", this.Ymin) + `,`,
		`Ymax:` + fmt.Sprintf("%v", this.Ymax) + `,`,
		`MaskType:` + fmt.Sprintf("%v", this.MaskType) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`IntMask:` + fmt.Sprintf("%v", this.IntMask) + `,`,
		`FloatMask:` + fmt.Sprintf("%v", this.FloatMask) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoLocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoLocation{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Region{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Text{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Audio{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Raw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Raw{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&Feature{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`Feature:` + fmt.Sprintf("%v", this.Feature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Image{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "Image", "Image", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_RawImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_RawImage{`,
		`RawImage:` + strings.Replace(fmt.Sprintf("%v", this.RawImage), "RawImage", "RawImage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Classification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Classification{`,
		`Classification:` + strings.Replace(fmt.Sprintf("%v", this.Classification), "Classification", "Classification", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_BoundingBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_BoundingBox{`,
		`BoundingBox:` + strings.Replace(fmt.Sprintf("%v", this.BoundingBox), "BoundingBox", "BoundingBox", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_SemanticSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_SemanticSegment{`,
		`SemanticSegment:` + strings.Replace(fmt.Sprintf("%v", this.SemanticSegment), "SemanticSegment", "SemanticSegment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_InstanceSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_InstanceSegment{`,
		`InstanceSegment:` + strings.Replace(fmt.Sprintf("%v", this.InstanceSegment), "InstanceSegment", "InstanceSegment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Text{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "Text", "Text", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Region{`,
		`Region:` + strings.Replace(fmt.Sprintf("%v", this.Region), "Region", "Region", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Audio{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "Audio", "Audio", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Geolocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Geolocation{`,
		`Geolocation:` + strings.Replace(fmt.Sprintf("%v", this.Geolocation), "GeoLocation", "GeoLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature_Raw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature_Raw{`,
		`Raw:` + strings.Replace(fmt.Sprintf("%v", this.Raw), "Raw", "Raw", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFeatures(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CharList = append(m.CharList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeatures
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFeatures
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CharList) == 0 {
					m.CharList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CharList = append(m.CharList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CharList", wireType)
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.FloatList = append(m.FloatList, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeatures
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFeatures
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.FloatList) == 0 {
					m.FloatList = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.FloatList = append(m.FloatList, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatList", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			m.Channels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channels |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressedData = append(m.CompressedData[:0], dAtA[iNdEx:postIndex]...)
			if m.CompressedData == nil {
				m.CompressedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Classification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Classification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Classification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundingBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundingBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundingBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Xmin = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Xmax = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ymin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ymin = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ymax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ymax = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SemanticSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SemanticSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SemanticSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntMask = append(m.IntMask, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeatures
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFeatures
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IntMask) == 0 {
					m.IntMask = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntMask = append(m.IntMask, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntMask", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Xmin = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Xmax = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ymin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ymin = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ymax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ymax = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaskType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaskType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntMask = append(m.IntMask, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeatures
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFeatures
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IntMask) == 0 {
					m.IntMask = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntMask = append(m.IntMask, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntMask", wireType)
			}
		case 11:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.FloatMask = append(m.FloatMask, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeatures
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFeatures
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.FloatMask) == 0 {
					m.FloatMask = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.FloatMask = append(m.FloatMask, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatMask", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Audio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Audio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Raw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Raw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Raw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FeatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Probability = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFeatures
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFeatures
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFeatures
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFeatures
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFeatures(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFeatures
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Image{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Image{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RawImage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_RawImage{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Classification{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Classification{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundingBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BoundingBox{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_BoundingBox{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemanticSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SemanticSegment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_SemanticSegment{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstanceSegment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_InstanceSegment{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Text{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Region{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Region{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Audio{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Audio{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geolocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GeoLocation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Geolocation{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Raw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Feature = &Feature_Raw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeatures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeatures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeatures
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFeatures
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFeatures
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFeatures(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFeatures
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFeatures = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeatures   = fmt.Errorf("proto: integer overflow")
)
