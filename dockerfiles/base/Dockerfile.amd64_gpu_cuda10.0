FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04
MAINTAINER Yen-Hsiang Chang <yhchang3@illinois.edu>

# Build-time metadata as defined at http://label-schema.org
ARG BUILD_DATE
ARG VCS_REF
ARG VCS_URL
ARG VERSION
ARG ARCH
ARG FRAMEWORK_VERSION
ARG GCC_VERSION
ARG GO_VERSION
LABEL org.mlmodelscope.base.build-date=$BUILD_DATE \
  org.mlmodelscope.base.name="base mlmodelscope gpu image" \
  org.mlmodelscope.base.description="" \
  org.mlmodelscope.base.url="https://www.mlmodelscope.org/" \
  org.mlmodelscope.base.vcs-ref=$VCS_REF \
  org.mlmodelscope.base.vcs-url=$VCS_URL \
  org.mlmodelscope.base.vendor="MLModelScope" \
  org.mlmodelscope.base.arch=$ARCH \
  org.mlmodelscope.base.gcc.version=$GCC_VERSION \
  org.mlmodelscope.base.go.version=$GO_VERSION \
  org.mlmodelscope.base.version=$VERSION \
  org.mlmodelscope.base.schema-version="1.0"

#########################################################################
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && apt install -y --no-install-recommends \
  build-essential \
  software-properties-common && \
  add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
  apt-get update && apt-get install -y --no-install-recommends \
  gcc-${GCC_VERSION} \
  g++-${GCC_VERSION}  \
  libvips          \
  libjpeg-turbo8-dev \
  libturbojpeg \
  libvips-dev \
  libvips42 \
  build-essential \
  pkg-config \
  git \
  libopenblas-dev \
  libopenblas-base \
  python3-dev \
  libcurl4-openssl-dev \
  libgtest-dev \
  cmake \
  curl \
  wget \
  unzip \
  apt-transport-https \
  ca-certificates \
  bison \
  tzdata \
  locales \
  subversion \
  && \
  rm -rf /var/lib/apt/lists/* && \
  update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 60 --slave /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} && \
  update-alternatives --config gcc && \
  gcc --version

RUN ln -fs /usr/share/zoneinfo/America/Chicago /etc/localtime && dpkg-reconfigure --frontend noninteractive tzdata

RUN locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

# Install CMake
RUN curl -sSL https://cmake.org/files/v3.13/cmake-3.13.0-Linux-x86_64.tar.gz -o cmake.tar.gz \
  && tar -xf cmake.tar.gz \
  && cp -r cmake-3.13.0-Linux-x86_64/* /usr/. \
  && rm -fr cmake.tar.gz cmake-3.13.0-Linux-x86_64

# Install Go
ENV GIMME_GO_VERSION $GO_VERSION
ENV GIMME_OS "linux"
ENV GIMME_ARCH $ARCH

LABEL org.golang.version=$GIMME_GO_VERSION
LABEL org.golang.os=$GIMME_OS
LABEL org.golang.arch=$GIMME_ARCH

ADD https://raw.githubusercontent.com/travis-ci/gimme/master/gimme /usr/bin/gimme
RUN chmod +x /usr/bin/gimme
RUN gimme

ENV GOROOT "/root/.gimme/versions/go${GIMME_GO_VERSION}.${GIMME_OS}.${GIMME_ARCH}"
ENV PATH ${GOROOT}/bin:${PATH}

ENV GOPATH "/go"
ENV PATH $GOPATH/bin:$PATH

ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64

ENV FRAMEWORKS_DIR=/opt
ENV GODEBUG=cgocheck=0

RUN mkdir -p $FRAMEWORKS_DIR
